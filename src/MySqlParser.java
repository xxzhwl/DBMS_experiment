// Generated from G:/Javaproject/DBSQLanalysis/src\MySqlParser.g4 by ANTLR 4.7.2
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, AS=11, ASC=12, BEFORE=13, 
		BETWEEN=14, BOTH=15, BY=16, CALL=17, CASCADE=18, CASE=19, CAST=20, CHANGE=21, 
		CHARACTER=22, CHECK=23, COLLATE=24, COLUMN=25, CONDITION=26, CONSTRAINT=27, 
		CONTINUE=28, CONVERT=29, CREATE=30, CROSS=31, CURRENT=32, CURRENT_USER=33, 
		CURSOR=34, DATABASE=35, DATABASES=36, DECLARE=37, DEFAULT=38, DELAYED=39, 
		DELETE=40, DESC=41, DESCRIBE=42, DETERMINISTIC=43, DIAGNOSTICS=44, DISTINCT=45, 
		DISTINCTROW=46, DROP=47, EACH=48, ELSE=49, ELSEIF=50, ENCLOSED=51, ESCAPED=52, 
		EXISTS=53, EXIT=54, EXPLAIN=55, FALSE=56, FETCH=57, FOR=58, FORCE=59, 
		FOREIGN=60, FROM=61, FULLTEXT=62, GENERATED=63, GET=64, GRANT=65, GROUP=66, 
		HAVING=67, HIGH_PRIORITY=68, IF=69, IGNORE=70, IN=71, INDEX=72, INFILE=73, 
		INNER=74, INOUT=75, INSERT=76, INTERVAL=77, INTO=78, IS=79, ITERATE=80, 
		JOIN=81, KEY=82, KEYS=83, KILL=84, LEADING=85, LEAVE=86, LEFT=87, LIKE=88, 
		LIMIT=89, LINEAR=90, LINES=91, LOAD=92, LOCK=93, LOOP=94, LOW_PRIORITY=95, 
		MASTER_BIND=96, MASTER_SSL_VERIFY_SERVER_CERT=97, MATCH=98, MAXVALUE=99, 
		MODIFIES=100, NATURAL=101, NOT=102, NO_WRITE_TO_BINLOG=103, NULL_LITERAL=104, 
		NUMBER=105, ON=106, OPTIMIZE=107, OPTION=108, OPTIONALLY=109, OR=110, 
		ORDER=111, OUT=112, OUTER=113, OUTFILE=114, PARTITION=115, PRIMARY=116, 
		PROCEDURE=117, PURGE=118, RANGE=119, READ=120, READS=121, REFERENCES=122, 
		REGEXP=123, RELEASE=124, RENAME=125, REPEAT=126, REPLACE=127, REQUIRE=128, 
		RESIGNAL=129, RESTRICT=130, RETURN=131, REVOKE=132, RIGHT=133, RLIKE=134, 
		SCHEMA=135, SCHEMAS=136, SELECT=137, SET=138, SEPARATOR=139, SHOW=140, 
		SIGNAL=141, SPATIAL=142, SQL=143, SQLEXCEPTION=144, SQLSTATE=145, SQLWARNING=146, 
		SQL_BIG_RESULT=147, SQL_CALC_FOUND_ROWS=148, SQL_SMALL_RESULT=149, SSL=150, 
		STACKED=151, STARTING=152, STRAIGHT_JOIN=153, TABLE=154, TERMINATED=155, 
		THEN=156, TO=157, TRAILING=158, TRIGGER=159, TRUE=160, UNDO=161, UNION=162, 
		UNIQUE=163, UNLOCK=164, UNSIGNED=165, UPDATE=166, USAGE=167, USE=168, 
		USING=169, VALUES=170, WHEN=171, WHERE=172, WHILE=173, WITH=174, WRITE=175, 
		XOR=176, ZEROFILL=177, TINYINT=178, SMALLINT=179, MEDIUMINT=180, INT=181, 
		INTEGER=182, BIGINT=183, REAL=184, DOUBLE=185, PRECISION=186, FLOAT=187, 
		DECIMAL=188, DEC=189, NUMERIC=190, DATE=191, TIME=192, TIMESTAMP=193, 
		DATETIME=194, YEAR=195, CHAR=196, VARCHAR=197, NVARCHAR=198, NATIONAL=199, 
		BINARY=200, VARBINARY=201, TINYBLOB=202, BLOB=203, MEDIUMBLOB=204, LONGBLOB=205, 
		TINYTEXT=206, TEXT=207, MEDIUMTEXT=208, LONGTEXT=209, ENUM=210, VARYING=211, 
		SERIAL=212, YEAR_MONTH=213, DAY_HOUR=214, DAY_MINUTE=215, DAY_SECOND=216, 
		HOUR_MINUTE=217, HOUR_SECOND=218, MINUTE_SECOND=219, SECOND_MICROSECOND=220, 
		MINUTE_MICROSECOND=221, HOUR_MICROSECOND=222, DAY_MICROSECOND=223, AVG=224, 
		BIT_AND=225, BIT_OR=226, BIT_XOR=227, COUNT=228, GROUP_CONCAT=229, MAX=230, 
		MIN=231, STD=232, STDDEV=233, STDDEV_POP=234, STDDEV_SAMP=235, SUM=236, 
		VAR_POP=237, VAR_SAMP=238, VARIANCE=239, CURRENT_DATE=240, CURRENT_TIME=241, 
		CURRENT_TIMESTAMP=242, LOCALTIME=243, CURDATE=244, CURTIME=245, DATE_ADD=246, 
		DATE_SUB=247, EXTRACT=248, LOCALTIMESTAMP=249, NOW=250, POSITION=251, 
		SUBSTR=252, SUBSTRING=253, SYSDATE=254, TRIM=255, UTC_DATE=256, UTC_TIME=257, 
		UTC_TIMESTAMP=258, ACCOUNT=259, ACTION=260, AFTER=261, AGGREGATE=262, 
		ALGORITHM=263, ANY=264, AT=265, AUTHORS=266, AUTOCOMMIT=267, AUTOEXTEND_SIZE=268, 
		AUTO_INCREMENT=269, AVG_ROW_LENGTH=270, BEGIN=271, BINLOG=272, BIT=273, 
		BLOCK=274, BOOL=275, BOOLEAN=276, BTREE=277, CACHE=278, CASCADED=279, 
		CHAIN=280, CHANGED=281, CHANNEL=282, CHECKSUM=283, PAGE_CHECKSUM=284, 
		CIPHER=285, CLASS_ORIGIN=286, CLIENT=287, CLOSE=288, COALESCE=289, CODE=290, 
		COLUMNS=291, COLUMN_FORMAT=292, COLUMN_NAME=293, COMMENT=294, COMMIT=295, 
		COMPACT=296, COMPLETION=297, COMPRESSED=298, COMPRESSION=299, CONCURRENT=300, 
		CONNECTION=301, CONSISTENT=302, CONSTRAINT_CATALOG=303, CONSTRAINT_SCHEMA=304, 
		CONSTRAINT_NAME=305, CONTAINS=306, CONTEXT=307, CONTRIBUTORS=308, COPY=309, 
		CPU=310, CURSOR_NAME=311, DATA=312, DATAFILE=313, DEALLOCATE=314, DEFAULT_AUTH=315, 
		DEFINER=316, DELAY_KEY_WRITE=317, DES_KEY_FILE=318, DIRECTORY=319, DISABLE=320, 
		DISCARD=321, DISK=322, DO=323, DUMPFILE=324, DUPLICATE=325, DYNAMIC=326, 
		ENABLE=327, ENCRYPTION=328, END=329, ENDS=330, ENGINE=331, ENGINES=332, 
		ERROR=333, ERRORS=334, ESCAPE=335, EVEN=336, EVENT=337, EVENTS=338, EVERY=339, 
		EXCHANGE=340, EXCLUSIVE=341, EXPIRE=342, EXPORT=343, EXTENDED=344, EXTENT_SIZE=345, 
		FAST=346, FAULTS=347, FIELDS=348, FILE_BLOCK_SIZE=349, FILTER=350, FIRST=351, 
		FIXED=352, FLUSH=353, FOLLOWS=354, FOUND=355, FULL=356, FUNCTION=357, 
		GENERAL=358, GLOBAL=359, GRANTS=360, GROUP_REPLICATION=361, HANDLER=362, 
		HASH=363, HELP=364, HOST=365, HOSTS=366, IDENTIFIED=367, IGNORE_SERVER_IDS=368, 
		IMPORT=369, INDEXES=370, INITIAL_SIZE=371, INPLACE=372, INSERT_METHOD=373, 
		INSTALL=374, INSTANCE=375, INVISIBLE=376, INVOKER=377, IO=378, IO_THREAD=379, 
		IPC=380, ISOLATION=381, ISSUER=382, JSON=383, KEY_BLOCK_SIZE=384, LANGUAGE=385, 
		LAST=386, LEAVES=387, LESS=388, LEVEL=389, LIST=390, LOCAL=391, LOGFILE=392, 
		LOGS=393, MASTER=394, MASTER_AUTO_POSITION=395, MASTER_CONNECT_RETRY=396, 
		MASTER_DELAY=397, MASTER_HEARTBEAT_PERIOD=398, MASTER_HOST=399, MASTER_LOG_FILE=400, 
		MASTER_LOG_POS=401, MASTER_PASSWORD=402, MASTER_PORT=403, MASTER_RETRY_COUNT=404, 
		MASTER_SSL=405, MASTER_SSL_CA=406, MASTER_SSL_CAPATH=407, MASTER_SSL_CERT=408, 
		MASTER_SSL_CIPHER=409, MASTER_SSL_CRL=410, MASTER_SSL_CRLPATH=411, MASTER_SSL_KEY=412, 
		MASTER_TLS_VERSION=413, MASTER_USER=414, MAX_CONNECTIONS_PER_HOUR=415, 
		MAX_QUERIES_PER_HOUR=416, MAX_ROWS=417, MAX_SIZE=418, MAX_UPDATES_PER_HOUR=419, 
		MAX_USER_CONNECTIONS=420, MEDIUM=421, MERGE=422, MESSAGE_TEXT=423, MID=424, 
		MIGRATE=425, MIN_ROWS=426, MODE=427, MODIFY=428, MUTEX=429, MYSQL=430, 
		MYSQL_ERRNO=431, NAME=432, NAMES=433, NCHAR=434, NEVER=435, NEXT=436, 
		NO=437, NODEGROUP=438, NONE=439, OFFLINE=440, OFFSET=441, OJ=442, OLD_PASSWORD=443, 
		ONE=444, ONLINE=445, ONLY=446, OPEN=447, OPTIMIZER_COSTS=448, OPTIONS=449, 
		OWNER=450, PACK_KEYS=451, PAGE=452, PARSER=453, PARTIAL=454, PARTITIONING=455, 
		PARTITIONS=456, PASSWORD=457, PHASE=458, PLUGIN=459, PLUGIN_DIR=460, PLUGINS=461, 
		PORT=462, PRECEDES=463, PREPARE=464, PRESERVE=465, PREV=466, PROCESSLIST=467, 
		PROFILE=468, PROFILES=469, PROXY=470, QUERY=471, QUICK=472, REBUILD=473, 
		RECOVER=474, REDO_BUFFER_SIZE=475, REDUNDANT=476, RELAY=477, RELAY_LOG_FILE=478, 
		RELAY_LOG_POS=479, RELAYLOG=480, REMOVE=481, REORGANIZE=482, REPAIR=483, 
		REPLICATE_DO_DB=484, REPLICATE_DO_TABLE=485, REPLICATE_IGNORE_DB=486, 
		REPLICATE_IGNORE_TABLE=487, REPLICATE_REWRITE_DB=488, REPLICATE_WILD_DO_TABLE=489, 
		REPLICATE_WILD_IGNORE_TABLE=490, REPLICATION=491, RESET=492, RESUME=493, 
		RETURNED_SQLSTATE=494, RETURNS=495, ROLLBACK=496, ROLLUP=497, ROTATE=498, 
		ROW=499, ROWS=500, ROW_FORMAT=501, SAVEPOINT=502, SCHEDULE=503, SECURITY=504, 
		SERVER=505, SESSION=506, SHARE=507, SHARED=508, SIGNED=509, SIMPLE=510, 
		SLAVE=511, SLOW=512, SNAPSHOT=513, SOCKET=514, SOME=515, SONAME=516, SOUNDS=517, 
		SOURCE=518, SQL_AFTER_GTIDS=519, SQL_AFTER_MTS_GAPS=520, SQL_BEFORE_GTIDS=521, 
		SQL_BUFFER_RESULT=522, SQL_CACHE=523, SQL_NO_CACHE=524, SQL_THREAD=525, 
		START=526, STARTS=527, STATS_AUTO_RECALC=528, STATS_PERSISTENT=529, STATS_SAMPLE_PAGES=530, 
		STATUS=531, STOP=532, STORAGE=533, STORED=534, STRING=535, SUBCLASS_ORIGIN=536, 
		SUBJECT=537, SUBPARTITION=538, SUBPARTITIONS=539, SUSPEND=540, SWAPS=541, 
		SWITCHES=542, TABLE_NAME=543, TABLESPACE=544, TEMPORARY=545, TEMPTABLE=546, 
		THAN=547, TRADITIONAL=548, TRANSACTION=549, TRIGGERS=550, TRUNCATE=551, 
		UNDEFINED=552, UNDOFILE=553, UNDO_BUFFER_SIZE=554, UNINSTALL=555, UNKNOWN=556, 
		UNTIL=557, UPGRADE=558, USER=559, USE_FRM=560, USER_RESOURCES=561, VALIDATION=562, 
		VALUE=563, VARIABLES=564, VIEW=565, VIRTUAL=566, VISIBLE=567, WAIT=568, 
		WARNINGS=569, WITHOUT=570, WORK=571, WRAPPER=572, X509=573, XA=574, XML=575, 
		EUR=576, USA=577, JIS=578, ISO=579, INTERNAL=580, QUARTER=581, MONTH=582, 
		DAY=583, HOUR=584, MINUTE=585, WEEK=586, SECOND=587, MICROSECOND=588, 
		TABLES=589, ROUTINE=590, EXECUTE=591, FILE=592, PROCESS=593, RELOAD=594, 
		SHUTDOWN=595, SUPER=596, PRIVILEGES=597, SESSION_VARIABLES_ADMIN=598, 
		ARMSCII8=599, ASCII=600, BIG5=601, CP1250=602, CP1251=603, CP1256=604, 
		CP1257=605, CP850=606, CP852=607, CP866=608, CP932=609, DEC8=610, EUCJPMS=611, 
		EUCKR=612, GB2312=613, GBK=614, GEOSTD8=615, GREEK=616, HEBREW=617, HP8=618, 
		KEYBCS2=619, KOI8R=620, KOI8U=621, LATIN1=622, LATIN2=623, LATIN5=624, 
		LATIN7=625, MACCE=626, MACROMAN=627, SJIS=628, SWE7=629, TIS620=630, UCS2=631, 
		UJIS=632, UTF16=633, UTF16LE=634, UTF32=635, UTF8=636, UTF8MB3=637, UTF8MB4=638, 
		ARCHIVE=639, BLACKHOLE=640, CSV=641, FEDERATED=642, INNODB=643, MEMORY=644, 
		MRG_MYISAM=645, MYISAM=646, NDB=647, NDBCLUSTER=648, PERFORMANCE_SCHEMA=649, 
		TOKUDB=650, REPEATABLE=651, COMMITTED=652, UNCOMMITTED=653, SERIALIZABLE=654, 
		GEOMETRYCOLLECTION=655, GEOMCOLLECTION=656, GEOMETRY=657, LINESTRING=658, 
		MULTILINESTRING=659, MULTIPOINT=660, MULTIPOLYGON=661, POINT=662, POLYGON=663, 
		ABS=664, ACOS=665, ADDDATE=666, ADDTIME=667, AES_DECRYPT=668, AES_ENCRYPT=669, 
		AREA=670, ASBINARY=671, ASIN=672, ASTEXT=673, ASWKB=674, ASWKT=675, ASYMMETRIC_DECRYPT=676, 
		ASYMMETRIC_DERIVE=677, ASYMMETRIC_ENCRYPT=678, ASYMMETRIC_SIGN=679, ASYMMETRIC_VERIFY=680, 
		ATAN=681, ATAN2=682, BENCHMARK=683, BIN=684, BIT_COUNT=685, BIT_LENGTH=686, 
		BUFFER=687, CATALOG_NAME=688, CEIL=689, CEILING=690, CENTROID=691, CHARACTER_LENGTH=692, 
		CHARSET=693, CHAR_LENGTH=694, COERCIBILITY=695, COLLATION=696, COMPRESS=697, 
		CONCAT=698, CONCAT_WS=699, CONNECTION_ID=700, CONV=701, CONVERT_TZ=702, 
		COS=703, COT=704, CRC32=705, CREATE_ASYMMETRIC_PRIV_KEY=706, CREATE_ASYMMETRIC_PUB_KEY=707, 
		CREATE_DH_PARAMETERS=708, CREATE_DIGEST=709, CROSSES=710, DATEDIFF=711, 
		DATE_FORMAT=712, DAYNAME=713, DAYOFMONTH=714, DAYOFWEEK=715, DAYOFYEAR=716, 
		DECODE=717, DEGREES=718, DES_DECRYPT=719, DES_ENCRYPT=720, DIMENSION=721, 
		DISJOINT=722, ELT=723, ENCODE=724, ENCRYPT=725, ENDPOINT=726, ENVELOPE=727, 
		EQUALS=728, EXP=729, EXPORT_SET=730, EXTERIORRING=731, EXTRACTVALUE=732, 
		FIELD=733, FIND_IN_SET=734, FLOOR=735, FORMAT=736, FOUND_ROWS=737, FROM_BASE64=738, 
		FROM_DAYS=739, FROM_UNIXTIME=740, GEOMCOLLFROMTEXT=741, GEOMCOLLFROMWKB=742, 
		GEOMETRYCOLLECTIONFROMTEXT=743, GEOMETRYCOLLECTIONFROMWKB=744, GEOMETRYFROMTEXT=745, 
		GEOMETRYFROMWKB=746, GEOMETRYN=747, GEOMETRYTYPE=748, GEOMFROMTEXT=749, 
		GEOMFROMWKB=750, GET_FORMAT=751, GET_LOCK=752, GLENGTH=753, GREATEST=754, 
		GTID_SUBSET=755, GTID_SUBTRACT=756, HEX=757, IFNULL=758, INET6_ATON=759, 
		INET6_NTOA=760, INET_ATON=761, INET_NTOA=762, INSTR=763, INTERIORRINGN=764, 
		INTERSECTS=765, ISCLOSED=766, ISEMPTY=767, ISNULL=768, ISSIMPLE=769, IS_FREE_LOCK=770, 
		IS_IPV4=771, IS_IPV4_COMPAT=772, IS_IPV4_MAPPED=773, IS_IPV6=774, IS_USED_LOCK=775, 
		LAST_INSERT_ID=776, LCASE=777, LEAST=778, LENGTH=779, LINEFROMTEXT=780, 
		LINEFROMWKB=781, LINESTRINGFROMTEXT=782, LINESTRINGFROMWKB=783, LN=784, 
		LOAD_FILE=785, LOCATE=786, LOG=787, LOG10=788, LOG2=789, LOWER=790, LPAD=791, 
		LTRIM=792, MAKEDATE=793, MAKETIME=794, MAKE_SET=795, MASTER_POS_WAIT=796, 
		MBRCONTAINS=797, MBRDISJOINT=798, MBREQUAL=799, MBRINTERSECTS=800, MBROVERLAPS=801, 
		MBRTOUCHES=802, MBRWITHIN=803, MD5=804, MLINEFROMTEXT=805, MLINEFROMWKB=806, 
		MONTHNAME=807, MPOINTFROMTEXT=808, MPOINTFROMWKB=809, MPOLYFROMTEXT=810, 
		MPOLYFROMWKB=811, MULTILINESTRINGFROMTEXT=812, MULTILINESTRINGFROMWKB=813, 
		MULTIPOINTFROMTEXT=814, MULTIPOINTFROMWKB=815, MULTIPOLYGONFROMTEXT=816, 
		MULTIPOLYGONFROMWKB=817, NAME_CONST=818, NULLIF=819, NUMGEOMETRIES=820, 
		NUMINTERIORRINGS=821, NUMPOINTS=822, OCT=823, OCTET_LENGTH=824, ORD=825, 
		OVERLAPS=826, PERIOD_ADD=827, PERIOD_DIFF=828, PI=829, POINTFROMTEXT=830, 
		POINTFROMWKB=831, POINTN=832, POLYFROMTEXT=833, POLYFROMWKB=834, POLYGONFROMTEXT=835, 
		POLYGONFROMWKB=836, POW=837, POWER=838, QUOTE=839, RADIANS=840, RAND=841, 
		RANDOM_BYTES=842, RELEASE_LOCK=843, REVERSE=844, ROUND=845, ROW_COUNT=846, 
		RPAD=847, RTRIM=848, SEC_TO_TIME=849, SESSION_USER=850, SHA=851, SHA1=852, 
		SHA2=853, SCHEMA_NAME=854, SIGN=855, SIN=856, SLEEP=857, SOUNDEX=858, 
		SQL_THREAD_WAIT_AFTER_GTIDS=859, SQRT=860, SRID=861, STARTPOINT=862, STRCMP=863, 
		STR_TO_DATE=864, ST_AREA=865, ST_ASBINARY=866, ST_ASTEXT=867, ST_ASWKB=868, 
		ST_ASWKT=869, ST_BUFFER=870, ST_CENTROID=871, ST_CONTAINS=872, ST_CROSSES=873, 
		ST_DIFFERENCE=874, ST_DIMENSION=875, ST_DISJOINT=876, ST_DISTANCE=877, 
		ST_ENDPOINT=878, ST_ENVELOPE=879, ST_EQUALS=880, ST_EXTERIORRING=881, 
		ST_GEOMCOLLFROMTEXT=882, ST_GEOMCOLLFROMTXT=883, ST_GEOMCOLLFROMWKB=884, 
		ST_GEOMETRYCOLLECTIONFROMTEXT=885, ST_GEOMETRYCOLLECTIONFROMWKB=886, ST_GEOMETRYFROMTEXT=887, 
		ST_GEOMETRYFROMWKB=888, ST_GEOMETRYN=889, ST_GEOMETRYTYPE=890, ST_GEOMFROMTEXT=891, 
		ST_GEOMFROMWKB=892, ST_INTERIORRINGN=893, ST_INTERSECTION=894, ST_INTERSECTS=895, 
		ST_ISCLOSED=896, ST_ISEMPTY=897, ST_ISSIMPLE=898, ST_LINEFROMTEXT=899, 
		ST_LINEFROMWKB=900, ST_LINESTRINGFROMTEXT=901, ST_LINESTRINGFROMWKB=902, 
		ST_NUMGEOMETRIES=903, ST_NUMINTERIORRING=904, ST_NUMINTERIORRINGS=905, 
		ST_NUMPOINTS=906, ST_OVERLAPS=907, ST_POINTFROMTEXT=908, ST_POINTFROMWKB=909, 
		ST_POINTN=910, ST_POLYFROMTEXT=911, ST_POLYFROMWKB=912, ST_POLYGONFROMTEXT=913, 
		ST_POLYGONFROMWKB=914, ST_SRID=915, ST_STARTPOINT=916, ST_SYMDIFFERENCE=917, 
		ST_TOUCHES=918, ST_UNION=919, ST_WITHIN=920, ST_X=921, ST_Y=922, SUBDATE=923, 
		SUBSTRING_INDEX=924, SUBTIME=925, SYSTEM_USER=926, TAN=927, TIMEDIFF=928, 
		TIMESTAMPADD=929, TIMESTAMPDIFF=930, TIME_FORMAT=931, TIME_TO_SEC=932, 
		TOUCHES=933, TO_BASE64=934, TO_DAYS=935, TO_SECONDS=936, UCASE=937, UNCOMPRESS=938, 
		UNCOMPRESSED_LENGTH=939, UNHEX=940, UNIX_TIMESTAMP=941, UPDATEXML=942, 
		UPPER=943, UUID=944, UUID_SHORT=945, VALIDATE_PASSWORD_STRENGTH=946, VERSION=947, 
		WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=948, WEEKDAY=949, WEEKOFYEAR=950, WEIGHT_STRING=951, 
		WITHIN=952, YEARWEEK=953, Y_FUNCTION=954, X_FUNCTION=955, VAR_ASSIGN=956, 
		PLUS_ASSIGN=957, MINUS_ASSIGN=958, MULT_ASSIGN=959, DIV_ASSIGN=960, MOD_ASSIGN=961, 
		AND_ASSIGN=962, XOR_ASSIGN=963, OR_ASSIGN=964, STAR=965, DIVIDE=966, MODULE=967, 
		PLUS=968, MINUSMINUS=969, MINUS=970, DIV=971, MOD=972, EQUAL_SYMBOL=973, 
		GREATER_SYMBOL=974, LESS_SYMBOL=975, EXCLAMATION_SYMBOL=976, BIT_NOT_OP=977, 
		BIT_OR_OP=978, BIT_AND_OP=979, BIT_XOR_OP=980, DOT=981, LR_BRACKET=982, 
		RR_BRACKET=983, COMMA=984, SEMI=985, AT_SIGN=986, ZERO_DECIMAL=987, ONE_DECIMAL=988, 
		TWO_DECIMAL=989, SINGLE_QUOTE_SYMB=990, DOUBLE_QUOTE_SYMB=991, REVERSE_QUOTE_SYMB=992, 
		COLON_SYMB=993, CHARSET_REVERSE_QOUTE_STRING=994, FILESIZE_LITERAL=995, 
		START_NATIONAL_STRING_LITERAL=996, STRING_LITERAL=997, DECIMAL_LITERAL=998, 
		HEXADECIMAL_LITERAL=999, REAL_LITERAL=1000, NULL_SPEC_LITERAL=1001, BIT_STRING=1002, 
		STRING_CHARSET_NAME=1003, DOT_ID=1004, ID=1005, REVERSE_QUOTE_ID=1006, 
		STRING_USER_NAME=1007, LOCAL_ID=1008, GLOBAL_ID=1009, ERROR_RECONGNIGION=1010;
	public static final int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createServer = 18, 
		RULE_createTable = 19, RULE_createTablespaceInnodb = 20, RULE_createTablespaceNdb = 21, 
		RULE_createTrigger = 22, RULE_createView = 23, RULE_createDatabaseOption = 24, 
		RULE_ownerStatement = 25, RULE_scheduleExpression = 26, RULE_timestampValue = 27, 
		RULE_intervalExpr = 28, RULE_intervalType = 29, RULE_enableType = 30, 
		RULE_indexType = 31, RULE_indexOption = 32, RULE_procedureParameter = 33, 
		RULE_functionParameter = 34, RULE_routineOption = 35, RULE_serverOption = 36, 
		RULE_createDefinitions = 37, RULE_createDefinition = 38, RULE_columnDefinition = 39, 
		RULE_columnConstraint = 40, RULE_tableConstraint = 41, RULE_referenceDefinition = 42, 
		RULE_referenceAction = 43, RULE_referenceControlType = 44, RULE_indexColumnDefinition = 45, 
		RULE_tableOption = 46, RULE_tablespaceStorage = 47, RULE_partitionDefinitions = 48, 
		RULE_partitionFunctionDefinition = 49, RULE_subpartitionFunctionDefinition = 50, 
		RULE_partitionDefinition = 51, RULE_partitionDefinerAtom = 52, RULE_partitionDefinerVector = 53, 
		RULE_subpartitionDefinition = 54, RULE_partitionOption = 55, RULE_alterDatabase = 56, 
		RULE_alterEvent = 57, RULE_alterFunction = 58, RULE_alterInstance = 59, 
		RULE_alterLogfileGroup = 60, RULE_alterProcedure = 61, RULE_alterServer = 62, 
		RULE_alterTable = 63, RULE_alterTablespace = 64, RULE_alterView = 65, 
		RULE_alterSpecification = 66, RULE_dropDatabase = 67, RULE_dropEvent = 68, 
		RULE_dropIndex = 69, RULE_dropLogfileGroup = 70, RULE_dropProcedure = 71, 
		RULE_dropFunction = 72, RULE_dropServer = 73, RULE_dropTable = 74, RULE_dropTablespace = 75, 
		RULE_dropTrigger = 76, RULE_dropView = 77, RULE_renameTable = 78, RULE_renameTableClause = 79, 
		RULE_truncateTable = 80, RULE_callStatement = 81, RULE_deleteStatement = 82, 
		RULE_doStatement = 83, RULE_handlerStatement = 84, RULE_insertStatement = 85, 
		RULE_loadDataStatement = 86, RULE_loadXmlStatement = 87, RULE_replaceStatement = 88, 
		RULE_selectStatement = 89, RULE_updateStatement = 90, RULE_insertStatementValue = 91, 
		RULE_updatedElement = 92, RULE_assignmentField = 93, RULE_lockClause = 94, 
		RULE_singleDeleteStatement = 95, RULE_multipleDeleteStatement = 96, RULE_handlerOpenStatement = 97, 
		RULE_handlerReadIndexStatement = 98, RULE_handlerReadStatement = 99, RULE_handlerCloseStatement = 100, 
		RULE_singleUpdateStatement = 101, RULE_multipleUpdateStatement = 102, 
		RULE_orderByClause = 103, RULE_orderByExpression = 104, RULE_tableSources = 105, 
		RULE_tableSource = 106, RULE_tableSourceItem = 107, RULE_indexHint = 108, 
		RULE_indexHintType = 109, RULE_joinPart = 110, RULE_queryExpression = 111, 
		RULE_queryExpressionNointo = 112, RULE_querySpecification = 113, RULE_querySpecificationNointo = 114, 
		RULE_unionParenthesis = 115, RULE_unionStatement = 116, RULE_selectSpec = 117, 
		RULE_selectElements = 118, RULE_selectElement = 119, RULE_selectIntoExpression = 120, 
		RULE_selectFieldsInto = 121, RULE_selectLinesInto = 122, RULE_fromClause = 123, 
		RULE_groupByItem = 124, RULE_limitClause = 125, RULE_limitClauseAtom = 126, 
		RULE_startTransaction = 127, RULE_beginWork = 128, RULE_commitWork = 129, 
		RULE_rollbackWork = 130, RULE_savepointStatement = 131, RULE_rollbackStatement = 132, 
		RULE_releaseStatement = 133, RULE_lockTables = 134, RULE_unlockTables = 135, 
		RULE_setAutocommitStatement = 136, RULE_setTransactionStatement = 137, 
		RULE_transactionMode = 138, RULE_lockTableElement = 139, RULE_lockAction = 140, 
		RULE_transactionOption = 141, RULE_transactionLevel = 142, RULE_changeMaster = 143, 
		RULE_changeReplicationFilter = 144, RULE_purgeBinaryLogs = 145, RULE_resetMaster = 146, 
		RULE_resetSlave = 147, RULE_startSlave = 148, RULE_stopSlave = 149, RULE_startGroupReplication = 150, 
		RULE_stopGroupReplication = 151, RULE_masterOption = 152, RULE_stringMasterOption = 153, 
		RULE_decimalMasterOption = 154, RULE_boolMasterOption = 155, RULE_channelOption = 156, 
		RULE_replicationFilter = 157, RULE_tablePair = 158, RULE_threadType = 159, 
		RULE_untilOption = 160, RULE_connectionOption = 161, RULE_gtuidSet = 162, 
		RULE_xaStartTransaction = 163, RULE_xaEndTransaction = 164, RULE_xaPrepareStatement = 165, 
		RULE_xaCommitWork = 166, RULE_xaRollbackWork = 167, RULE_xaRecoverWork = 168, 
		RULE_prepareStatement = 169, RULE_executeStatement = 170, RULE_deallocatePrepare = 171, 
		RULE_routineBody = 172, RULE_blockStatement = 173, RULE_caseStatement = 174, 
		RULE_ifStatement = 175, RULE_iterateStatement = 176, RULE_leaveStatement = 177, 
		RULE_loopStatement = 178, RULE_repeatStatement = 179, RULE_returnStatement = 180, 
		RULE_whileStatement = 181, RULE_cursorStatement = 182, RULE_declareVariable = 183, 
		RULE_declareCondition = 184, RULE_declareCursor = 185, RULE_declareHandler = 186, 
		RULE_handlerConditionValue = 187, RULE_procedureSqlStatement = 188, RULE_caseAlternative = 189, 
		RULE_elifAlternative = 190, RULE_alterUser = 191, RULE_createUser = 192, 
		RULE_dropUser = 193, RULE_grantStatement = 194, RULE_grantProxy = 195, 
		RULE_renameUser = 196, RULE_revokeStatement = 197, RULE_revokeProxy = 198, 
		RULE_setPasswordStatement = 199, RULE_userSpecification = 200, RULE_userAuthOption = 201, 
		RULE_tlsOption = 202, RULE_userResourceOption = 203, RULE_userPasswordOption = 204, 
		RULE_userLockOption = 205, RULE_privelegeClause = 206, RULE_privilege = 207, 
		RULE_privilegeLevel = 208, RULE_renameUserClause = 209, RULE_analyzeTable = 210, 
		RULE_checkTable = 211, RULE_checksumTable = 212, RULE_optimizeTable = 213, 
		RULE_repairTable = 214, RULE_checkTableOption = 215, RULE_createUdfunction = 216, 
		RULE_installPlugin = 217, RULE_uninstallPlugin = 218, RULE_setStatement = 219, 
		RULE_showStatement = 220, RULE_variableClause = 221, RULE_showCommonEntity = 222, 
		RULE_showFilter = 223, RULE_showGlobalInfoClause = 224, RULE_showSchemaEntity = 225, 
		RULE_showProfileType = 226, RULE_binlogStatement = 227, RULE_cacheIndexStatement = 228, 
		RULE_flushStatement = 229, RULE_killStatement = 230, RULE_loadIndexIntoCache = 231, 
		RULE_resetStatement = 232, RULE_shutdownStatement = 233, RULE_tableIndexes = 234, 
		RULE_flushOption = 235, RULE_flushTableOption = 236, RULE_loadedTableIndexes = 237, 
		RULE_simpleDescribeStatement = 238, RULE_fullDescribeStatement = 239, 
		RULE_helpStatement = 240, RULE_useStatement = 241, RULE_signalStatement = 242, 
		RULE_resignalStatement = 243, RULE_signalConditionInformation = 244, RULE_diagnosticsStatement = 245, 
		RULE_diagnosticsConditionInformationName = 246, RULE_describeObjectClause = 247, 
		RULE_fullId = 248, RULE_tableName = 249, RULE_fullColumnName = 250, RULE_indexColumnName = 251, 
		RULE_userName = 252, RULE_mysqlVariable = 253, RULE_charsetName = 254, 
		RULE_collationName = 255, RULE_engineName = 256, RULE_uuidSet = 257, RULE_xid = 258, 
		RULE_xuidStringId = 259, RULE_authPlugin = 260, RULE_uid = 261, RULE_simpleId = 262, 
		RULE_dottedId = 263, RULE_decimalLiteral = 264, RULE_fileSizeLiteral = 265, 
		RULE_stringLiteral = 266, RULE_booleanLiteral = 267, RULE_hexadecimalLiteral = 268, 
		RULE_nullNotnull = 269, RULE_constant = 270, RULE_dataType = 271, RULE_collectionOptions = 272, 
		RULE_convertedDataType = 273, RULE_lengthOneDimension = 274, RULE_lengthTwoDimension = 275, 
		RULE_lengthTwoOptionalDimension = 276, RULE_uidList = 277, RULE_tables = 278, 
		RULE_indexColumnNames = 279, RULE_expressions = 280, RULE_expressionsWithDefaults = 281, 
		RULE_constants = 282, RULE_simpleStrings = 283, RULE_userVariables = 284, 
		RULE_defaultValue = 285, RULE_currentTimestamp = 286, RULE_expressionOrDefault = 287, 
		RULE_ifExists = 288, RULE_ifNotExists = 289, RULE_functionCall = 290, 
		RULE_specificFunction = 291, RULE_caseFuncAlternative = 292, RULE_levelsInWeightString = 293, 
		RULE_levelInWeightListElement = 294, RULE_aggregateWindowedFunction = 295, 
		RULE_scalarFunctionName = 296, RULE_passwordFunctionClause = 297, RULE_functionArgs = 298, 
		RULE_functionArg = 299, RULE_expression = 300, RULE_predicate = 301, RULE_expressionAtom = 302, 
		RULE_unaryOperator = 303, RULE_comparisonOperator = 304, RULE_logicalOperator = 305, 
		RULE_bitOperator = 306, RULE_mathOperator = 307, RULE_charsetNameBase = 308, 
		RULE_transactionLevelBase = 309, RULE_privilegesBase = 310, RULE_intervalTypeBase = 311, 
		RULE_dataTypeBase = 312, RULE_keywordsCanBeId = 313, RULE_functionNameBase = 314;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "sqlStatements", "sqlStatement", "emptyStatement", "ddlStatement", 
			"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
			"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
			"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
			"createFunction", "createServer", "createTable", "createTablespaceInnodb", 
			"createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption", 
			"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
			"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
			"functionParameter", "routineOption", "serverOption", "createDefinitions", 
			"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
			"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
			"tableOption", "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
			"subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", 
			"partitionDefinerVector", "subpartitionDefinition", "partitionOption", 
			"alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
			"alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView", 
			"alterSpecification", "dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", 
			"dropProcedure", "dropFunction", "dropServer", "dropTable", "dropTablespace", 
			"dropTrigger", "dropView", "renameTable", "renameTableClause", "truncateTable", 
			"callStatement", "deleteStatement", "doStatement", "handlerStatement", 
			"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
			"selectStatement", "updateStatement", "insertStatementValue", "updatedElement", 
			"assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
			"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", 
			"handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement", 
			"orderByClause", "orderByExpression", "tableSources", "tableSource", 
			"tableSourceItem", "indexHint", "indexHintType", "joinPart", "queryExpression", 
			"queryExpressionNointo", "querySpecification", "querySpecificationNointo", 
			"unionParenthesis", "unionStatement", "selectSpec", "selectElements", 
			"selectElement", "selectIntoExpression", "selectFieldsInto", "selectLinesInto", 
			"fromClause", "groupByItem", "limitClause", "limitClauseAtom", "startTransaction", 
			"beginWork", "commitWork", "rollbackWork", "savepointStatement", "rollbackStatement", 
			"releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement", 
			"setTransactionStatement", "transactionMode", "lockTableElement", "lockAction", 
			"transactionOption", "transactionLevel", "changeMaster", "changeReplicationFilter", 
			"purgeBinaryLogs", "resetMaster", "resetSlave", "startSlave", "stopSlave", 
			"startGroupReplication", "stopGroupReplication", "masterOption", "stringMasterOption", 
			"decimalMasterOption", "boolMasterOption", "channelOption", "replicationFilter", 
			"tablePair", "threadType", "untilOption", "connectionOption", "gtuidSet", 
			"xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
			"xaRollbackWork", "xaRecoverWork", "prepareStatement", "executeStatement", 
			"deallocatePrepare", "routineBody", "blockStatement", "caseStatement", 
			"ifStatement", "iterateStatement", "leaveStatement", "loopStatement", 
			"repeatStatement", "returnStatement", "whileStatement", "cursorStatement", 
			"declareVariable", "declareCondition", "declareCursor", "declareHandler", 
			"handlerConditionValue", "procedureSqlStatement", "caseAlternative", 
			"elifAlternative", "alterUser", "createUser", "dropUser", "grantStatement", 
			"grantProxy", "renameUser", "revokeStatement", "revokeProxy", "setPasswordStatement", 
			"userSpecification", "userAuthOption", "tlsOption", "userResourceOption", 
			"userPasswordOption", "userLockOption", "privelegeClause", "privilege", 
			"privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", "checksumTable", 
			"optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
			"installPlugin", "uninstallPlugin", "setStatement", "showStatement", 
			"variableClause", "showCommonEntity", "showFilter", "showGlobalInfoClause", 
			"showSchemaEntity", "showProfileType", "binlogStatement", "cacheIndexStatement", 
			"flushStatement", "killStatement", "loadIndexIntoCache", "resetStatement", 
			"shutdownStatement", "tableIndexes", "flushOption", "flushTableOption", 
			"loadedTableIndexes", "simpleDescribeStatement", "fullDescribeStatement", 
			"helpStatement", "useStatement", "signalStatement", "resignalStatement", 
			"signalConditionInformation", "diagnosticsStatement", "diagnosticsConditionInformationName", 
			"describeObjectClause", "fullId", "tableName", "fullColumnName", "indexColumnName", 
			"userName", "mysqlVariable", "charsetName", "collationName", "engineName", 
			"uuidSet", "xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", 
			"decimalLiteral", "fileSizeLiteral", "stringLiteral", "booleanLiteral", 
			"hexadecimalLiteral", "nullNotnull", "constant", "dataType", "collectionOptions", 
			"convertedDataType", "lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
			"uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
			"constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
			"expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
			"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
			"aggregateWindowedFunction", "scalarFunctionName", "passwordFunctionClause", 
			"functionArgs", "functionArg", "expression", "predicate", "expressionAtom", 
			"unaryOperator", "comparisonOperator", "logicalOperator", "bitOperator", 
			"mathOperator", "charsetNameBase", "transactionLevelBase", "privilegesBase", 
			"intervalTypeBase", "dataTypeBase", "keywordsCanBeId", "functionNameBase"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
			"'ANALYZE'", "'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", 
			"'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", 
			"'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
			"'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", 
			"'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", 
			"'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", 
			"'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", 
			"'ESCAPED'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", 
			"'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GENERATED'", 
			"'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'IF'", 
			"'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", 
			"'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", 
			"'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", 
			"'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", 
			"'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", "'MODIFIES'", 
			"'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'NUMBER'", "'ON'", 
			"'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", 
			"'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
			"'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
			"'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", 
			"'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", 
			"'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SPATIAL'", 
			"'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", 
			"'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", 
			"'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", 
			"'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", 
			"'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", "'USING'", 
			"'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", 
			"'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'INT'", "'INTEGER'", 
			"'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'DECIMAL'", 
			"'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", 
			"'YEAR'", "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", "'BINARY'", 
			"'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONGBLOB'", 
			"'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", 
			"'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", 
			"'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", 
			"'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'AVG'", 
			"'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'GROUP_CONCAT'", "'MAX'", 
			"'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'SUM'", 
			"'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
			"'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", 
			"'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", 
			"'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", 
			"'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
			"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
			"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
			"'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
			"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
			"'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", "'COALESCE'", "'CODE'", 
			"'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", 
			"'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", 
			"'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", 
			"'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", 
			"'CPU'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", 
			"'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", 
			"'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", 
			"'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", 
			"'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", 
			"'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
			"'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", 
			"'FIXED'", "'FLUSH'", "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", 
			"'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", 
			"'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", 
			"'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", 
			"'INSTALL'", "'INSTANCE'", "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", 
			"'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
			"'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", 
			"'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
			"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
			"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
			"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
			"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
			"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
			"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
			"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MERGE'", "'MESSAGE_TEXT'", "'MID'", 
			"'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", 
			"'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", 
			"'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", "'OFFSET'", "'OJ'", "'OLD_PASSWORD'", 
			"'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", 
			"'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", 
			"'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", 
			"'PLUGINS'", "'PORT'", "'PRECEDES'", "'PREPARE'", "'PRESERVE'", "'PREV'", 
			"'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", 
			"'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", 
			"'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", 
			"'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
			"'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
			"'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", "'RESUME'", 
			"'RETURNED_SQLSTATE'", "'RETURNS'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", 
			"'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", 
			"'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", 
			"'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", 
			"'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", 
			"'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
			"'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
			"'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
			"'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", 
			"'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
			"'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", 
			"'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
			"'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", 
			"'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", 
			"'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNINGS'", "'WITHOUT'", "'WORK'", 
			"'WRAPPER'", "'X509'", "'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", 
			"'INTERNAL'", "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", 
			"'WEEK'", "'SECOND'", "'MICROSECOND'", "'TABLES'", "'ROUTINE'", "'EXECUTE'", 
			"'FILE'", "'PROCESS'", "'RELOAD'", "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", 
			null, "'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
			"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
			"'EUCKR'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", 
			"'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", 
			"'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", 
			"'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", 
			"'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", 
			"'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
			"'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", 
			"'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", 
			"'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
			"'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
			"'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
			"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
			"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
			"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
			"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
			"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
			"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
			"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
			"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
			"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
			"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
			"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
			"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", 
			"'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
			"'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
			"'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", 
			"'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", 
			"'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
			"'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", 
			"'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
			"'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
			"'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
			"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
			"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", 
			"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", 
			"'%'", "'+'", "'--'", "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", 
			"'~'", "'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", "';'", "'@'", 
			"'0'", "'1'", "'2'", "'''", "'\"'", "'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", "ASC", "BEFORE", 
			"BETWEEN", "BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", 
			"CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
			"CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
			"CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
			"DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", 
			"DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", "ESCAPED", "EXISTS", "EXIT", 
			"EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", 
			"GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "IF", 
			"IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
			"INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", 
			"LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", 
			"MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", 
			"MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", 
			"ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", 
			"OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", 
			"READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", 
			"REQUIRE", "RESIGNAL", "RESTRICT", "RETURN", "REVOKE", "RIGHT", "RLIKE", 
			"SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW", "SIGNAL", 
			"SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", 
			"SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING", 
			"STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", 
			"TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", 
			"USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", 
			"XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "INT", "INTEGER", 
			"BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "DECIMAL", "DEC", "NUMERIC", 
			"DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", "NVARCHAR", 
			"NATIONAL", "BINARY", "VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", 
			"LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", 
			"SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", 
			"HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", 
			"HOUR_MICROSECOND", "DAY_MICROSECOND", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", 
			"COUNT", "GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", "STDDEV_POP", 
			"STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "CURRENT_DATE", 
			"CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", "CURTIME", 
			"DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", 
			"SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", 
			"ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", 
			"AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", 
			"BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", 
			"CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", 
			"CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", "COALESCE", "CODE", "COLUMNS", 
			"COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", 
			"COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION", "CONSISTENT", 
			"CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", 
			"CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "CURSOR_NAME", "DATA", "DATAFILE", 
			"DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", 
			"DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", 
			"DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", 
			"ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", 
			"EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", 
			"FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWS", 
			"FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
			"HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
			"IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", 
			"INSTANCE", "INVISIBLE", "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", 
			"ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", 
			"LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
			"MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", 
			"MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", 
			"MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
			"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
			"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
			"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
			"MAX_USER_CONNECTIONS", "MEDIUM", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", 
			"MIN_ROWS", "MODE", "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", 
			"NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", 
			"OFFSET", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
			"OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", 
			"PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
			"PORT", "PRECEDES", "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", 
			"PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", 
			"REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", 
			"REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
			"REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", 
			"REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", 
			"RESET", "RESUME", "RETURNED_SQLSTATE", "RETURNS", "ROLLBACK", "ROLLUP", 
			"ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", "SCHEDULE", "SECURITY", 
			"SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", 
			"SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", 
			"SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", 
			"SQL_NO_CACHE", "SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", 
			"STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", 
			"STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
			"SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TEMPORARY", 
			"TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRIGGERS", "TRUNCATE", 
			"UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", 
			"UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", 
			"VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", 
			"WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", "USA", "JIS", 
			"ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", 
			"SECOND", "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", 
			"RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", "SESSION_VARIABLES_ADMIN", 
			"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
			"CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", 
			"GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", 
			"LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", 
			"SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", 
			"UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", 
			"MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
			"TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
			"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
			"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
			"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", 
			"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
			"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
			"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
			"CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
			"COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", 
			"CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
			"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
			"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
			"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
			"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
			"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
			"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
			"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
			"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
			"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
			"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
			"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
			"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
			"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
			"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
			"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
			"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
			"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
			"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
			"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
			"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
			"MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", 
			"NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", "OCT", "OCTET_LENGTH", 
			"ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", "PI", "POINTFROMTEXT", 
			"POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
			"POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", "RAND", "RANDOM_BYTES", 
			"RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
			"SESSION_USER", "SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", 
			"SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", 
			"STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
			"ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", 
			"ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", 
			"ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
			"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
			"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
			"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
			"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
			"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
			"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
			"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
			"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
			"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", 
			"ST_TOUCHES", "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
			"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
			"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
			"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
			"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
			"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
			"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
			"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
			"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
			"PLUS", "MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
			"LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
			"BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", 
			"ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
			"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
			"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
			"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
			"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
			"LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySqlParser.EOF, 0); }
		public SqlStatementsContext sqlStatements() {
			return getRuleContext(SqlStatementsContext.class,0);
		}
		public TerminalNode MINUSMINUS() { return getToken(MySqlParser.MINUSMINUS, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoot(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (GET - 64)) | (1L << (GRANT - 64)) | (1L << (INSERT - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (OPTIMIZE - 64)) | (1L << (PURGE - 64)) | (1L << (RELEASE - 64)) | (1L << (RENAME - 64)) | (1L << (REPLACE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (RESIGNAL - 129)) | (1L << (REVOKE - 129)) | (1L << (SELECT - 129)) | (1L << (SET - 129)) | (1L << (SHOW - 129)) | (1L << (SIGNAL - 129)) | (1L << (UNLOCK - 129)) | (1L << (UPDATE - 129)) | (1L << (USE - 129)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (CACHE - 271)) | (1L << (CHECKSUM - 271)) | (1L << (COMMIT - 271)) | (1L << (DEALLOCATE - 271)) | (1L << (DO - 271)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (FLUSH - 353)) | (1L << (HANDLER - 353)) | (1L << (HELP - 353)) | (1L << (INSTALL - 353)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (PREPARE - 464)) | (1L << (REPAIR - 464)) | (1L << (RESET - 464)) | (1L << (ROLLBACK - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (START - 464)))) != 0) || ((((_la - 532)) & ~0x3f) == 0 && ((1L << (_la - 532)) & ((1L << (STOP - 532)) | (1L << (TRUNCATE - 532)) | (1L << (UNINSTALL - 532)) | (1L << (XA - 532)) | (1L << (EXECUTE - 532)) | (1L << (SHUTDOWN - 532)))) != 0) || _la==LR_BRACKET || _la==SEMI) {
				{
				setState(630);
				sqlStatements();
				}
			}

			setState(634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUSMINUS) {
				{
				setState(633);
				match(MINUSMINUS);
				}
			}

			setState(636);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementsContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public List<EmptyStatementContext> emptyStatement() {
			return getRuleContexts(EmptyStatementContext.class);
		}
		public EmptyStatementContext emptyStatement(int i) {
			return getRuleContext(EmptyStatementContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<TerminalNode> MINUSMINUS() { return getTokens(MySqlParser.MINUSMINUS); }
		public TerminalNode MINUSMINUS(int i) {
			return getToken(MySqlParser.MINUSMINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatements(this);
		}
	}

	public final SqlStatementsContext sqlStatements() throws RecognitionException {
		SqlStatementsContext _localctx = new SqlStatementsContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(648);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(646);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GET:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case RESIGNAL:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case SIGNAL:
					case UNLOCK:
					case UPDATE:
					case USE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						setState(638);
						sqlStatement();
						setState(640);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==MINUSMINUS) {
							{
							setState(639);
							match(MINUSMINUS);
							}
						}

						setState(643);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
						case 1:
							{
							setState(642);
							match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						setState(645);
						emptyStatement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(650);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(659);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				setState(651);
				sqlStatement();
				setState(656);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(653);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MINUSMINUS) {
						{
						setState(652);
						match(MINUSMINUS);
						}
					}

					setState(655);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				setState(658);
				emptyStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public AdministrationStatementContext administrationStatement() {
			return getRuleContext(AdministrationStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatement(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sqlStatement);
		try {
			setState(668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(661);
				ddlStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(662);
				dmlStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(663);
				transactionStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(664);
				replicationStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(665);
				preparedStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(666);
				administrationStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(667);
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEmptyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEmptyStatement(this);
		}
	}

	public final EmptyStatementContext emptyStatement() throws RecognitionException {
		EmptyStatementContext _localctx = new EmptyStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_emptyStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(670);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return getRuleContext(CreateTablespaceInnodbContext.class,0);
		}
		public CreateTablespaceNdbContext createTablespaceNdb() {
			return getRuleContext(CreateTablespaceNdbContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterFunctionContext alterFunction() {
			return getRuleContext(AlterFunctionContext.class,0);
		}
		public AlterInstanceContext alterInstance() {
			return getRuleContext(AlterInstanceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterProcedureContext alterProcedure() {
			return getRuleContext(AlterProcedureContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTablespaceContext dropTablespace() {
			return getRuleContext(DropTablespaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public RenameTableContext renameTable() {
			return getRuleContext(RenameTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDdlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDdlStatement(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddlStatement);
		try {
			setState(707);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(672);
				createDatabase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(673);
				createEvent();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(674);
				createIndex();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(675);
				createLogfileGroup();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(676);
				createProcedure();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(677);
				createFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(678);
				createServer();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(679);
				createTable();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(680);
				createTablespaceInnodb();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(681);
				createTablespaceNdb();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(682);
				createTrigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(683);
				createView();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(684);
				alterDatabase();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(685);
				alterEvent();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(686);
				alterFunction();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(687);
				alterInstance();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(688);
				alterLogfileGroup();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(689);
				alterProcedure();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(690);
				alterServer();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(691);
				alterTable();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(692);
				alterTablespace();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(693);
				alterView();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(694);
				dropDatabase();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(695);
				dropEvent();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(696);
				dropIndex();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(697);
				dropLogfileGroup();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(698);
				dropProcedure();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(699);
				dropFunction();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(700);
				dropServer();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(701);
				dropTable();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(702);
				dropTablespace();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(703);
				dropTrigger();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(704);
				dropView();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(705);
				renameTable();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(706);
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public LoadDataStatementContext loadDataStatement() {
			return getRuleContext(LoadDataStatementContext.class,0);
		}
		public LoadXmlStatementContext loadXmlStatement() {
			return getRuleContext(LoadXmlStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDmlStatement(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_dmlStatement);
		try {
			setState(719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(709);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(710);
				insertStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(711);
				updateStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(712);
				deleteStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(713);
				replaceStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(714);
				callStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(715);
				loadDataStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(716);
				loadXmlStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(717);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(718);
				handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public StartTransactionContext startTransaction() {
			return getRuleContext(StartTransactionContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public CommitWorkContext commitWork() {
			return getRuleContext(CommitWorkContext.class,0);
		}
		public RollbackWorkContext rollbackWork() {
			return getRuleContext(RollbackWorkContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public RollbackStatementContext rollbackStatement() {
			return getRuleContext(RollbackStatementContext.class,0);
		}
		public ReleaseStatementContext releaseStatement() {
			return getRuleContext(ReleaseStatementContext.class,0);
		}
		public LockTablesContext lockTables() {
			return getRuleContext(LockTablesContext.class,0);
		}
		public UnlockTablesContext unlockTables() {
			return getRuleContext(UnlockTablesContext.class,0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionStatement(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_transactionStatement);
		try {
			setState(730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(721);
				startTransaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(722);
				beginWork();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(723);
				commitWork();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(724);
				rollbackWork();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(725);
				savepointStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(726);
				rollbackStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(727);
				releaseStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(728);
				lockTables();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(729);
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public ChangeReplicationFilterContext changeReplicationFilter() {
			return getRuleContext(ChangeReplicationFilterContext.class,0);
		}
		public PurgeBinaryLogsContext purgeBinaryLogs() {
			return getRuleContext(PurgeBinaryLogsContext.class,0);
		}
		public ResetMasterContext resetMaster() {
			return getRuleContext(ResetMasterContext.class,0);
		}
		public ResetSlaveContext resetSlave() {
			return getRuleContext(ResetSlaveContext.class,0);
		}
		public StartSlaveContext startSlave() {
			return getRuleContext(StartSlaveContext.class,0);
		}
		public StopSlaveContext stopSlave() {
			return getRuleContext(StopSlaveContext.class,0);
		}
		public StartGroupReplicationContext startGroupReplication() {
			return getRuleContext(StartGroupReplicationContext.class,0);
		}
		public StopGroupReplicationContext stopGroupReplication() {
			return getRuleContext(StopGroupReplicationContext.class,0);
		}
		public XaStartTransactionContext xaStartTransaction() {
			return getRuleContext(XaStartTransactionContext.class,0);
		}
		public XaEndTransactionContext xaEndTransaction() {
			return getRuleContext(XaEndTransactionContext.class,0);
		}
		public XaPrepareStatementContext xaPrepareStatement() {
			return getRuleContext(XaPrepareStatementContext.class,0);
		}
		public XaCommitWorkContext xaCommitWork() {
			return getRuleContext(XaCommitWorkContext.class,0);
		}
		public XaRollbackWorkContext xaRollbackWork() {
			return getRuleContext(XaRollbackWorkContext.class,0);
		}
		public XaRecoverWorkContext xaRecoverWork() {
			return getRuleContext(XaRecoverWorkContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplicationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplicationStatement(this);
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_replicationStatement);
		try {
			setState(747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(732);
				changeMaster();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(733);
				changeReplicationFilter();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(734);
				purgeBinaryLogs();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(735);
				resetMaster();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(736);
				resetSlave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(737);
				startSlave();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(738);
				stopSlave();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(739);
				startGroupReplication();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(740);
				stopGroupReplication();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(741);
				xaStartTransaction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(742);
				xaEndTransaction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(743);
				xaPrepareStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(744);
				xaCommitWork();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(745);
				xaRollbackWork();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(746);
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public PrepareStatementContext prepareStatement() {
			return getRuleContext(PrepareStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public DeallocatePrepareContext deallocatePrepare() {
			return getRuleContext(DeallocatePrepareContext.class,0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPreparedStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPreparedStatement(this);
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_preparedStatement);
		try {
			setState(752);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(749);
				prepareStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(750);
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(751);
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCompoundStatement(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_compoundStatement);
		try {
			setState(764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(754);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(755);
				caseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(756);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(757);
				leaveStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(758);
				loopStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(759);
				repeatStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(760);
				whileStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(761);
				iterateStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(762);
				returnStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(763);
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdministrationStatementContext extends ParserRuleContext {
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public GrantProxyContext grantProxy() {
			return getRuleContext(GrantProxyContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeStatementContext revokeStatement() {
			return getRuleContext(RevokeStatementContext.class,0);
		}
		public RevokeProxyContext revokeProxy() {
			return getRuleContext(RevokeProxyContext.class,0);
		}
		public AnalyzeTableContext analyzeTable() {
			return getRuleContext(AnalyzeTableContext.class,0);
		}
		public CheckTableContext checkTable() {
			return getRuleContext(CheckTableContext.class,0);
		}
		public ChecksumTableContext checksumTable() {
			return getRuleContext(ChecksumTableContext.class,0);
		}
		public OptimizeTableContext optimizeTable() {
			return getRuleContext(OptimizeTableContext.class,0);
		}
		public RepairTableContext repairTable() {
			return getRuleContext(RepairTableContext.class,0);
		}
		public CreateUdfunctionContext createUdfunction() {
			return getRuleContext(CreateUdfunctionContext.class,0);
		}
		public InstallPluginContext installPlugin() {
			return getRuleContext(InstallPluginContext.class,0);
		}
		public UninstallPluginContext uninstallPlugin() {
			return getRuleContext(UninstallPluginContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public BinlogStatementContext binlogStatement() {
			return getRuleContext(BinlogStatementContext.class,0);
		}
		public CacheIndexStatementContext cacheIndexStatement() {
			return getRuleContext(CacheIndexStatementContext.class,0);
		}
		public FlushStatementContext flushStatement() {
			return getRuleContext(FlushStatementContext.class,0);
		}
		public KillStatementContext killStatement() {
			return getRuleContext(KillStatementContext.class,0);
		}
		public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return getRuleContext(LoadIndexIntoCacheContext.class,0);
		}
		public ResetStatementContext resetStatement() {
			return getRuleContext(ResetStatementContext.class,0);
		}
		public ShutdownStatementContext shutdownStatement() {
			return getRuleContext(ShutdownStatementContext.class,0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_administrationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAdministrationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAdministrationStatement(this);
		}
	}

	public final AdministrationStatementContext administrationStatement() throws RecognitionException {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_administrationStatement);
		try {
			setState(791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(766);
				alterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(767);
				createUser();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(768);
				dropUser();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(769);
				grantStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(770);
				grantProxy();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(771);
				renameUser();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(772);
				revokeStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(773);
				revokeProxy();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(774);
				analyzeTable();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(775);
				checkTable();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(776);
				checksumTable();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(777);
				optimizeTable();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(778);
				repairTable();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(779);
				createUdfunction();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(780);
				installPlugin();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(781);
				uninstallPlugin();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(782);
				setStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(783);
				showStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(784);
				binlogStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(785);
				cacheIndexStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(786);
				flushStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(787);
				killStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(788);
				loadIndexIntoCache();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(789);
				resetStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(790);
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public SimpleDescribeStatementContext simpleDescribeStatement() {
			return getRuleContext(SimpleDescribeStatementContext.class,0);
		}
		public FullDescribeStatementContext fullDescribeStatement() {
			return getRuleContext(FullDescribeStatementContext.class,0);
		}
		public HelpStatementContext helpStatement() {
			return getRuleContext(HelpStatementContext.class,0);
		}
		public UseStatementContext useStatement() {
			return getRuleContext(UseStatementContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public ResignalStatementContext resignalStatement() {
			return getRuleContext(ResignalStatementContext.class,0);
		}
		public DiagnosticsStatementContext diagnosticsStatement() {
			return getRuleContext(DiagnosticsStatementContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUtilityStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUtilityStatement(this);
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_utilityStatement);
		try {
			setState(800);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(793);
				simpleDescribeStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(794);
				fullDescribeStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(795);
				helpStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(796);
				useStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(797);
				signalStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(798);
				resignalStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(799);
				diagnosticsStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDatabase(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(802);
			match(CREATE);
			setState(803);
			((CreateDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((CreateDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(804);
				ifNotExists();
				}
			}

			setState(807);
			uid();
			setState(811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHARSET) {
				{
				{
				setState(808);
				createDatabaseOption();
				}
				}
				setState(813);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateEvent(this);
		}
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(814);
			match(CREATE);
			setState(816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(815);
				ownerStatement();
				}
			}

			setState(818);
			match(EVENT);
			setState(820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(819);
				ifNotExists();
				}
			}

			setState(822);
			fullId();
			setState(823);
			match(ON);
			setState(824);
			match(SCHEDULE);
			setState(825);
			scheduleExpression();
			setState(832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(826);
				match(ON);
				setState(827);
				match(COMPLETION);
				setState(829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(828);
					match(NOT);
					}
				}

				setState(831);
				match(PRESERVE);
				}
			}

			setState(835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(834);
				enableType();
				}
			}

			setState(839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(837);
				match(COMMENT);
				setState(838);
				match(STRING_LITERAL);
				}
			}

			setState(841);
			match(DO);
			setState(842);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token indexCategory;
		public Token algType;
		public Token lockType;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySqlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateIndex(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(844);
			match(CREATE);
			setState(846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(845);
				((CreateIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((CreateIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(848);
				((CreateIndexContext)_localctx).indexCategory = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					((CreateIndexContext)_localctx).indexCategory = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(851);
			match(INDEX);
			setState(852);
			uid();
			setState(854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(853);
				indexType();
				}
			}

			setState(856);
			match(ON);
			setState(857);
			tableName();
			setState(858);
			indexColumnNames();
			setState(862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
				{
				{
				setState(859);
				indexOption();
				}
				}
				setState(864);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(877);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(875);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(865);
						match(ALGORITHM);
						setState(867);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(866);
							match(EQUAL_SYMBOL);
							}
						}

						setState(869);
						((CreateIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((CreateIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(870);
						match(LOCK);
						setState(872);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(871);
							match(EQUAL_SYMBOL);
							}
						}

						setState(874);
						((CreateIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((CreateIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(879);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public Token undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateLogfileGroup(this);
		}
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(880);
			match(CREATE);
			setState(881);
			match(LOGFILE);
			setState(882);
			match(GROUP);
			setState(883);
			uid();
			setState(884);
			match(ADD);
			setState(885);
			match(UNDOFILE);
			setState(886);
			((CreateLogfileGroupContext)_localctx).undoFile = match(STRING_LITERAL);
			setState(892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(887);
				match(INITIAL_SIZE);
				setState(889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(888);
					match(EQUAL_SYMBOL);
					}
				}

				setState(891);
				((CreateLogfileGroupContext)_localctx).initSize = fileSizeLiteral();
				}
			}

			setState(899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(894);
				match(UNDO_BUFFER_SIZE);
				setState(896);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(895);
					match(EQUAL_SYMBOL);
					}
				}

				setState(898);
				((CreateLogfileGroupContext)_localctx).undoSize = fileSizeLiteral();
				}
			}

			setState(906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(901);
				match(REDO_BUFFER_SIZE);
				setState(903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(902);
					match(EQUAL_SYMBOL);
					}
				}

				setState(905);
				((CreateLogfileGroupContext)_localctx).redoSize = fileSizeLiteral();
				}
			}

			setState(913);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(908);
				match(NODEGROUP);
				setState(910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(909);
					match(EQUAL_SYMBOL);
					}
				}

				setState(912);
				uid();
				}
			}

			setState(916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(915);
				match(WAIT);
				}
			}

			setState(923);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(918);
				match(COMMENT);
				setState(920);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(919);
					match(EQUAL_SYMBOL);
					}
				}

				setState(922);
				((CreateLogfileGroupContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(925);
			match(ENGINE);
			setState(927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(926);
				match(EQUAL_SYMBOL);
				}
			}

			setState(929);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateProcedure(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(931);
			match(CREATE);
			setState(933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(932);
				ownerStatement();
				}
			}

			setState(935);
			match(PROCEDURE);
			setState(936);
			fullId();
			setState(937);
			match(LR_BRACKET);
			setState(939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (IN - 32)) | (1L << (INOUT - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (OUT - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
				{
				setState(938);
				procedureParameter();
				}
			}

			setState(945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(941);
				match(COMMA);
				setState(942);
				procedureParameter();
				}
				}
				setState(947);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(948);
			match(RR_BRACKET);
			setState(952);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(949);
					routineOption();
					}
					} 
				}
				setState(954);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			}
			setState(955);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateFunction(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(957);
			match(CREATE);
			setState(959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(958);
				ownerStatement();
				}
			}

			setState(961);
			match(FUNCTION);
			setState(962);
			fullId();
			setState(963);
			match(LR_BRACKET);
			setState(965);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
				{
				setState(964);
				functionParameter();
				}
			}

			setState(971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(967);
				match(COMMA);
				setState(968);
				functionParameter();
				}
				}
				setState(973);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(974);
			match(RR_BRACKET);
			setState(975);
			match(RETURNS);
			setState(976);
			dataType();
			setState(980);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,53,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(977);
					routineOption();
					}
					} 
				}
				setState(982);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,53,_ctx);
			}
			setState(985);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case CURRENT:
			case DATABASE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DIAGNOSTICS:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LEFT:
			case LOAD:
			case LOCK:
			case NUMBER:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case RIGHT:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case STACKED:
			case UNLOCK:
			case UPDATE:
			case USE:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case LR_BRACKET:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(983);
				routineBody();
				}
				break;
			case RETURN:
				{
				setState(984);
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public Token wrapperName;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateServer(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(987);
			match(CREATE);
			setState(988);
			match(SERVER);
			setState(989);
			uid();
			setState(990);
			match(FOREIGN);
			setState(991);
			match(DATA);
			setState(992);
			match(WRAPPER);
			setState(993);
			((CreateServerContext)_localctx).wrapperName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				((CreateServerContext)_localctx).wrapperName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(994);
			match(OPTIONS);
			setState(995);
			match(LR_BRACKET);
			setState(996);
			serverOption();
			setState(1001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(997);
				match(COMMA);
				setState(998);
				serverOption();
				}
				}
				setState(1003);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1004);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	 
		public CreateTableContext() { }
		public void copyFrom(CreateTableContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CopyCreateTableContext extends CreateTableContext {
		public TableNameContext parenthesisTable;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CopyCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCopyCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCopyCreateTable(this);
		}
	}
	public static class ColumnCreateTableContext extends CreateTableContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnCreateTable(this);
		}
	}
	public static class QueryCreateTableContext extends CreateTableContext {
		public Token keyViolate;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryCreateTable(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createTable);
		int _la;
		try {
			int _alt;
			setState(1084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1006);
				match(CREATE);
				setState(1008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1007);
					match(TEMPORARY);
					}
				}

				setState(1010);
				match(TABLE);
				setState(1012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1011);
					ifNotExists();
					}
				}

				setState(1014);
				tableName();
				setState(1022);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(1015);
					match(LIKE);
					setState(1016);
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					setState(1017);
					match(LR_BRACKET);
					setState(1018);
					match(LIKE);
					setState(1019);
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					setState(1020);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1024);
				match(CREATE);
				setState(1026);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1025);
					match(TEMPORARY);
					}
				}

				setState(1028);
				match(TABLE);
				setState(1030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1029);
					ifNotExists();
					}
				}

				setState(1032);
				tableName();
				setState(1034);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					setState(1033);
					createDefinitions();
					}
					break;
				}
				setState(1046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (CHARACTER - 22)) | (1L << (COLLATE - 22)) | (1L << (DEFAULT - 22)) | (1L << (INDEX - 22)))) != 0) || _la==UNION || ((((_la - 269)) & ~0x3f) == 0 && ((1L << (_la - 269)) & ((1L << (AUTO_INCREMENT - 269)) | (1L << (AVG_ROW_LENGTH - 269)) | (1L << (CHECKSUM - 269)) | (1L << (PAGE_CHECKSUM - 269)) | (1L << (COMMENT - 269)) | (1L << (COMPRESSION - 269)) | (1L << (CONNECTION - 269)) | (1L << (DATA - 269)) | (1L << (DELAY_KEY_WRITE - 269)) | (1L << (ENCRYPTION - 269)) | (1L << (ENGINE - 269)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (INSERT_METHOD - 373)) | (1L << (KEY_BLOCK_SIZE - 373)) | (1L << (MAX_ROWS - 373)) | (1L << (MIN_ROWS - 373)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PASSWORD - 451)) | (1L << (ROW_FORMAT - 451)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (STATS_AUTO_RECALC - 528)) | (1L << (STATS_PERSISTENT - 528)) | (1L << (STATS_SAMPLE_PAGES - 528)) | (1L << (STORAGE - 528)) | (1L << (TABLESPACE - 528)))) != 0) || _la==CHARSET) {
					{
					setState(1036);
					tableOption();
					setState(1043);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (CHARACTER - 22)) | (1L << (COLLATE - 22)) | (1L << (DEFAULT - 22)) | (1L << (INDEX - 22)))) != 0) || _la==UNION || ((((_la - 269)) & ~0x3f) == 0 && ((1L << (_la - 269)) & ((1L << (AUTO_INCREMENT - 269)) | (1L << (AVG_ROW_LENGTH - 269)) | (1L << (CHECKSUM - 269)) | (1L << (PAGE_CHECKSUM - 269)) | (1L << (COMMENT - 269)) | (1L << (COMPRESSION - 269)) | (1L << (CONNECTION - 269)) | (1L << (DATA - 269)) | (1L << (DELAY_KEY_WRITE - 269)) | (1L << (ENCRYPTION - 269)) | (1L << (ENGINE - 269)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (INSERT_METHOD - 373)) | (1L << (KEY_BLOCK_SIZE - 373)) | (1L << (MAX_ROWS - 373)) | (1L << (MIN_ROWS - 373)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PASSWORD - 451)) | (1L << (ROW_FORMAT - 451)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (STATS_AUTO_RECALC - 528)) | (1L << (STATS_PERSISTENT - 528)) | (1L << (STATS_SAMPLE_PAGES - 528)) | (1L << (STORAGE - 528)) | (1L << (TABLESPACE - 528)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						setState(1038);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1037);
							match(COMMA);
							}
						}

						setState(1040);
						tableOption();
						}
						}
						setState(1045);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1048);
					partitionDefinitions();
					}
				}

				setState(1052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					setState(1051);
					((QueryCreateTableContext)_localctx).keyViolate = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1054);
					match(AS);
					}
				}

				setState(1057);
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1059);
				match(CREATE);
				setState(1061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1060);
					match(TEMPORARY);
					}
				}

				setState(1063);
				match(TABLE);
				setState(1065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1064);
					ifNotExists();
					}
				}

				setState(1067);
				tableName();
				setState(1068);
				createDefinitions();
				setState(1079);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					setState(1069);
					tableOption();
					setState(1076);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1071);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1070);
								match(COMMA);
								}
							}

							setState(1073);
							tableOption();
							}
							} 
						}
						setState(1078);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
					}
					}
					break;
				}
				setState(1082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1081);
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceInnodbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext fileBlockSize;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceInnodb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTablespaceInnodb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTablespaceInnodb(this);
		}
	}

	public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createTablespaceInnodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1086);
			match(CREATE);
			setState(1087);
			match(TABLESPACE);
			setState(1088);
			uid();
			setState(1089);
			match(ADD);
			setState(1090);
			match(DATAFILE);
			setState(1091);
			((CreateTablespaceInnodbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				setState(1092);
				match(FILE_BLOCK_SIZE);
				setState(1093);
				match(EQUAL_SYMBOL);
				setState(1094);
				((CreateTablespaceInnodbContext)_localctx).fileBlockSize = fileSizeLiteral();
				}
			}

			setState(1102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(1097);
				match(ENGINE);
				setState(1099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1098);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1101);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceNdbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceNdb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTablespaceNdb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTablespaceNdb(this);
		}
	}

	public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createTablespaceNdb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1104);
			match(CREATE);
			setState(1105);
			match(TABLESPACE);
			setState(1106);
			uid();
			setState(1107);
			match(ADD);
			setState(1108);
			match(DATAFILE);
			setState(1109);
			((CreateTablespaceNdbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1110);
			match(USE);
			setState(1111);
			match(LOGFILE);
			setState(1112);
			match(GROUP);
			setState(1113);
			uid();
			setState(1119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(1114);
				match(EXTENT_SIZE);
				setState(1116);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1115);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1118);
				((CreateTablespaceNdbContext)_localctx).extentSize = fileSizeLiteral();
				}
			}

			setState(1126);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1121);
				match(INITIAL_SIZE);
				setState(1123);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1122);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1125);
				((CreateTablespaceNdbContext)_localctx).initialSize = fileSizeLiteral();
				}
			}

			setState(1133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(1128);
				match(AUTOEXTEND_SIZE);
				setState(1130);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1129);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1132);
				((CreateTablespaceNdbContext)_localctx).autoextendSize = fileSizeLiteral();
				}
			}

			setState(1140);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(1135);
				match(MAX_SIZE);
				setState(1137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1136);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1139);
				((CreateTablespaceNdbContext)_localctx).maxSize = fileSizeLiteral();
				}
			}

			setState(1147);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1142);
				match(NODEGROUP);
				setState(1144);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1143);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1146);
				uid();
				}
			}

			setState(1150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1149);
				match(WAIT);
				}
			}

			setState(1157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1152);
				match(COMMENT);
				setState(1154);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1153);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1156);
				((CreateTablespaceNdbContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1159);
			match(ENGINE);
			setState(1161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1160);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1163);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public FullIdContext thisTrigger;
		public Token triggerTime;
		public Token triggerEvent;
		public Token triggerPlace;
		public FullIdContext otherTrigger;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(MySqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(MySqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateTrigger(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1165);
			match(CREATE);
			setState(1167);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1166);
				ownerStatement();
				}
			}

			setState(1169);
			match(TRIGGER);
			setState(1170);
			((CreateTriggerContext)_localctx).thisTrigger = fullId();
			setState(1171);
			((CreateTriggerContext)_localctx).triggerTime = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				((CreateTriggerContext)_localctx).triggerTime = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1172);
			((CreateTriggerContext)_localctx).triggerEvent = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				((CreateTriggerContext)_localctx).triggerEvent = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1173);
			match(ON);
			setState(1174);
			tableName();
			setState(1175);
			match(FOR);
			setState(1176);
			match(EACH);
			setState(1177);
			match(ROW);
			setState(1180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				setState(1178);
				((CreateTriggerContext)_localctx).triggerPlace = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					((CreateTriggerContext)_localctx).triggerPlace = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1179);
				((CreateTriggerContext)_localctx).otherTrigger = fullId();
				}
				break;
			}
			setState(1182);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOption;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateView(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1184);
			match(CREATE);
			setState(1187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1185);
				match(OR);
				setState(1186);
				match(REPLACE);
				}
			}

			setState(1192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(1189);
				match(ALGORITHM);
				setState(1190);
				match(EQUAL_SYMBOL);
				setState(1191);
				((CreateViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((CreateViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1194);
				ownerStatement();
				}
			}

			setState(1200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(1197);
				match(SQL);
				setState(1198);
				match(SECURITY);
				setState(1199);
				((CreateViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((CreateViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1202);
			match(VIEW);
			setState(1203);
			fullId();
			setState(1208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1204);
				match(LR_BRACKET);
				setState(1205);
				uidList();
				setState(1206);
				match(RR_BRACKET);
				}
			}

			setState(1210);
			match(AS);
			setState(1211);
			selectStatement();
			setState(1218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1212);
				match(WITH);
				setState(1214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(1213);
					((CreateViewContext)_localctx).checkOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((CreateViewContext)_localctx).checkOption = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1216);
				match(CHECK);
				setState(1217);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDatabaseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDatabaseOption(this);
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_createDatabaseOption);
		int _la;
		try {
			setState(1243);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1221);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1220);
					match(DEFAULT);
					}
				}

				setState(1226);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(1223);
					match(CHARACTER);
					setState(1224);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(1225);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1228);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1233);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1231);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1232);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1235);
					match(DEFAULT);
					}
				}

				setState(1238);
				match(COLLATE);
				setState(1240);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1239);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1242);
				collationName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerStatementContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ownerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOwnerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOwnerStatement(this);
		}
	}

	public final OwnerStatementContext ownerStatement() throws RecognitionException {
		OwnerStatementContext _localctx = new OwnerStatementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_ownerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1245);
			match(DEFINER);
			setState(1246);
			match(EQUAL_SYMBOL);
			setState(1253);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
				{
				setState(1247);
				userName();
				}
				break;
			case CURRENT_USER:
				{
				setState(1248);
				match(CURRENT_USER);
				setState(1251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1249);
					match(LR_BRACKET);
					setState(1250);
					match(RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleExpressionContext extends ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleExpression; }
	 
		public ScheduleExpressionContext() { }
		public void copyFrom(ScheduleExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PreciseScheduleContext extends ScheduleExpressionContext {
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TimestampValueContext timestampValue() {
			return getRuleContext(TimestampValueContext.class,0);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPreciseSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPreciseSchedule(this);
		}
	}
	public static class IntervalScheduleContext extends ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext intervalExpr;
		public List<IntervalExprContext> startIntervals = new ArrayList<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public List<IntervalExprContext> endIntervals = new ArrayList<IntervalExprContext>();
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public List<TimestampValueContext> timestampValue() {
			return getRuleContexts(TimestampValueContext.class);
		}
		public TimestampValueContext timestampValue(int i) {
			return getRuleContext(TimestampValueContext.class,i);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalSchedule(this);
		}
	}

	public final ScheduleExpressionContext scheduleExpression() throws RecognitionException {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_scheduleExpression);
		int _la;
		try {
			setState(1289);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1255);
				match(AT);
				setState(1256);
				timestampValue();
				setState(1260);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(1257);
					intervalExpr();
					}
					}
					setState(1262);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1263);
				match(EVERY);
				setState(1266);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					setState(1264);
					decimalLiteral();
					}
					break;
				case 2:
					{
					setState(1265);
					expression(0);
					}
					break;
				}
				setState(1268);
				intervalType();
				setState(1277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS) {
					{
					setState(1269);
					match(STARTS);
					setState(1270);
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					setState(1274);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1271);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).startIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1276);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS) {
					{
					setState(1279);
					match(ENDS);
					setState(1280);
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					setState(1284);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1281);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).endIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1286);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampValueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTimestampValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTimestampValue(this);
		}
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_timestampValue);
		try {
			setState(1295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1291);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1292);
				stringLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1293);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1294);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalExprContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalExpr(this);
		}
	}

	public final IntervalExprContext intervalExpr() throws RecognitionException {
		IntervalExprContext _localctx = new IntervalExprContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_intervalExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1297);
			match(PLUS);
			setState(1298);
			match(INTERVAL);
			setState(1301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1299);
				decimalLiteral();
				}
				break;
			case 2:
				{
				setState(1300);
				expression(0);
				}
				break;
			}
			setState(1303);
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(MySqlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(MySqlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(MySqlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(MySqlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(MySqlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(MySqlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(MySqlParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(MySqlParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(MySqlParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(MySqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalType(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_intervalType);
		try {
			setState(1318);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1305);
				intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1306);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1307);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(1308);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1309);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(1310);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1311);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(1312);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(1313);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(1314);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(1315);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(1316);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(1317);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableTypeContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEnableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEnableType(this);
		}
	}

	public final EnableTypeContext enableType() throws RecognitionException {
		EnableTypeContext _localctx = new EnableTypeContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_enableType);
		try {
			setState(1325);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1320);
				match(ENABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1321);
				match(DISABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1322);
				match(DISABLE);
				setState(1323);
				match(ON);
				setState(1324);
				match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexType(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1327);
			match(USING);
			setState(1328);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexOption(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_indexOption);
		int _la;
		try {
			setState(1343);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1330);
				match(KEY_BLOCK_SIZE);
				setState(1332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1331);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1334);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1335);
				indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1336);
				match(WITH);
				setState(1337);
				match(PARSER);
				setState(1338);
				uid();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1339);
				match(COMMENT);
				setState(1340);
				match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1341);
				match(INVISIBLE);
				}
				break;
			case VISIBLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1342);
				match(VISIBLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token direction;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(MySqlParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(MySqlParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProcedureParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProcedureParameter(this);
		}
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (IN - 71)) | (1L << (INOUT - 71)) | (1L << (OUT - 71)))) != 0)) {
				{
				setState(1345);
				((ProcedureParameterContext)_localctx).direction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (IN - 71)) | (1L << (INOUT - 71)) | (1L << (OUT - 71)))) != 0)) ) {
					((ProcedureParameterContext)_localctx).direction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1348);
			uid();
			setState(1349);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionParameter(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1351);
			uid();
			setState(1352);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	 
		public RoutineOptionContext() { }
		public void copyFrom(RoutineOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RoutineBehaviorContext extends RoutineOptionContext {
		public TerminalNode DETERMINISTIC() { return getToken(MySqlParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineBehavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineBehavior(this);
		}
	}
	public static class RoutineLanguageContext extends RoutineOptionContext {
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineLanguage(this);
		}
	}
	public static class RoutineCommentContext extends RoutineOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineComment(this);
		}
	}
	public static class RoutineSecurityContext extends RoutineOptionContext {
		public Token context;
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineSecurity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineSecurity(this);
		}
	}
	public static class RoutineDataContext extends RoutineOptionContext {
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode READS() { return getToken(MySqlParser.READS, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(MySqlParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineData(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_routineOption);
		int _la;
		try {
			setState(1377);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1354);
				match(COMMENT);
				setState(1355);
				match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1356);
				match(LANGUAGE);
				setState(1357);
				match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1358);
					match(NOT);
					}
				}

				setState(1361);
				match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1372);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(1362);
					match(CONTAINS);
					setState(1363);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(1364);
					match(NO);
					setState(1365);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(1366);
					match(READS);
					setState(1367);
					match(SQL);
					setState(1368);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(1369);
					match(MODIFIES);
					setState(1370);
					match(SQL);
					setState(1371);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1374);
				match(SQL);
				setState(1375);
				match(SECURITY);
				setState(1376);
				((RoutineSecurityContext)_localctx).context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterServerOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitServerOption(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_serverOption);
		try {
			setState(1393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1379);
				match(HOST);
				setState(1380);
				match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1381);
				match(DATABASE);
				setState(1382);
				match(STRING_LITERAL);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1383);
				match(USER);
				setState(1384);
				match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(1385);
				match(PASSWORD);
				setState(1386);
				match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(1387);
				match(SOCKET);
				setState(1388);
				match(STRING_LITERAL);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1389);
				match(OWNER);
				setState(1390);
				match(STRING_LITERAL);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1391);
				match(PORT);
				setState(1392);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDefinitions(this);
		}
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_createDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1395);
			match(LR_BRACKET);
			setState(1396);
			createDefinition();
			setState(1401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1397);
				match(COMMA);
				setState(1398);
				createDefinition();
				}
				}
				setState(1403);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1404);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
	 
		public CreateDefinitionContext() { }
		public void copyFrom(CreateDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColumnDeclarationContext extends CreateDefinitionContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDeclaration(this);
		}
	}
	public static class ConstraintDeclarationContext extends CreateDefinitionContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstraintDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstraintDeclaration(this);
		}
	}
	public static class IndexDeclarationContext extends CreateDefinitionContext {
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public IndexDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexDeclaration(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_createDefinition);
		try {
			setState(1411);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1406);
				uid();
				setState(1407);
				columnDefinition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1409);
				tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1410);
				indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDefinition(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_columnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1413);
			dataType();
			setState(1417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << COLLATE) | (1L << DEFAULT) | (1L << GENERATED))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (KEY - 82)) | (1L << (NOT - 82)) | (1L << (NULL_LITERAL - 82)) | (1L << (ON - 82)) | (1L << (PRIMARY - 82)) | (1L << (REFERENCES - 82)))) != 0) || _la==UNIQUE || _la==SERIAL || ((((_la - 269)) & ~0x3f) == 0 && ((1L << (_la - 269)) & ((1L << (AUTO_INCREMENT - 269)) | (1L << (COLUMN_FORMAT - 269)) | (1L << (COMMENT - 269)))) != 0) || _la==STORAGE || _la==NULL_SPEC_LITERAL) {
				{
				{
				setState(1414);
				columnConstraint();
				}
				}
				setState(1419);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStorageColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStorageColumnConstraint(this);
		}
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFormatColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFormatColumnConstraint(this);
		}
	}
	public static class CollateColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateColumnConstraint(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public CurrentTimestampContext currentTimestamp() {
			return getRuleContext(CurrentTimestampContext.class,0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAutoIncrementColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAutoIncrementColumnConstraint(this);
		}
	}
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommentColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommentColumnConstraint(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyColumnConstraint(this);
		}
	}
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyColumnConstraint(this);
		}
	}
	public static class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSerialDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSerialDefaultColumnConstraint(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullColumnConstraint(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultColumnConstraint(this);
		}
	}
	public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceColumnConstraint(this);
		}
	}
	public static class GeneratedColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode GENERATED() { return getToken(MySqlParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(MySqlParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(MySqlParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(MySqlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGeneratedColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGeneratedColumnConstraint(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_columnConstraint);
		int _la;
		try {
			setState(1460);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1420);
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1421);
				match(DEFAULT);
				setState(1422);
				defaultValue();
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1427);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO_INCREMENT:
					{
					setState(1423);
					match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					setState(1424);
					match(ON);
					setState(1425);
					match(UPDATE);
					setState(1426);
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1429);
					match(PRIMARY);
					}
				}

				setState(1432);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1433);
				match(UNIQUE);
				setState(1435);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
				case 1:
					{
					setState(1434);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1437);
				match(COMMENT);
				setState(1438);
				match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1439);
				match(COLUMN_FORMAT);
				setState(1440);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1441);
				match(STORAGE);
				setState(1442);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1443);
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1444);
				match(COLLATE);
				setState(1445);
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(1446);
					match(GENERATED);
					setState(1447);
					match(ALWAYS);
					}
				}

				setState(1450);
				match(AS);
				setState(1451);
				match(LR_BRACKET);
				setState(1452);
				expression(0);
				setState(1453);
				match(RR_BRACKET);
				setState(1455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					setState(1454);
					_la = _input.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1457);
				match(SERIAL);
				setState(1458);
				match(DEFAULT);
				setState(1459);
				match(VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext index;
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyTableConstraint(this);
		}
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTableConstraint(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyTableConstraint(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterForeignKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitForeignKeyTableConstraint(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_tableConstraint);
		int _la;
		try {
			setState(1531);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1466);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1462);
					match(CONSTRAINT);
					setState(1464);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
						{
						setState(1463);
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1468);
				match(PRIMARY);
				setState(1469);
				match(KEY);
				setState(1471);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
					{
					setState(1470);
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1473);
					indexType();
					}
				}

				setState(1476);
				indexColumnNames();
				setState(1480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1477);
					indexOption();
					}
					}
					setState(1482);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1483);
					match(CONSTRAINT);
					setState(1485);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
						{
						setState(1484);
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1489);
				match(UNIQUE);
				setState(1491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1490);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
					{
					setState(1493);
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1496);
					indexType();
					}
				}

				setState(1499);
				indexColumnNames();
				setState(1503);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1500);
					indexOption();
					}
					}
					setState(1505);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1506);
					match(CONSTRAINT);
					setState(1508);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
						{
						setState(1507);
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1512);
				match(FOREIGN);
				setState(1513);
				match(KEY);
				setState(1515);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
					{
					setState(1514);
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1517);
				indexColumnNames();
				setState(1518);
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1524);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1520);
					match(CONSTRAINT);
					setState(1522);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
						{
						setState(1521);
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1526);
				match(CHECK);
				setState(1527);
				match(LR_BRACKET);
				setState(1528);
				expression(0);
				setState(1529);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(MySqlParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceDefinition(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1533);
			match(REFERENCES);
			setState(1534);
			tableName();
			setState(1536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(1535);
				indexColumnNames();
				}
				break;
			}
			setState(1540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(1538);
				match(MATCH);
				setState(1539);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1543);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(1542);
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceAction(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_referenceAction);
		try {
			setState(1561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1545);
				match(ON);
				setState(1546);
				match(DELETE);
				setState(1547);
				((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(1551);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					setState(1548);
					match(ON);
					setState(1549);
					match(UPDATE);
					setState(1550);
					((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1553);
				match(ON);
				setState(1554);
				match(UPDATE);
				setState(1555);
				((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(1559);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					setState(1556);
					match(ON);
					setState(1557);
					match(DELETE);
					setState(1558);
					((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceControlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceControlType(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_referenceControlType);
		try {
			setState(1569);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1563);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1564);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1565);
				match(SET);
				setState(1566);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(1567);
				match(NO);
				setState(1568);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
	 
		public IndexColumnDefinitionContext() { }
		public void copyFrom(IndexColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecialIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecialIndexDeclaration(this);
		}
	}
	public static class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleIndexDeclaration(this);
		}
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_indexColumnDefinition);
		int _la;
		try {
			setState(1599);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1571);
				((SimpleIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1573);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
					{
					setState(1572);
					uid();
					}
				}

				setState(1576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1575);
					indexType();
					}
				}

				setState(1578);
				indexColumnNames();
				setState(1582);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1579);
					indexOption();
					}
					}
					setState(1584);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1585);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1586);
					((SpecialIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
					{
					setState(1589);
					uid();
					}
				}

				setState(1592);
				indexColumnNames();
				setState(1596);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1593);
					indexOption();
					}
					}
					setState(1598);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
	 
		public TableOptionContext() { }
		public void copyFrom(TableOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableOptionEngineContext extends TableOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEngineContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEngine(this);
		}
	}
	public static class TableOptionMaxRowsContext extends TableOptionContext {
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionMaxRows(this);
		}
	}
	public static class TableOptionCollateContext extends TableOptionContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCollate(this);
		}
	}
	public static class TableOptionPersistentContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPersistent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPersistent(this);
		}
	}
	public static class TableOptionTablespaceContext extends TableOptionContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TablespaceStorageContext tablespaceStorage() {
			return getRuleContext(TablespaceStorageContext.class,0);
		}
		public TableOptionTablespaceContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionTablespace(this);
		}
	}
	public static class TableOptionPackKeysContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPackKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPackKeys(this);
		}
	}
	public static class TableOptionPasswordContext extends TableOptionContext {
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionPassword(this);
		}
	}
	public static class TableOptionUnionContext extends TableOptionContext {
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionUnion(this);
		}
	}
	public static class TableOptionSamplePageContext extends TableOptionContext {
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionSamplePage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionSamplePage(this);
		}
	}
	public static class TableOptionCharsetContext extends TableOptionContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCharset(this);
		}
	}
	public static class TableOptionIndexDirectoryContext extends TableOptionContext {
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionIndexDirectory(this);
		}
	}
	public static class TableOptionKeyBlockSizeContext extends TableOptionContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionKeyBlockSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionKeyBlockSize(this);
		}
	}
	public static class TableOptionEncryptionContext extends TableOptionContext {
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionEncryption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionEncryption(this);
		}
	}
	public static class TableOptionDataDirectoryContext extends TableOptionContext {
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionDataDirectory(this);
		}
	}
	public static class TableOptionRecalculationContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionRecalculation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionRecalculation(this);
		}
	}
	public static class TableOptionAutoIncrementContext extends TableOptionContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAutoIncrement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAutoIncrement(this);
		}
	}
	public static class TableOptionChecksumContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionChecksum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionChecksum(this);
		}
	}
	public static class TableOptionDelayContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionDelay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionDelay(this);
		}
	}
	public static class TableOptionConnectionContext extends TableOptionContext {
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionConnection(this);
		}
	}
	public static class TableOptionCommentContext extends TableOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionComment(this);
		}
	}
	public static class TableOptionAverageContext extends TableOptionContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionAverage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionAverage(this);
		}
	}
	public static class TableOptionRowFormatContext extends TableOptionContext {
		public Token rowFormat;
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionRowFormat(this);
		}
	}
	public static class TableOptionCompressionContext extends TableOptionContext {
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionCompression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionCompression(this);
		}
	}
	public static class TableOptionInsertMethodContext extends TableOptionContext {
		public Token insertMethod;
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionInsertMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionInsertMethod(this);
		}
	}
	public static class TableOptionMinRowsContext extends TableOptionContext {
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableOptionMinRows(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_tableOption);
		int _la;
		try {
			setState(1745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1601);
				match(ENGINE);
				setState(1603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1602);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1605);
				engineName();
				}
				break;
			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1606);
				match(AUTO_INCREMENT);
				setState(1608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1607);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1610);
				decimalLiteral();
				}
				break;
			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1611);
				match(AVG_ROW_LENGTH);
				setState(1613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1612);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1615);
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1617);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1616);
					match(DEFAULT);
					}
				}

				setState(1622);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(1619);
					match(CHARACTER);
					setState(1620);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(1621);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1625);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1624);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1629);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1627);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1628);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1631);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1632);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1635);
				((TableOptionChecksumContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1636);
					match(DEFAULT);
					}
				}

				setState(1639);
				match(COLLATE);
				setState(1641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1640);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1643);
				collationName();
				}
				break;
			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1644);
				match(COMMENT);
				setState(1646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1645);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1648);
				match(STRING_LITERAL);
				}
				break;
			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1649);
				match(COMPRESSION);
				setState(1651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1650);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1653);
				_la = _input.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1654);
				match(CONNECTION);
				setState(1656);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1655);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1658);
				match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1659);
				match(DATA);
				setState(1660);
				match(DIRECTORY);
				setState(1662);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1661);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1664);
				match(STRING_LITERAL);
				}
				break;
			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1665);
				match(DELAY_KEY_WRITE);
				setState(1667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1666);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1669);
				((TableOptionDelayContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1670);
				match(ENCRYPTION);
				setState(1672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1671);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1674);
				match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1675);
				match(INDEX);
				setState(1676);
				match(DIRECTORY);
				setState(1678);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1677);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1680);
				match(STRING_LITERAL);
				}
				break;
			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1681);
				match(INSERT_METHOD);
				setState(1683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1682);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1685);
				((TableOptionInsertMethodContext)_localctx).insertMethod = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1686);
				match(KEY_BLOCK_SIZE);
				setState(1688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1687);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1690);
				fileSizeLiteral();
				}
				break;
			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1691);
				match(MAX_ROWS);
				setState(1693);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1692);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1695);
				decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1696);
				match(MIN_ROWS);
				setState(1698);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1697);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1700);
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1701);
				match(PACK_KEYS);
				setState(1703);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1702);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1705);
				((TableOptionPackKeysContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1706);
				match(PASSWORD);
				setState(1708);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1707);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1710);
				match(STRING_LITERAL);
				}
				break;
			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1711);
				match(ROW_FORMAT);
				setState(1713);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1712);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1715);
				((TableOptionRowFormatContext)_localctx).rowFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (COMPACT - 296)) | (1L << (COMPRESSED - 296)) | (1L << (DYNAMIC - 296)) | (1L << (FIXED - 296)))) != 0) || _la==REDUNDANT) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1716);
				match(STATS_AUTO_RECALC);
				setState(1718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1717);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1720);
				((TableOptionRecalculationContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1721);
				match(STATS_PERSISTENT);
				setState(1723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1722);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1725);
				((TableOptionPersistentContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1726);
				match(STATS_SAMPLE_PAGES);
				setState(1728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1727);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1730);
				decimalLiteral();
				}
				break;
			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1731);
				match(TABLESPACE);
				setState(1732);
				uid();
				setState(1734);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
				case 1:
					{
					setState(1733);
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 25:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1736);
				tablespaceStorage();
				}
				break;
			case 26:
				_localctx = new TableOptionUnionContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1737);
				match(UNION);
				setState(1739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1738);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1741);
				match(LR_BRACKET);
				setState(1742);
				tables();
				setState(1743);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceStorageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceStorage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTablespaceStorage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTablespaceStorage(this);
		}
	}

	public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_tablespaceStorage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1747);
			match(STORAGE);
			setState(1748);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(MySqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MySqlParser.BY, i);
		}
		public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return getRuleContext(PartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return getRuleContext(SubpartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinitions(this);
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1750);
			match(PARTITION);
			setState(1751);
			match(BY);
			setState(1752);
			partitionFunctionDefinition();
			setState(1755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(1753);
				match(PARTITIONS);
				setState(1754);
				((PartitionDefinitionsContext)_localctx).count = decimalLiteral();
				}
			}

			setState(1764);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(1757);
				match(SUBPARTITION);
				setState(1758);
				match(BY);
				setState(1759);
				subpartitionFunctionDefinition();
				setState(1762);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(1760);
					match(SUBPARTITIONS);
					setState(1761);
					((PartitionDefinitionsContext)_localctx).subCount = decimalLiteral();
					}
				}

				}
			}

			setState(1777);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				setState(1766);
				match(LR_BRACKET);
				setState(1767);
				partitionDefinition();
				setState(1772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1768);
					match(COMMA);
					setState(1769);
					partitionDefinition();
					}
					}
					setState(1774);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1775);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionFunctionDefinitionContext extends ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFunctionDefinition; }
	 
		public PartitionFunctionDefinitionContext() { }
		public void copyFrom(PartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionKey(this);
		}
	}
	public static class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionHash(this);
		}
	}
	public static class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionList(this);
		}
	}
	public static class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionFunctionRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionFunctionRange(this);
		}
	}

	public final PartitionFunctionDefinitionContext partitionFunctionDefinition() throws RecognitionException {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_partitionFunctionDefinition);
		int _la;
		try {
			setState(1824);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1780);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1779);
					match(LINEAR);
					}
				}

				setState(1782);
				match(HASH);
				setState(1783);
				match(LR_BRACKET);
				setState(1784);
				expression(0);
				setState(1785);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1788);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1787);
					match(LINEAR);
					}
				}

				setState(1790);
				match(KEY);
				setState(1794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1791);
					match(ALGORITHM);
					setState(1792);
					match(EQUAL_SYMBOL);
					setState(1793);
					((PartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1796);
				match(LR_BRACKET);
				setState(1797);
				uidList();
				setState(1798);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1800);
				match(RANGE);
				setState(1810);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1801);
					match(LR_BRACKET);
					setState(1802);
					expression(0);
					setState(1803);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1805);
					match(COLUMNS);
					setState(1806);
					match(LR_BRACKET);
					setState(1807);
					uidList();
					setState(1808);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1812);
				match(LIST);
				setState(1822);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1813);
					match(LR_BRACKET);
					setState(1814);
					expression(0);
					setState(1815);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1817);
					match(COLUMNS);
					setState(1818);
					match(LR_BRACKET);
					setState(1819);
					uidList();
					setState(1820);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionFunctionDefinition; }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public void copyFrom(SubpartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubPartitionFunctionHash(this);
		}
	}
	public static class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubPartitionFunctionKey(this);
		}
	}

	public final SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() throws RecognitionException {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			setState(1847);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1826);
					match(LINEAR);
					}
				}

				setState(1829);
				match(HASH);
				setState(1830);
				match(LR_BRACKET);
				setState(1831);
				expression(0);
				setState(1832);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1835);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1834);
					match(LINEAR);
					}
				}

				setState(1837);
				match(KEY);
				setState(1841);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1838);
					match(ALGORITHM);
					setState(1839);
					match(EQUAL_SYMBOL);
					setState(1840);
					((SubPartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1843);
				match(LR_BRACKET);
				setState(1844);
				uidList();
				setState(1845);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	 
		public PartitionDefinitionContext() { }
		public void copyFrom(PartitionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionComparisionContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionComparisionContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionComparision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionComparision(this);
		}
	}
	public static class PartitionListAtomContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionListAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionListAtom(this);
		}
	}
	public static class PartitionListVectorContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinerVectorContext> partitionDefinerVector() {
			return getRuleContexts(PartitionDefinerVectorContext.class);
		}
		public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return getRuleContext(PartitionDefinerVectorContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionListVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionListVector(this);
		}
	}
	public static class PartitionSimpleContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionSimple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionSimple(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_partitionDefinition);
		int _la;
		try {
			int _alt;
			setState(1980);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				_localctx = new PartitionComparisionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1849);
				match(PARTITION);
				setState(1850);
				uid();
				setState(1851);
				match(VALUES);
				setState(1852);
				match(LESS);
				setState(1853);
				match(THAN);
				setState(1854);
				match(LR_BRACKET);
				setState(1855);
				partitionDefinerAtom();
				setState(1860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1856);
					match(COMMA);
					setState(1857);
					partitionDefinerAtom();
					}
					}
					setState(1862);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1863);
				match(RR_BRACKET);
				setState(1867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (COMMENT - 294)) | (1L << (DATA - 294)) | (1L << (ENGINE - 294)))) != 0) || ((((_la - 417)) & ~0x3f) == 0 && ((1L << (_la - 417)) & ((1L << (MAX_ROWS - 417)) | (1L << (MIN_ROWS - 417)) | (1L << (NODEGROUP - 417)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1864);
					partitionOption();
					}
					}
					setState(1869);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1870);
					subpartitionDefinition();
					setState(1875);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1871);
							match(COMMA);
							setState(1872);
							subpartitionDefinition();
							}
							} 
						}
						setState(1877);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
					}
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1880);
				match(PARTITION);
				setState(1881);
				uid();
				setState(1882);
				match(VALUES);
				setState(1883);
				match(LESS);
				setState(1884);
				match(THAN);
				setState(1885);
				partitionDefinerAtom();
				setState(1889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (COMMENT - 294)) | (1L << (DATA - 294)) | (1L << (ENGINE - 294)))) != 0) || ((((_la - 417)) & ~0x3f) == 0 && ((1L << (_la - 417)) & ((1L << (MAX_ROWS - 417)) | (1L << (MIN_ROWS - 417)) | (1L << (NODEGROUP - 417)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1886);
					partitionOption();
					}
					}
					setState(1891);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1892);
					subpartitionDefinition();
					setState(1897);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,218,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1893);
							match(COMMA);
							setState(1894);
							subpartitionDefinition();
							}
							} 
						}
						setState(1899);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,218,_ctx);
					}
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1902);
				match(PARTITION);
				setState(1903);
				uid();
				setState(1904);
				match(VALUES);
				setState(1905);
				match(IN);
				setState(1906);
				match(LR_BRACKET);
				setState(1907);
				partitionDefinerAtom();
				setState(1912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1908);
					match(COMMA);
					setState(1909);
					partitionDefinerAtom();
					}
					}
					setState(1914);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1915);
				match(RR_BRACKET);
				setState(1919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (COMMENT - 294)) | (1L << (DATA - 294)) | (1L << (ENGINE - 294)))) != 0) || ((((_la - 417)) & ~0x3f) == 0 && ((1L << (_la - 417)) & ((1L << (MAX_ROWS - 417)) | (1L << (MIN_ROWS - 417)) | (1L << (NODEGROUP - 417)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1916);
					partitionOption();
					}
					}
					setState(1921);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1922);
					subpartitionDefinition();
					setState(1927);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,222,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1923);
							match(COMMA);
							setState(1924);
							subpartitionDefinition();
							}
							} 
						}
						setState(1929);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,222,_ctx);
					}
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1932);
				match(PARTITION);
				setState(1933);
				uid();
				setState(1934);
				match(VALUES);
				setState(1935);
				match(IN);
				setState(1936);
				match(LR_BRACKET);
				setState(1937);
				partitionDefinerVector();
				setState(1942);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1938);
					match(COMMA);
					setState(1939);
					partitionDefinerVector();
					}
					}
					setState(1944);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1945);
				match(RR_BRACKET);
				setState(1949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (COMMENT - 294)) | (1L << (DATA - 294)) | (1L << (ENGINE - 294)))) != 0) || ((((_la - 417)) & ~0x3f) == 0 && ((1L << (_la - 417)) & ((1L << (MAX_ROWS - 417)) | (1L << (MIN_ROWS - 417)) | (1L << (NODEGROUP - 417)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1946);
					partitionOption();
					}
					}
					setState(1951);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1952);
					subpartitionDefinition();
					setState(1957);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,226,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1953);
							match(COMMA);
							setState(1954);
							subpartitionDefinition();
							}
							} 
						}
						setState(1959);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,226,_ctx);
					}
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1962);
				match(PARTITION);
				setState(1963);
				uid();
				setState(1967);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (COMMENT - 294)) | (1L << (DATA - 294)) | (1L << (ENGINE - 294)))) != 0) || ((((_la - 417)) & ~0x3f) == 0 && ((1L << (_la - 417)) & ((1L << (MAX_ROWS - 417)) | (1L << (MIN_ROWS - 417)) | (1L << (NODEGROUP - 417)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1964);
					partitionOption();
					}
					}
					setState(1969);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1978);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1970);
					subpartitionDefinition();
					setState(1975);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,229,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1971);
							match(COMMA);
							setState(1972);
							subpartitionDefinition();
							}
							} 
						}
						setState(1977);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,229,_ctx);
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerAtomContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(MySqlParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinerAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinerAtom(this);
		}
	}

	public final PartitionDefinerAtomContext partitionDefinerAtom() throws RecognitionException {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_partitionDefinerAtom);
		try {
			setState(1985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1982);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1983);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1984);
				match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerVectorContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerVector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionDefinerVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionDefinerVector(this);
		}
	}

	public final PartitionDefinerVectorContext partitionDefinerVector() throws RecognitionException {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_partitionDefinerVector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1987);
			match(LR_BRACKET);
			setState(1988);
			partitionDefinerAtom();
			setState(1991); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1989);
				match(COMMA);
				setState(1990);
				partitionDefinerAtom();
				}
				}
				setState(1993); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(1995);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubpartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubpartitionDefinition(this);
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1997);
			match(SUBPARTITION);
			setState(1998);
			uid();
			setState(2002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INDEX || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (COMMENT - 294)) | (1L << (DATA - 294)) | (1L << (ENGINE - 294)))) != 0) || ((((_la - 417)) & ~0x3f) == 0 && ((1L << (_la - 417)) & ((1L << (MAX_ROWS - 417)) | (1L << (MIN_ROWS - 417)) | (1L << (NODEGROUP - 417)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(1999);
				partitionOption();
				}
				}
				setState(2004);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	 
		public PartitionOptionContext() { }
		public void copyFrom(PartitionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionOptionCommentContext extends PartitionOptionContext {
		public Token comment;
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionComment(this);
		}
	}
	public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
		public UidContext nodegroup;
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionNodeGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionNodeGroup(this);
		}
	}
	public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
		public Token indexDirectory;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionIndexDirectory(this);
		}
	}
	public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionMaxRows(this);
		}
	}
	public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
		public UidContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionTablespace(this);
		}
	}
	public static class PartitionOptionEngineContext extends PartitionOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionEngine(this);
		}
	}
	public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext minRows;
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionMinRows(this);
		}
	}
	public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
		public Token dataDirectory;
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionOptionDataDirectory(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_partitionOption);
		int _la;
		try {
			setState(2050);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2006);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(2005);
					match(STORAGE);
					}
				}

				setState(2008);
				match(ENGINE);
				setState(2010);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2009);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2012);
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2013);
				match(COMMENT);
				setState(2015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2014);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2017);
				((PartitionOptionCommentContext)_localctx).comment = match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2018);
				match(DATA);
				setState(2019);
				match(DIRECTORY);
				setState(2021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2020);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2023);
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2024);
				match(INDEX);
				setState(2025);
				match(DIRECTORY);
				setState(2027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2026);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2029);
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2030);
				match(MAX_ROWS);
				setState(2032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2031);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2034);
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2035);
				match(MIN_ROWS);
				setState(2037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2036);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2039);
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2040);
				match(TABLESPACE);
				setState(2042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2041);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2044);
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2045);
				match(NODEGROUP);
				setState(2047);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2046);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2049);
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
	 
		public AlterDatabaseContext() { }
		public void copyFrom(AlterDatabaseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUpgradeNameContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUpgradeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUpgradeName(this);
		}
	}
	public static class AlterSimpleDatabaseContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterSimpleDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterSimpleDatabase(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_alterDatabase);
		int _la;
		try {
			setState(2070);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2052);
				match(ALTER);
				setState(2053);
				((AlterSimpleDatabaseContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2055);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					setState(2054);
					uid();
					}
					break;
				}
				setState(2058); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2057);
					createDatabaseOption();
					}
					}
					setState(2060); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2062);
				match(ALTER);
				setState(2063);
				((AlterUpgradeNameContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2064);
				uid();
				setState(2065);
				match(UPGRADE);
				setState(2066);
				match(DATA);
				setState(2067);
				match(DIRECTORY);
				setState(2068);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterEvent(this);
		}
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2072);
			match(ALTER);
			setState(2074);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2073);
				ownerStatement();
				}
			}

			setState(2076);
			match(EVENT);
			setState(2077);
			fullId();
			setState(2081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				{
				setState(2078);
				match(ON);
				setState(2079);
				match(SCHEDULE);
				setState(2080);
				scheduleExpression();
				}
				break;
			}
			setState(2089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2083);
				match(ON);
				setState(2084);
				match(COMPLETION);
				setState(2086);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2085);
					match(NOT);
					}
				}

				setState(2088);
				match(PRESERVE);
				}
			}

			setState(2094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				setState(2091);
				match(RENAME);
				setState(2092);
				match(TO);
				setState(2093);
				fullId();
				}
				break;
			}
			setState(2097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(2096);
				enableType();
				}
			}

			setState(2101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2099);
				match(COMMENT);
				setState(2100);
				match(STRING_LITERAL);
				}
			}

			setState(2105);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				setState(2103);
				match(DO);
				setState(2104);
				routineBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterFunction(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alterFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2107);
			match(ALTER);
			setState(2108);
			match(FUNCTION);
			setState(2109);
			fullId();
			setState(2113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (MODIFIES - 100)) | (1L << (NOT - 100)) | (1L << (READS - 100)) | (1L << (SQL - 100)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2110);
				routineOption();
				}
				}
				setState(2115);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterInstanceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstance; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterInstance(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterInstance(this);
		}
	}

	public final AlterInstanceContext alterInstance() throws RecognitionException {
		AlterInstanceContext _localctx = new AlterInstanceContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alterInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2116);
			match(ALTER);
			setState(2117);
			match(INSTANCE);
			setState(2118);
			match(ROTATE);
			setState(2119);
			match(INNODB);
			setState(2120);
			match(MASTER);
			setState(2121);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterLogfileGroup(this);
		}
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2123);
			match(ALTER);
			setState(2124);
			match(LOGFILE);
			setState(2125);
			match(GROUP);
			setState(2126);
			uid();
			setState(2127);
			match(ADD);
			setState(2128);
			match(UNDOFILE);
			setState(2129);
			match(STRING_LITERAL);
			setState(2135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2130);
				match(INITIAL_SIZE);
				setState(2132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2131);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2134);
				fileSizeLiteral();
				}
			}

			setState(2138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2137);
				match(WAIT);
				}
			}

			setState(2140);
			match(ENGINE);
			setState(2142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2141);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2144);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterProcedure(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_alterProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2146);
			match(ALTER);
			setState(2147);
			match(PROCEDURE);
			setState(2148);
			fullId();
			setState(2152);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (MODIFIES - 100)) | (1L << (NOT - 100)) | (1L << (READS - 100)) | (1L << (SQL - 100)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2149);
				routineOption();
				}
				}
				setState(2154);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterServer(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alterServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2155);
			match(ALTER);
			setState(2156);
			match(SERVER);
			setState(2157);
			uid();
			setState(2158);
			match(OPTIONS);
			setState(2159);
			match(LR_BRACKET);
			setState(2160);
			serverOption();
			setState(2165);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2161);
				match(COMMA);
				setState(2162);
				serverOption();
				}
				}
				setState(2167);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2168);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public Token intimeAction;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public List<AlterSpecificationContext> alterSpecification() {
			return getRuleContexts(AlterSpecificationContext.class);
		}
		public AlterSpecificationContext alterSpecification(int i) {
			return getRuleContext(AlterSpecificationContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterTable(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2170);
			match(ALTER);
			setState(2172);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(2171);
				((AlterTableContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((AlterTableContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2175);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2174);
				match(IGNORE);
				}
			}

			setState(2177);
			match(TABLE);
			setState(2178);
			tableName();
			setState(2187);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				{
				setState(2179);
				alterSpecification();
				setState(2184);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2180);
					match(COMMA);
					setState(2181);
					alterSpecification();
					}
					}
					setState(2186);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2189);
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public Token objectAction;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterTablespace(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2192);
			match(ALTER);
			setState(2193);
			match(TABLESPACE);
			setState(2194);
			uid();
			setState(2195);
			((AlterTablespaceContext)_localctx).objectAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				((AlterTablespaceContext)_localctx).objectAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2196);
			match(DATAFILE);
			setState(2197);
			match(STRING_LITERAL);
			setState(2201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2198);
				match(INITIAL_SIZE);
				setState(2199);
				match(EQUAL_SYMBOL);
				setState(2200);
				fileSizeLiteral();
				}
			}

			setState(2204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2203);
				match(WAIT);
				}
			}

			setState(2206);
			match(ENGINE);
			setState(2208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2207);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2210);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOpt;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterView(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2212);
			match(ALTER);
			setState(2216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2213);
				match(ALGORITHM);
				setState(2214);
				match(EQUAL_SYMBOL);
				setState(2215);
				((AlterViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((AlterViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2219);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2218);
				ownerStatement();
				}
			}

			setState(2224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2221);
				match(SQL);
				setState(2222);
				match(SECURITY);
				setState(2223);
				((AlterViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((AlterViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2226);
			match(VIEW);
			setState(2227);
			fullId();
			setState(2232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2228);
				match(LR_BRACKET);
				setState(2229);
				uidList();
				setState(2230);
				match(RR_BRACKET);
				}
			}

			setState(2234);
			match(AS);
			setState(2235);
			selectStatement();
			setState(2242);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2236);
				match(WITH);
				setState(2238);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(2237);
					((AlterViewContext)_localctx).checkOpt = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((AlterViewContext)_localctx).checkOpt = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2240);
				match(CHECK);
				setState(2241);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSpecificationContext extends ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSpecification; }
	 
		public AlterSpecificationContext() { }
		public void copyFrom(AlterSpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterByDisableKeysContext extends AlterSpecificationContext {
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDisableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDisableKeys(this);
		}
	}
	public static class AlterByDefaultCharsetContext extends AlterSpecificationContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDefaultCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDefaultCharset(this);
		}
	}
	public static class AlterByRenameColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRenameColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRenameColumn(this);
		}
	}
	public static class AlterByConvertCharsetContext extends AlterSpecificationContext {
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByConvertCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByConvertCharset(this);
		}
	}
	public static class AlterByAddPartitionContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddPartition(this);
		}
	}
	public static class AlterByAddForeignKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddForeignKey(this);
		}
	}
	public static class AlterByRenameIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRenameIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRenameIndex(this);
		}
	}
	public static class AlterByRemovePartitioningContext extends AlterSpecificationContext {
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRemovePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRemovePartitioning(this);
		}
	}
	public static class AlterByRenameContext extends AlterSpecificationContext {
		public Token renameFormat;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRename(this);
		}
	}
	public static class AlterByOptimizePartitionContext extends AlterSpecificationContext {
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByOptimizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByOptimizePartition(this);
		}
	}
	public static class AlterByImportTablespaceContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByImportTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByImportTablespace(this);
		}
	}
	public static class AlterByCoalescePartitionContext extends AlterSpecificationContext {
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByCoalescePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByCoalescePartition(this);
		}
	}
	public static class AlterByAddColumnsContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddColumns(this);
		}
	}
	public static class AlterByDropForeignKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropForeignKey(this);
		}
	}
	public static class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddCheckTableConstraint(this);
		}
	}
	public static class AlterByRebuildPartitionContext extends AlterSpecificationContext {
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRebuildPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRebuildPartition(this);
		}
	}
	public static class AlterByUpgradePartitioningContext extends AlterSpecificationContext {
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByUpgradePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByUpgradePartitioning(this);
		}
	}
	public static class AlterByRepairPartitionContext extends AlterSpecificationContext {
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByRepairPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByRepairPartition(this);
		}
	}
	public static class AlterByExchangePartitionContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(MySqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MySqlParser.WITH, i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByExchangePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByExchangePartition(this);
		}
	}
	public static class AlterByAddIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddIndex(this);
		}
	}
	public static class AlterByDropColumnContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropColumn(this);
		}
	}
	public static class AlterByImportPartitionContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByImportPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByImportPartition(this);
		}
	}
	public static class AlterByChangeDefaultContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByChangeDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByChangeDefault(this);
		}
	}
	public static class AlterByForceContext extends AlterSpecificationContext {
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByForce(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByForce(this);
		}
	}
	public static class AlterByDropPartitionContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropPartition(this);
		}
	}
	public static class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
		public Token keyType;
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddSpecialIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddSpecialIndex(this);
		}
	}
	public static class AlterByModifyColumnContext extends AlterSpecificationContext {
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByModifyColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByModifyColumn(this);
		}
	}
	public static class AlterByTableOptionContext extends AlterSpecificationContext {
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByTableOption(this);
		}
	}
	public static class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropPrimaryKey(this);
		}
	}
	public static class AlterByLockContext extends AlterSpecificationContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByLock(this);
		}
	}
	public static class AlterByDiscardPartitionContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDiscardPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDiscardPartition(this);
		}
	}
	public static class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDiscardTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDiscardTablespace(this);
		}
	}
	public static class AlterByValidateContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByValidate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByValidate(this);
		}
	}
	public static class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddPrimaryKey(this);
		}
	}
	public static class AlterByCheckPartitionContext extends AlterSpecificationContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByCheckPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByCheckPartition(this);
		}
	}
	public static class AlterByEnableKeysContext extends AlterSpecificationContext {
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByEnableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByEnableKeys(this);
		}
	}
	public static class AlterByReorganizePartitionContext extends AlterSpecificationContext {
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByReorganizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByReorganizePartition(this);
		}
	}
	public static class AlterBySetAlgorithmContext extends AlterSpecificationContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterBySetAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterBySetAlgorithm(this);
		}
	}
	public static class AlterByAnalyzePartitionContext extends AlterSpecificationContext {
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAnalyzePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAnalyzePartition(this);
		}
	}
	public static class AlterByChangeColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByChangeColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByChangeColumn(this);
		}
	}
	public static class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddUniqueKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddUniqueKey(this);
		}
	}
	public static class AlterByTruncatePartitionContext extends AlterSpecificationContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByTruncatePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByTruncatePartition(this);
		}
	}
	public static class AlterByDropIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByDropIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByDropIndex(this);
		}
	}
	public static class AlterByAddColumnContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByAddColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByAddColumn(this);
		}
	}
	public static class AlterByOrderContext extends AlterSpecificationContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByOrderContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterByOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterByOrder(this);
		}
	}

	public final AlterSpecificationContext alterSpecification() throws RecognitionException {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			setState(2602);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2244);
				tableOption();
				setState(2251);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,278,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2246);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2245);
							match(COMMA);
							}
						}

						setState(2248);
						tableOption();
						}
						} 
					}
					setState(2253);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,278,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2254);
				match(ADD);
				setState(2256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2255);
					match(COLUMN);
					}
				}

				setState(2258);
				uid();
				setState(2259);
				columnDefinition();
				setState(2263);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2260);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2261);
					match(AFTER);
					setState(2262);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUSMINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2265);
				match(ADD);
				setState(2267);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2266);
					match(COLUMN);
					}
				}

				setState(2269);
				match(LR_BRACKET);
				setState(2270);
				uid();
				setState(2271);
				columnDefinition();
				setState(2278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2272);
					match(COMMA);
					setState(2273);
					uid();
					setState(2274);
					columnDefinition();
					}
					}
					setState(2280);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2281);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2283);
				match(ADD);
				setState(2284);
				((AlterByAddIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2286);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
					{
					setState(2285);
					uid();
					}
				}

				setState(2289);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2288);
					indexType();
					}
				}

				setState(2291);
				indexColumnNames();
				setState(2295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2292);
					indexOption();
					}
					}
					setState(2297);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2298);
				match(ADD);
				setState(2303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2299);
					match(CONSTRAINT);
					setState(2301);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
						{
						setState(2300);
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2305);
				match(PRIMARY);
				setState(2306);
				match(KEY);
				setState(2308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
					{
					setState(2307);
					((AlterByAddPrimaryKeyContext)_localctx).index = uid();
					}
				}

				setState(2311);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2310);
					indexType();
					}
				}

				setState(2313);
				indexColumnNames();
				setState(2317);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2314);
					indexOption();
					}
					}
					setState(2319);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2320);
				match(ADD);
				setState(2325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2321);
					match(CONSTRAINT);
					setState(2323);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
						{
						setState(2322);
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2327);
				match(UNIQUE);
				setState(2329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2328);
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
					{
					setState(2331);
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2334);
					indexType();
					}
				}

				setState(2337);
				indexColumnNames();
				setState(2341);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2338);
					indexOption();
					}
					}
					setState(2343);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2344);
				match(ADD);
				setState(2345);
				((AlterByAddSpecialIndexContext)_localctx).keyType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2346);
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
					{
					setState(2349);
					uid();
					}
				}

				setState(2352);
				indexColumnNames();
				setState(2356);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2353);
					indexOption();
					}
					}
					setState(2358);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2359);
				match(ADD);
				setState(2364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2360);
					match(CONSTRAINT);
					setState(2362);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
						{
						setState(2361);
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2366);
				match(FOREIGN);
				setState(2367);
				match(KEY);
				setState(2369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
					{
					setState(2368);
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2371);
				indexColumnNames();
				setState(2372);
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2374);
				match(ADD);
				setState(2379);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2375);
					match(CONSTRAINT);
					setState(2377);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
						{
						setState(2376);
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2381);
				match(CHECK);
				setState(2382);
				match(LR_BRACKET);
				setState(2383);
				expression(0);
				setState(2384);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2386);
				match(ALGORITHM);
				setState(2388);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2387);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2390);
				((AlterBySetAlgorithmContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2391);
				match(ALTER);
				setState(2393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2392);
					match(COLUMN);
					}
				}

				setState(2395);
				uid();
				setState(2401);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2396);
					match(SET);
					setState(2397);
					match(DEFAULT);
					setState(2398);
					defaultValue();
					}
					break;
				case DROP:
					{
					setState(2399);
					match(DROP);
					setState(2400);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2403);
				match(CHANGE);
				setState(2405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2404);
					match(COLUMN);
					}
				}

				setState(2407);
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				setState(2408);
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				setState(2409);
				columnDefinition();
				setState(2413);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2410);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2411);
					match(AFTER);
					setState(2412);
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUSMINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2415);
				match(RENAME);
				setState(2416);
				match(COLUMN);
				setState(2417);
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				setState(2418);
				match(TO);
				setState(2419);
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2421);
				match(LOCK);
				setState(2423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2422);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2425);
				((AlterByLockContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2426);
				match(MODIFY);
				setState(2428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2427);
					match(COLUMN);
					}
				}

				setState(2430);
				uid();
				setState(2431);
				columnDefinition();
				setState(2435);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2432);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2433);
					match(AFTER);
					setState(2434);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUSMINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2437);
				match(DROP);
				setState(2439);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2438);
					match(COLUMN);
					}
				}

				setState(2441);
				uid();
				setState(2443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(2442);
					match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2445);
				match(DROP);
				setState(2446);
				match(PRIMARY);
				setState(2447);
				match(KEY);
				}
				break;
			case 18:
				_localctx = new AlterByRenameIndexContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2448);
				match(RENAME);
				setState(2449);
				((AlterByRenameIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2450);
				uid();
				setState(2451);
				match(TO);
				setState(2452);
				uid();
				}
				break;
			case 19:
				_localctx = new AlterByDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2454);
				match(DROP);
				setState(2455);
				((AlterByDropIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2456);
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2457);
				match(DROP);
				setState(2458);
				match(FOREIGN);
				setState(2459);
				match(KEY);
				setState(2460);
				uid();
				}
				break;
			case 21:
				_localctx = new AlterByDisableKeysContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2461);
				match(DISABLE);
				setState(2462);
				match(KEYS);
				}
				break;
			case 22:
				_localctx = new AlterByEnableKeysContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2463);
				match(ENABLE);
				setState(2464);
				match(KEYS);
				}
				break;
			case 23:
				_localctx = new AlterByRenameContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2465);
				match(RENAME);
				setState(2467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(2466);
					((AlterByRenameContext)_localctx).renameFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2471);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
				case 1:
					{
					setState(2469);
					uid();
					}
					break;
				case 2:
					{
					setState(2470);
					fullId();
					}
					break;
				}
				}
				break;
			case 24:
				_localctx = new AlterByOrderContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2473);
				match(ORDER);
				setState(2474);
				match(BY);
				setState(2475);
				uidList();
				}
				break;
			case 25:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2476);
				match(CONVERT);
				setState(2477);
				match(TO);
				setState(2478);
				match(CHARACTER);
				setState(2479);
				match(SET);
				setState(2480);
				charsetName();
				setState(2483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2481);
					match(COLLATE);
					setState(2482);
					collationName();
					}
				}

				}
				break;
			case 26:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2485);
					match(DEFAULT);
					}
				}

				setState(2488);
				match(CHARACTER);
				setState(2489);
				match(SET);
				setState(2490);
				match(EQUAL_SYMBOL);
				setState(2491);
				charsetName();
				setState(2495);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2492);
					match(COLLATE);
					setState(2493);
					match(EQUAL_SYMBOL);
					setState(2494);
					collationName();
					}
				}

				}
				break;
			case 27:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2497);
				match(DISCARD);
				setState(2498);
				match(TABLESPACE);
				}
				break;
			case 28:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2499);
				match(IMPORT);
				setState(2500);
				match(TABLESPACE);
				}
				break;
			case 29:
				_localctx = new AlterByForceContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2501);
				match(FORCE);
				}
				break;
			case 30:
				_localctx = new AlterByValidateContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2502);
				((AlterByValidateContext)_localctx).validationFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2503);
				match(VALIDATION);
				}
				break;
			case 31:
				_localctx = new AlterByAddPartitionContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2504);
				match(ADD);
				setState(2505);
				match(PARTITION);
				setState(2506);
				match(LR_BRACKET);
				setState(2507);
				partitionDefinition();
				setState(2512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2508);
					match(COMMA);
					setState(2509);
					partitionDefinition();
					}
					}
					setState(2514);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2515);
				match(RR_BRACKET);
				}
				break;
			case 32:
				_localctx = new AlterByDropPartitionContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2517);
				match(DROP);
				setState(2518);
				match(PARTITION);
				setState(2519);
				uidList();
				}
				break;
			case 33:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2520);
				match(DISCARD);
				setState(2521);
				match(PARTITION);
				setState(2524);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2522);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2523);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2526);
				match(TABLESPACE);
				}
				break;
			case 34:
				_localctx = new AlterByImportPartitionContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2527);
				match(IMPORT);
				setState(2528);
				match(PARTITION);
				setState(2531);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2529);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2530);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2533);
				match(TABLESPACE);
				}
				break;
			case 35:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2534);
				match(TRUNCATE);
				setState(2535);
				match(PARTITION);
				setState(2538);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2536);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2537);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 36:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2540);
				match(COALESCE);
				setState(2541);
				match(PARTITION);
				setState(2542);
				decimalLiteral();
				}
				break;
			case 37:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2543);
				match(REORGANIZE);
				setState(2544);
				match(PARTITION);
				setState(2545);
				uidList();
				setState(2546);
				match(INTO);
				setState(2547);
				match(LR_BRACKET);
				setState(2548);
				partitionDefinition();
				setState(2553);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2549);
					match(COMMA);
					setState(2550);
					partitionDefinition();
					}
					}
					setState(2555);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2556);
				match(RR_BRACKET);
				}
				break;
			case 38:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2558);
				match(EXCHANGE);
				setState(2559);
				match(PARTITION);
				setState(2560);
				uid();
				setState(2561);
				match(WITH);
				setState(2562);
				match(TABLE);
				setState(2563);
				tableName();
				setState(2566);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(2564);
					((AlterByExchangePartitionContext)_localctx).validationFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2565);
					match(VALIDATION);
					}
				}

				}
				break;
			case 39:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2568);
				match(ANALYZE);
				setState(2569);
				match(PARTITION);
				setState(2572);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2570);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2571);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 40:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2574);
				match(CHECK);
				setState(2575);
				match(PARTITION);
				setState(2578);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2576);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2577);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 41:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2580);
				match(OPTIMIZE);
				setState(2581);
				match(PARTITION);
				setState(2584);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2582);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2583);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2586);
				match(REBUILD);
				setState(2587);
				match(PARTITION);
				setState(2590);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2588);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2589);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 43:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(2592);
				match(REPAIR);
				setState(2593);
				match(PARTITION);
				setState(2596);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2594);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2595);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 44:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(2598);
				match(REMOVE);
				setState(2599);
				match(PARTITIONING);
				}
				break;
			case 45:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(2600);
				match(UPGRADE);
				setState(2601);
				match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropDatabase(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2604);
			match(DROP);
			setState(2605);
			((DropDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((DropDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2606);
				ifExists();
				}
			}

			setState(2609);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropEvent(this);
		}
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_dropEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2611);
			match(DROP);
			setState(2612);
			match(EVENT);
			setState(2614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2613);
				ifExists();
				}
			}

			setState(2616);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token algType;
		public Token lockType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySqlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropIndex(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2618);
			match(DROP);
			setState(2619);
			match(INDEX);
			setState(2621);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
			case 1:
				{
				setState(2620);
				((DropIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((DropIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2623);
			uid();
			setState(2624);
			match(ON);
			setState(2625);
			tableName();
			setState(2638);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,338,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2636);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(2626);
						match(ALGORITHM);
						setState(2628);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2627);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2630);
						((DropIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((DropIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(2631);
						match(LOCK);
						setState(2633);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2632);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2635);
						((DropIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((DropIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2640);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,338,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropLogfileGroup(this);
		}
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_dropLogfileGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2641);
			match(DROP);
			setState(2642);
			match(LOGFILE);
			setState(2643);
			match(GROUP);
			setState(2644);
			uid();
			setState(2645);
			match(ENGINE);
			setState(2646);
			match(EQUAL_SYMBOL);
			setState(2647);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropProcedure(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2649);
			match(DROP);
			setState(2650);
			match(PROCEDURE);
			setState(2652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2651);
				ifExists();
				}
			}

			setState(2654);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropFunction(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_dropFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2656);
			match(DROP);
			setState(2657);
			match(FUNCTION);
			setState(2659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2658);
				ifExists();
				}
			}

			setState(2661);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropServer(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_dropServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2663);
			match(DROP);
			setState(2664);
			match(SERVER);
			setState(2666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2665);
				ifExists();
				}
			}

			setState(2668);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTable(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2670);
			match(DROP);
			setState(2672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(2671);
				match(TEMPORARY);
				}
			}

			setState(2674);
			match(TABLE);
			setState(2676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2675);
				ifExists();
				}
			}

			setState(2678);
			tables();
			setState(2680);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2679);
				((DropTableContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTablespace(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_dropTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2682);
			match(DROP);
			setState(2683);
			match(TABLESPACE);
			setState(2684);
			uid();
			setState(2690);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(2685);
				match(ENGINE);
				setState(2687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2686);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2689);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTrigger(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_dropTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2692);
			match(DROP);
			setState(2693);
			match(TRIGGER);
			setState(2695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2694);
				ifExists();
				}
			}

			setState(2697);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropView(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2699);
			match(DROP);
			setState(2700);
			match(VIEW);
			setState(2702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2701);
				ifExists();
				}
			}

			setState(2704);
			fullId();
			setState(2709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2705);
				match(COMMA);
				setState(2706);
				fullId();
				}
				}
				setState(2711);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2713);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2712);
				((DropViewContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropViewContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTable(this);
		}
	}

	public final RenameTableContext renameTable() throws RecognitionException {
		RenameTableContext _localctx = new RenameTableContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_renameTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2715);
			match(RENAME);
			setState(2716);
			match(TABLE);
			setState(2717);
			renameTableClause();
			setState(2722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2718);
				match(COMMA);
				setState(2719);
				renameTableClause();
				}
				}
				setState(2724);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTableClause(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_renameTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2725);
			tableName();
			setState(2726);
			match(TO);
			setState(2727);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTruncateTable(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2729);
			match(TRUNCATE);
			setState(2731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(2730);
				match(TABLE);
				}
			}

			setState(2733);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(MySqlParser.CALL, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCallStatement(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_callStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2735);
			match(CALL);
			setState(2736);
			fullId();
			setState(2743);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
			case 1:
				{
				setState(2737);
				match(LR_BRACKET);
				setState(2740);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
				case 1:
					{
					setState(2738);
					constants();
					}
					break;
				case 2:
					{
					setState(2739);
					expressions();
					}
					break;
				}
				setState(2742);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return getRuleContext(SingleDeleteStatementContext.class,0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return getRuleContext(MultipleDeleteStatementContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeleteStatement(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_deleteStatement);
		try {
			setState(2747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2745);
				singleDeleteStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2746);
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoStatement(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2749);
			match(DO);
			setState(2750);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return getRuleContext(HandlerReadIndexStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerStatement(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_handlerStatement);
		try {
			setState(2756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2752);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2753);
				handlerReadIndexStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2754);
				handlerReadStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2755);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public List<UpdatedElementContext> duplicatedElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatement(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2758);
			match(INSERT);
			setState(2760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (DELAYED - 39)) | (1L << (HIGH_PRIORITY - 39)) | (1L << (LOW_PRIORITY - 39)))) != 0)) {
				{
				setState(2759);
				((InsertStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (DELAYED - 39)) | (1L << (HIGH_PRIORITY - 39)) | (1L << (LOW_PRIORITY - 39)))) != 0)) ) {
					((InsertStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2762);
				match(IGNORE);
				}
			}

			setState(2766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2765);
				match(INTO);
				}
			}

			setState(2768);
			tableName();
			setState(2775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2769);
				match(PARTITION);
				setState(2770);
				match(LR_BRACKET);
				setState(2772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
					{
					setState(2771);
					((InsertStatementContext)_localctx).partitions = uidList();
					}
				}

				setState(2774);
				match(RR_BRACKET);
				}
			}

			setState(2793);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(2781);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					setState(2777);
					match(LR_BRACKET);
					setState(2778);
					((InsertStatementContext)_localctx).columns = uidList();
					setState(2779);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2783);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(2784);
				match(SET);
				setState(2785);
				((InsertStatementContext)_localctx).setFirst = updatedElement();
				setState(2790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2786);
					match(COMMA);
					setState(2787);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).setElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(2792);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2807);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2795);
				match(ON);
				setState(2796);
				match(DUPLICATE);
				setState(2797);
				match(KEY);
				setState(2798);
				match(UPDATE);
				setState(2799);
				((InsertStatementContext)_localctx).duplicatedFirst = updatedElement();
				setState(2804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2800);
					match(COMMA);
					setState(2801);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).duplicatedElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(2806);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public List<TerminalNode> LINES() { return getTokens(MySqlParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(MySqlParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadDataStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadDataStatement(this);
		}
	}

	public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_loadDataStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2809);
			match(LOAD);
			setState(2810);
			match(DATA);
			setState(2812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2811);
				((LoadDataStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadDataStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2814);
				match(LOCAL);
				}
			}

			setState(2817);
			match(INFILE);
			setState(2818);
			((LoadDataStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2819);
				((LoadDataStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadDataStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2822);
			match(INTO);
			setState(2823);
			match(TABLE);
			setState(2824);
			tableName();
			setState(2830);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2825);
				match(PARTITION);
				setState(2826);
				match(LR_BRACKET);
				setState(2827);
				uidList();
				setState(2828);
				match(RR_BRACKET);
				}
			}

			setState(2835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2832);
				match(CHARACTER);
				setState(2833);
				match(SET);
				setState(2834);
				((LoadDataStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(2843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(2837);
				((LoadDataStatementContext)_localctx).fieldsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((LoadDataStatementContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2839); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2838);
					selectFieldsInto();
					}
					}
					setState(2841); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			setState(2851);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(2845);
				match(LINES);
				setState(2847); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2846);
					selectLinesInto();
					}
					}
					setState(2849); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(2857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2853);
				match(IGNORE);
				setState(2854);
				decimalLiteral();
				setState(2855);
				((LoadDataStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadDataStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				setState(2859);
				match(LR_BRACKET);
				setState(2860);
				assignmentField();
				setState(2865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2861);
					match(COMMA);
					setState(2862);
					assignmentField();
					}
					}
					setState(2867);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2868);
				match(RR_BRACKET);
				}
				break;
			}
			setState(2881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				setState(2872);
				match(SET);
				setState(2873);
				updatedElement();
				setState(2878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2874);
					match(COMMA);
					setState(2875);
					updatedElement();
					}
					}
					setState(2880);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token tag;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(MySqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(MySqlParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySqlParser.LESS_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(MySqlParser.GREATER_SYMBOL, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadXmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadXmlStatement(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2883);
			match(LOAD);
			setState(2884);
			match(XML);
			setState(2886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2885);
				((LoadXmlStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadXmlStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2889);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2888);
				match(LOCAL);
				}
			}

			setState(2891);
			match(INFILE);
			setState(2892);
			((LoadXmlStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2893);
				((LoadXmlStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadXmlStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2896);
			match(INTO);
			setState(2897);
			match(TABLE);
			setState(2898);
			tableName();
			setState(2902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2899);
				match(CHARACTER);
				setState(2900);
				match(SET);
				setState(2901);
				((LoadXmlStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(2910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(2904);
				match(ROWS);
				setState(2905);
				match(IDENTIFIED);
				setState(2906);
				match(BY);
				setState(2907);
				match(LESS_SYMBOL);
				setState(2908);
				((LoadXmlStatementContext)_localctx).tag = match(STRING_LITERAL);
				setState(2909);
				match(GREATER_SYMBOL);
				}
			}

			setState(2916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2912);
				match(IGNORE);
				setState(2913);
				decimalLiteral();
				setState(2914);
				((LoadXmlStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadXmlStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				setState(2918);
				match(LR_BRACKET);
				setState(2919);
				assignmentField();
				setState(2924);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2920);
					match(COMMA);
					setState(2921);
					assignmentField();
					}
					}
					setState(2926);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2927);
				match(RR_BRACKET);
				}
				break;
			}
			setState(2940);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				setState(2931);
				match(SET);
				setState(2932);
				updatedElement();
				setState(2937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2933);
					match(COMMA);
					setState(2934);
					updatedElement();
					}
					}
					setState(2939);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplaceStatement(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2942);
			match(REPLACE);
			setState(2944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(2943);
				((ReplaceStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					((ReplaceStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2947);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2946);
				match(INTO);
				}
			}

			setState(2949);
			tableName();
			setState(2955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2950);
				match(PARTITION);
				setState(2951);
				match(LR_BRACKET);
				setState(2952);
				((ReplaceStatementContext)_localctx).partitions = uidList();
				setState(2953);
				match(RR_BRACKET);
				}
			}

			setState(2973);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(2961);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
				case 1:
					{
					setState(2957);
					match(LR_BRACKET);
					setState(2958);
					((ReplaceStatementContext)_localctx).columns = uidList();
					setState(2959);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2963);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(2964);
				match(SET);
				setState(2965);
				((ReplaceStatementContext)_localctx).setFirst = updatedElement();
				setState(2970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2966);
					match(COMMA);
					setState(2967);
					((ReplaceStatementContext)_localctx).updatedElement = updatedElement();
					((ReplaceStatementContext)_localctx).setElements.add(((ReplaceStatementContext)_localctx).updatedElement);
					}
					}
					setState(2972);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionSelect(this);
		}
	}
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesisSelect(this);
		}
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleSelect(this);
		}
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitParenthesisSelect(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(3030);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2975);
				querySpecification();
				setState(2977);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
				case 1:
					{
					setState(2976);
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2979);
				queryExpression();
				setState(2981);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					setState(2980);
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2983);
				querySpecificationNointo();
				setState(2985); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2984);
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2987); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,399,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2997);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(2989);
					match(UNION);
					setState(2991);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(2990);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2995);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT:
						{
						setState(2993);
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						setState(2994);
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(3000);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2999);
					orderByClause();
					}
				}

				setState(3003);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3002);
					limitClause();
					}
				}

				setState(3006);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
				case 1:
					{
					setState(3005);
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3008);
				queryExpressionNointo();
				setState(3010); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3009);
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3012); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,406,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3014);
					match(UNION);
					setState(3016);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3015);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3018);
					queryExpression();
					}
				}

				setState(3022);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3021);
					orderByClause();
					}
				}

				setState(3025);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3024);
					limitClause();
					}
				}

				setState(3028);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
				case 1:
					{
					setState(3027);
					lockClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return getRuleContext(SingleUpdateStatementContext.class,0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return getRuleContext(MultipleUpdateStatementContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdateStatement(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_updateStatement);
		try {
			setState(3034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3032);
				singleUpdateStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3033);
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementValueContext extends ParserRuleContext {
		public Token insertFormat;
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatementValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatementValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatementValue(this);
		}
	}

	public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_insertStatementValue);
		int _la;
		try {
			setState(3054);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3036);
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3037);
				((InsertStatementValueContext)_localctx).insertFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					((InsertStatementValueContext)_localctx).insertFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3038);
				match(LR_BRACKET);
				setState(3040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (IF - 69)) | (1L << (INSERT - 69)) | (1L << (INTERVAL - 69)) | (1L << (LEFT - 69)) | (1L << (NOT - 69)) | (1L << (NULL_LITERAL - 69)) | (1L << (NUMBER - 69)) | (1L << (REPLACE - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (RIGHT - 133)) | (1L << (STACKED - 133)) | (1L << (TRUE - 133)) | (1L << (VALUES - 133)) | (1L << (DATE - 133)) | (1L << (TIME - 133)) | (1L << (TIMESTAMP - 133)) | (1L << (DATETIME - 133)) | (1L << (YEAR - 133)) | (1L << (CHAR - 133)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (BINARY - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)) | (1L << (CURRENT_DATE - 200)) | (1L << (CURRENT_TIME - 200)) | (1L << (CURRENT_TIMESTAMP - 200)) | (1L << (LOCALTIME - 200)) | (1L << (CURDATE - 200)) | (1L << (CURTIME - 200)) | (1L << (DATE_ADD - 200)) | (1L << (DATE_SUB - 200)) | (1L << (EXTRACT - 200)) | (1L << (LOCALTIMESTAMP - 200)) | (1L << (NOW - 200)) | (1L << (POSITION - 200)) | (1L << (SUBSTR - 200)) | (1L << (SUBSTRING - 200)) | (1L << (SYSDATE - 200)) | (1L << (TRIM - 200)) | (1L << (UTC_DATE - 200)) | (1L << (UTC_TIME - 200)) | (1L << (UTC_TIMESTAMP - 200)) | (1L << (ACCOUNT - 200)) | (1L << (ACTION - 200)) | (1L << (AFTER - 200)) | (1L << (AGGREGATE - 200)) | (1L << (ALGORITHM - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)) | (1L << (CLASS_ORIGIN - 264)) | (1L << (CLIENT - 264)) | (1L << (CLOSE - 264)) | (1L << (COALESCE - 264)) | (1L << (CODE - 264)) | (1L << (COLUMNS - 264)) | (1L << (COLUMN_FORMAT - 264)) | (1L << (COLUMN_NAME - 264)) | (1L << (COMMENT - 264)) | (1L << (COMMIT - 264)) | (1L << (COMPACT - 264)) | (1L << (COMPLETION - 264)) | (1L << (COMPRESSED - 264)) | (1L << (COMPRESSION - 264)) | (1L << (CONCURRENT - 264)) | (1L << (CONNECTION - 264)) | (1L << (CONSISTENT - 264)) | (1L << (CONSTRAINT_CATALOG - 264)) | (1L << (CONSTRAINT_SCHEMA - 264)) | (1L << (CONSTRAINT_NAME - 264)) | (1L << (CONTAINS - 264)) | (1L << (CONTEXT - 264)) | (1L << (CONTRIBUTORS - 264)) | (1L << (COPY - 264)) | (1L << (CPU - 264)) | (1L << (CURSOR_NAME - 264)) | (1L << (DATA - 264)) | (1L << (DATAFILE - 264)) | (1L << (DEALLOCATE - 264)) | (1L << (DEFAULT_AUTH - 264)) | (1L << (DEFINER - 264)) | (1L << (DELAY_KEY_WRITE - 264)) | (1L << (DES_KEY_FILE - 264)) | (1L << (DIRECTORY - 264)) | (1L << (DISABLE - 264)) | (1L << (DISCARD - 264)) | (1L << (DISK - 264)) | (1L << (DO - 264)) | (1L << (DUMPFILE - 264)) | (1L << (DUPLICATE - 264)) | (1L << (DYNAMIC - 264)) | (1L << (ENABLE - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)) | (1L << (FILE_BLOCK_SIZE - 328)) | (1L << (FILTER - 328)) | (1L << (FIRST - 328)) | (1L << (FIXED - 328)) | (1L << (FLUSH - 328)) | (1L << (FOLLOWS - 328)) | (1L << (FOUND - 328)) | (1L << (FULL - 328)) | (1L << (FUNCTION - 328)) | (1L << (GENERAL - 328)) | (1L << (GLOBAL - 328)) | (1L << (GRANTS - 328)) | (1L << (GROUP_REPLICATION - 328)) | (1L << (HANDLER - 328)) | (1L << (HASH - 328)) | (1L << (HELP - 328)) | (1L << (HOST - 328)) | (1L << (HOSTS - 328)) | (1L << (IDENTIFIED - 328)) | (1L << (IGNORE_SERVER_IDS - 328)) | (1L << (IMPORT - 328)) | (1L << (INDEXES - 328)) | (1L << (INITIAL_SIZE - 328)) | (1L << (INPLACE - 328)) | (1L << (INSERT_METHOD - 328)) | (1L << (INSTALL - 328)) | (1L << (INSTANCE - 328)) | (1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (KEY_BLOCK_SIZE - 328)) | (1L << (LANGUAGE - 328)) | (1L << (LAST - 328)) | (1L << (LEAVES - 328)) | (1L << (LESS - 328)) | (1L << (LEVEL - 328)) | (1L << (LIST - 328)) | (1L << (LOCAL - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MID - 392)) | (1L << (MIGRATE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NCHAR - 392)) | (1L << (NEVER - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)) | (1L << (OFFLINE - 392)) | (1L << (OFFSET - 392)) | (1L << (OJ - 392)) | (1L << (OLD_PASSWORD - 392)) | (1L << (ONE - 392)) | (1L << (ONLINE - 392)) | (1L << (ONLY - 392)) | (1L << (OPEN - 392)) | (1L << (OPTIMIZER_COSTS - 392)) | (1L << (OPTIONS - 392)) | (1L << (OWNER - 392)) | (1L << (PACK_KEYS - 392)) | (1L << (PAGE - 392)) | (1L << (PARSER - 392)) | (1L << (PARTIAL - 392)) | (1L << (PARTITIONING - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)) | (1L << (RECOVER - 456)) | (1L << (REDO_BUFFER_SIZE - 456)) | (1L << (REDUNDANT - 456)) | (1L << (RELAY - 456)) | (1L << (RELAY_LOG_FILE - 456)) | (1L << (RELAY_LOG_POS - 456)) | (1L << (RELAYLOG - 456)) | (1L << (REMOVE - 456)) | (1L << (REORGANIZE - 456)) | (1L << (REPAIR - 456)) | (1L << (REPLICATE_DO_DB - 456)) | (1L << (REPLICATE_DO_TABLE - 456)) | (1L << (REPLICATE_IGNORE_DB - 456)) | (1L << (REPLICATE_IGNORE_TABLE - 456)) | (1L << (REPLICATE_REWRITE_DB - 456)) | (1L << (REPLICATE_WILD_DO_TABLE - 456)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 456)) | (1L << (REPLICATION - 456)) | (1L << (RESET - 456)) | (1L << (RESUME - 456)) | (1L << (RETURNED_SQLSTATE - 456)) | (1L << (RETURNS - 456)) | (1L << (ROLLBACK - 456)) | (1L << (ROLLUP - 456)) | (1L << (ROTATE - 456)) | (1L << (ROW - 456)) | (1L << (ROWS - 456)) | (1L << (ROW_FORMAT - 456)) | (1L << (SAVEPOINT - 456)) | (1L << (SCHEDULE - 456)) | (1L << (SECURITY - 456)) | (1L << (SERVER - 456)) | (1L << (SESSION - 456)) | (1L << (SHARE - 456)) | (1L << (SHARED - 456)) | (1L << (SIGNED - 456)) | (1L << (SIMPLE - 456)) | (1L << (SLAVE - 456)) | (1L << (SLOW - 456)) | (1L << (SNAPSHOT - 456)) | (1L << (SOCKET - 456)) | (1L << (SOME - 456)) | (1L << (SONAME - 456)) | (1L << (SOUNDS - 456)) | (1L << (SOURCE - 456)) | (1L << (SQL_AFTER_GTIDS - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)) | (1L << (SUBCLASS_ORIGIN - 520)) | (1L << (SUBJECT - 520)) | (1L << (SUBPARTITION - 520)) | (1L << (SUBPARTITIONS - 520)) | (1L << (SUSPEND - 520)) | (1L << (SWAPS - 520)) | (1L << (SWITCHES - 520)) | (1L << (TABLE_NAME - 520)) | (1L << (TABLESPACE - 520)) | (1L << (TEMPORARY - 520)) | (1L << (TEMPTABLE - 520)) | (1L << (THAN - 520)) | (1L << (TRADITIONAL - 520)) | (1L << (TRANSACTION - 520)) | (1L << (TRIGGERS - 520)) | (1L << (TRUNCATE - 520)) | (1L << (UNDEFINED - 520)) | (1L << (UNDOFILE - 520)) | (1L << (UNDO_BUFFER_SIZE - 520)) | (1L << (UNINSTALL - 520)) | (1L << (UNKNOWN - 520)) | (1L << (UNTIL - 520)) | (1L << (UPGRADE - 520)) | (1L << (USER - 520)) | (1L << (USE_FRM - 520)) | (1L << (USER_RESOURCES - 520)) | (1L << (VALIDATION - 520)) | (1L << (VALUE - 520)) | (1L << (VARIABLES - 520)) | (1L << (VIEW - 520)) | (1L << (VISIBLE - 520)) | (1L << (WAIT - 520)) | (1L << (WARNINGS - 520)) | (1L << (WITHOUT - 520)) | (1L << (WORK - 520)) | (1L << (WRAPPER - 520)) | (1L << (X509 - 520)) | (1L << (XA - 520)) | (1L << (XML - 520)) | (1L << (INTERNAL - 520)) | (1L << (QUARTER - 520)) | (1L << (MONTH - 520)) | (1L << (DAY - 520)))) != 0) || ((((_la - 584)) & ~0x3f) == 0 && ((1L << (_la - 584)) & ((1L << (HOUR - 584)) | (1L << (MINUTE - 584)) | (1L << (WEEK - 584)) | (1L << (SECOND - 584)) | (1L << (MICROSECOND - 584)) | (1L << (TABLES - 584)) | (1L << (ROUTINE - 584)) | (1L << (EXECUTE - 584)) | (1L << (FILE - 584)) | (1L << (PROCESS - 584)) | (1L << (RELOAD - 584)) | (1L << (SHUTDOWN - 584)) | (1L << (SUPER - 584)) | (1L << (PRIVILEGES - 584)) | (1L << (SESSION_VARIABLES_ADMIN - 584)) | (1L << (ARMSCII8 - 584)) | (1L << (ASCII - 584)) | (1L << (BIG5 - 584)) | (1L << (CP1250 - 584)) | (1L << (CP1251 - 584)) | (1L << (CP1256 - 584)) | (1L << (CP1257 - 584)) | (1L << (CP850 - 584)) | (1L << (CP852 - 584)) | (1L << (CP866 - 584)) | (1L << (CP932 - 584)) | (1L << (DEC8 - 584)) | (1L << (EUCJPMS - 584)) | (1L << (EUCKR - 584)) | (1L << (GB2312 - 584)) | (1L << (GBK - 584)) | (1L << (GEOSTD8 - 584)) | (1L << (GREEK - 584)) | (1L << (HEBREW - 584)) | (1L << (HP8 - 584)) | (1L << (KEYBCS2 - 584)) | (1L << (KOI8R - 584)) | (1L << (KOI8U - 584)) | (1L << (LATIN1 - 584)) | (1L << (LATIN2 - 584)) | (1L << (LATIN5 - 584)) | (1L << (LATIN7 - 584)) | (1L << (MACCE - 584)) | (1L << (MACROMAN - 584)) | (1L << (SJIS - 584)) | (1L << (SWE7 - 584)) | (1L << (TIS620 - 584)) | (1L << (UCS2 - 584)) | (1L << (UJIS - 584)) | (1L << (UTF16 - 584)) | (1L << (UTF16LE - 584)) | (1L << (UTF32 - 584)) | (1L << (UTF8 - 584)) | (1L << (UTF8MB3 - 584)) | (1L << (UTF8MB4 - 584)) | (1L << (ARCHIVE - 584)) | (1L << (BLACKHOLE - 584)) | (1L << (CSV - 584)) | (1L << (FEDERATED - 584)) | (1L << (INNODB - 584)) | (1L << (MEMORY - 584)) | (1L << (MRG_MYISAM - 584)) | (1L << (MYISAM - 584)) | (1L << (NDB - 584)))) != 0) || ((((_la - 648)) & ~0x3f) == 0 && ((1L << (_la - 648)) & ((1L << (NDBCLUSTER - 648)) | (1L << (PERFORMANCE_SCHEMA - 648)) | (1L << (TOKUDB - 648)) | (1L << (REPEATABLE - 648)) | (1L << (COMMITTED - 648)) | (1L << (UNCOMMITTED - 648)) | (1L << (SERIALIZABLE - 648)) | (1L << (GEOMETRYCOLLECTION - 648)) | (1L << (LINESTRING - 648)) | (1L << (MULTILINESTRING - 648)) | (1L << (MULTIPOINT - 648)) | (1L << (MULTIPOLYGON - 648)) | (1L << (POINT - 648)) | (1L << (POLYGON - 648)) | (1L << (ABS - 648)) | (1L << (ACOS - 648)) | (1L << (ADDDATE - 648)) | (1L << (ADDTIME - 648)) | (1L << (AES_DECRYPT - 648)) | (1L << (AES_ENCRYPT - 648)) | (1L << (AREA - 648)) | (1L << (ASBINARY - 648)) | (1L << (ASIN - 648)) | (1L << (ASTEXT - 648)) | (1L << (ASWKB - 648)) | (1L << (ASWKT - 648)) | (1L << (ASYMMETRIC_DECRYPT - 648)) | (1L << (ASYMMETRIC_DERIVE - 648)) | (1L << (ASYMMETRIC_ENCRYPT - 648)) | (1L << (ASYMMETRIC_SIGN - 648)) | (1L << (ASYMMETRIC_VERIFY - 648)) | (1L << (ATAN - 648)) | (1L << (ATAN2 - 648)) | (1L << (BENCHMARK - 648)) | (1L << (BIN - 648)) | (1L << (BIT_COUNT - 648)) | (1L << (BIT_LENGTH - 648)) | (1L << (BUFFER - 648)) | (1L << (CATALOG_NAME - 648)) | (1L << (CEIL - 648)) | (1L << (CEILING - 648)) | (1L << (CENTROID - 648)) | (1L << (CHARACTER_LENGTH - 648)) | (1L << (CHARSET - 648)) | (1L << (CHAR_LENGTH - 648)) | (1L << (COERCIBILITY - 648)) | (1L << (COLLATION - 648)) | (1L << (COMPRESS - 648)) | (1L << (CONCAT - 648)) | (1L << (CONCAT_WS - 648)) | (1L << (CONNECTION_ID - 648)) | (1L << (CONV - 648)) | (1L << (CONVERT_TZ - 648)) | (1L << (COS - 648)) | (1L << (COT - 648)) | (1L << (CRC32 - 648)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 648)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 648)) | (1L << (CREATE_DH_PARAMETERS - 648)) | (1L << (CREATE_DIGEST - 648)) | (1L << (CROSSES - 648)) | (1L << (DATEDIFF - 648)))) != 0) || ((((_la - 712)) & ~0x3f) == 0 && ((1L << (_la - 712)) & ((1L << (DATE_FORMAT - 712)) | (1L << (DAYNAME - 712)) | (1L << (DAYOFMONTH - 712)) | (1L << (DAYOFWEEK - 712)) | (1L << (DAYOFYEAR - 712)) | (1L << (DECODE - 712)) | (1L << (DEGREES - 712)) | (1L << (DES_DECRYPT - 712)) | (1L << (DES_ENCRYPT - 712)) | (1L << (DIMENSION - 712)) | (1L << (DISJOINT - 712)) | (1L << (ELT - 712)) | (1L << (ENCODE - 712)) | (1L << (ENCRYPT - 712)) | (1L << (ENDPOINT - 712)) | (1L << (ENVELOPE - 712)) | (1L << (EQUALS - 712)) | (1L << (EXP - 712)) | (1L << (EXPORT_SET - 712)) | (1L << (EXTERIORRING - 712)) | (1L << (EXTRACTVALUE - 712)) | (1L << (FIELD - 712)) | (1L << (FIND_IN_SET - 712)) | (1L << (FLOOR - 712)) | (1L << (FORMAT - 712)) | (1L << (FOUND_ROWS - 712)) | (1L << (FROM_BASE64 - 712)) | (1L << (FROM_DAYS - 712)) | (1L << (FROM_UNIXTIME - 712)) | (1L << (GEOMCOLLFROMTEXT - 712)) | (1L << (GEOMCOLLFROMWKB - 712)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 712)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 712)) | (1L << (GEOMETRYFROMTEXT - 712)) | (1L << (GEOMETRYFROMWKB - 712)) | (1L << (GEOMETRYN - 712)) | (1L << (GEOMETRYTYPE - 712)) | (1L << (GEOMFROMTEXT - 712)) | (1L << (GEOMFROMWKB - 712)) | (1L << (GET_FORMAT - 712)) | (1L << (GET_LOCK - 712)) | (1L << (GLENGTH - 712)) | (1L << (GREATEST - 712)) | (1L << (GTID_SUBSET - 712)) | (1L << (GTID_SUBTRACT - 712)) | (1L << (HEX - 712)) | (1L << (IFNULL - 712)) | (1L << (INET6_ATON - 712)) | (1L << (INET6_NTOA - 712)) | (1L << (INET_ATON - 712)) | (1L << (INET_NTOA - 712)) | (1L << (INSTR - 712)) | (1L << (INTERIORRINGN - 712)) | (1L << (INTERSECTS - 712)) | (1L << (ISCLOSED - 712)) | (1L << (ISEMPTY - 712)) | (1L << (ISNULL - 712)) | (1L << (ISSIMPLE - 712)) | (1L << (IS_FREE_LOCK - 712)) | (1L << (IS_IPV4 - 712)) | (1L << (IS_IPV4_COMPAT - 712)) | (1L << (IS_IPV4_MAPPED - 712)) | (1L << (IS_IPV6 - 712)) | (1L << (IS_USED_LOCK - 712)))) != 0) || ((((_la - 776)) & ~0x3f) == 0 && ((1L << (_la - 776)) & ((1L << (LAST_INSERT_ID - 776)) | (1L << (LCASE - 776)) | (1L << (LEAST - 776)) | (1L << (LENGTH - 776)) | (1L << (LINEFROMTEXT - 776)) | (1L << (LINEFROMWKB - 776)) | (1L << (LINESTRINGFROMTEXT - 776)) | (1L << (LINESTRINGFROMWKB - 776)) | (1L << (LN - 776)) | (1L << (LOAD_FILE - 776)) | (1L << (LOCATE - 776)) | (1L << (LOG - 776)) | (1L << (LOG10 - 776)) | (1L << (LOG2 - 776)) | (1L << (LOWER - 776)) | (1L << (LPAD - 776)) | (1L << (LTRIM - 776)) | (1L << (MAKEDATE - 776)) | (1L << (MAKETIME - 776)) | (1L << (MAKE_SET - 776)) | (1L << (MASTER_POS_WAIT - 776)) | (1L << (MBRCONTAINS - 776)) | (1L << (MBRDISJOINT - 776)) | (1L << (MBREQUAL - 776)) | (1L << (MBRINTERSECTS - 776)) | (1L << (MBROVERLAPS - 776)) | (1L << (MBRTOUCHES - 776)) | (1L << (MBRWITHIN - 776)) | (1L << (MD5 - 776)) | (1L << (MLINEFROMTEXT - 776)) | (1L << (MLINEFROMWKB - 776)) | (1L << (MONTHNAME - 776)) | (1L << (MPOINTFROMTEXT - 776)) | (1L << (MPOINTFROMWKB - 776)) | (1L << (MPOLYFROMTEXT - 776)) | (1L << (MPOLYFROMWKB - 776)) | (1L << (MULTILINESTRINGFROMTEXT - 776)) | (1L << (MULTILINESTRINGFROMWKB - 776)) | (1L << (MULTIPOINTFROMTEXT - 776)) | (1L << (MULTIPOINTFROMWKB - 776)) | (1L << (MULTIPOLYGONFROMTEXT - 776)) | (1L << (MULTIPOLYGONFROMWKB - 776)) | (1L << (NAME_CONST - 776)) | (1L << (NULLIF - 776)) | (1L << (NUMGEOMETRIES - 776)) | (1L << (NUMINTERIORRINGS - 776)) | (1L << (NUMPOINTS - 776)) | (1L << (OCT - 776)) | (1L << (OCTET_LENGTH - 776)) | (1L << (ORD - 776)) | (1L << (OVERLAPS - 776)) | (1L << (PERIOD_ADD - 776)) | (1L << (PERIOD_DIFF - 776)) | (1L << (PI - 776)) | (1L << (POINTFROMTEXT - 776)) | (1L << (POINTFROMWKB - 776)) | (1L << (POINTN - 776)) | (1L << (POLYFROMTEXT - 776)) | (1L << (POLYFROMWKB - 776)) | (1L << (POLYGONFROMTEXT - 776)) | (1L << (POLYGONFROMWKB - 776)) | (1L << (POW - 776)) | (1L << (POWER - 776)) | (1L << (QUOTE - 776)))) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & ((1L << (RADIANS - 840)) | (1L << (RAND - 840)) | (1L << (RANDOM_BYTES - 840)) | (1L << (RELEASE_LOCK - 840)) | (1L << (REVERSE - 840)) | (1L << (ROUND - 840)) | (1L << (ROW_COUNT - 840)) | (1L << (RPAD - 840)) | (1L << (RTRIM - 840)) | (1L << (SEC_TO_TIME - 840)) | (1L << (SESSION_USER - 840)) | (1L << (SHA - 840)) | (1L << (SHA1 - 840)) | (1L << (SHA2 - 840)) | (1L << (SCHEMA_NAME - 840)) | (1L << (SIGN - 840)) | (1L << (SIN - 840)) | (1L << (SLEEP - 840)) | (1L << (SOUNDEX - 840)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 840)) | (1L << (SQRT - 840)) | (1L << (SRID - 840)) | (1L << (STARTPOINT - 840)) | (1L << (STRCMP - 840)) | (1L << (STR_TO_DATE - 840)) | (1L << (ST_AREA - 840)) | (1L << (ST_ASBINARY - 840)) | (1L << (ST_ASTEXT - 840)) | (1L << (ST_ASWKB - 840)) | (1L << (ST_ASWKT - 840)) | (1L << (ST_BUFFER - 840)) | (1L << (ST_CENTROID - 840)) | (1L << (ST_CONTAINS - 840)) | (1L << (ST_CROSSES - 840)) | (1L << (ST_DIFFERENCE - 840)) | (1L << (ST_DIMENSION - 840)) | (1L << (ST_DISJOINT - 840)) | (1L << (ST_DISTANCE - 840)) | (1L << (ST_ENDPOINT - 840)) | (1L << (ST_ENVELOPE - 840)) | (1L << (ST_EQUALS - 840)) | (1L << (ST_EXTERIORRING - 840)) | (1L << (ST_GEOMCOLLFROMTEXT - 840)) | (1L << (ST_GEOMCOLLFROMTXT - 840)) | (1L << (ST_GEOMCOLLFROMWKB - 840)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 840)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 840)) | (1L << (ST_GEOMETRYFROMTEXT - 840)) | (1L << (ST_GEOMETRYFROMWKB - 840)) | (1L << (ST_GEOMETRYN - 840)) | (1L << (ST_GEOMETRYTYPE - 840)) | (1L << (ST_GEOMFROMTEXT - 840)) | (1L << (ST_GEOMFROMWKB - 840)) | (1L << (ST_INTERIORRINGN - 840)) | (1L << (ST_INTERSECTION - 840)) | (1L << (ST_INTERSECTS - 840)) | (1L << (ST_ISCLOSED - 840)) | (1L << (ST_ISEMPTY - 840)) | (1L << (ST_ISSIMPLE - 840)) | (1L << (ST_LINEFROMTEXT - 840)) | (1L << (ST_LINEFROMWKB - 840)) | (1L << (ST_LINESTRINGFROMTEXT - 840)) | (1L << (ST_LINESTRINGFROMWKB - 840)) | (1L << (ST_NUMGEOMETRIES - 840)))) != 0) || ((((_la - 904)) & ~0x3f) == 0 && ((1L << (_la - 904)) & ((1L << (ST_NUMINTERIORRING - 904)) | (1L << (ST_NUMINTERIORRINGS - 904)) | (1L << (ST_NUMPOINTS - 904)) | (1L << (ST_OVERLAPS - 904)) | (1L << (ST_POINTFROMTEXT - 904)) | (1L << (ST_POINTFROMWKB - 904)) | (1L << (ST_POINTN - 904)) | (1L << (ST_POLYFROMTEXT - 904)) | (1L << (ST_POLYFROMWKB - 904)) | (1L << (ST_POLYGONFROMTEXT - 904)) | (1L << (ST_POLYGONFROMWKB - 904)) | (1L << (ST_SRID - 904)) | (1L << (ST_STARTPOINT - 904)) | (1L << (ST_SYMDIFFERENCE - 904)) | (1L << (ST_TOUCHES - 904)) | (1L << (ST_UNION - 904)) | (1L << (ST_WITHIN - 904)) | (1L << (ST_X - 904)) | (1L << (ST_Y - 904)) | (1L << (SUBDATE - 904)) | (1L << (SUBSTRING_INDEX - 904)) | (1L << (SUBTIME - 904)) | (1L << (SYSTEM_USER - 904)) | (1L << (TAN - 904)) | (1L << (TIMEDIFF - 904)) | (1L << (TIMESTAMPADD - 904)) | (1L << (TIMESTAMPDIFF - 904)) | (1L << (TIME_FORMAT - 904)) | (1L << (TIME_TO_SEC - 904)) | (1L << (TOUCHES - 904)) | (1L << (TO_BASE64 - 904)) | (1L << (TO_DAYS - 904)) | (1L << (TO_SECONDS - 904)) | (1L << (UCASE - 904)) | (1L << (UNCOMPRESS - 904)) | (1L << (UNCOMPRESSED_LENGTH - 904)) | (1L << (UNHEX - 904)) | (1L << (UNIX_TIMESTAMP - 904)) | (1L << (UPDATEXML - 904)) | (1L << (UPPER - 904)) | (1L << (UUID - 904)) | (1L << (UUID_SHORT - 904)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 904)) | (1L << (VERSION - 904)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 904)) | (1L << (WEEKDAY - 904)) | (1L << (WEEKOFYEAR - 904)) | (1L << (WEIGHT_STRING - 904)) | (1L << (WITHIN - 904)) | (1L << (YEARWEEK - 904)) | (1L << (Y_FUNCTION - 904)) | (1L << (X_FUNCTION - 904)))) != 0) || ((((_la - 968)) & ~0x3f) == 0 && ((1L << (_la - 968)) & ((1L << (PLUS - 968)) | (1L << (MINUS - 968)) | (1L << (EXCLAMATION_SYMBOL - 968)) | (1L << (BIT_NOT_OP - 968)) | (1L << (LR_BRACKET - 968)) | (1L << (ZERO_DECIMAL - 968)) | (1L << (ONE_DECIMAL - 968)) | (1L << (TWO_DECIMAL - 968)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 968)) | (1L << (START_NATIONAL_STRING_LITERAL - 968)) | (1L << (STRING_LITERAL - 968)) | (1L << (DECIMAL_LITERAL - 968)) | (1L << (HEXADECIMAL_LITERAL - 968)) | (1L << (REAL_LITERAL - 968)) | (1L << (NULL_SPEC_LITERAL - 968)) | (1L << (BIT_STRING - 968)) | (1L << (STRING_CHARSET_NAME - 968)) | (1L << (ID - 968)) | (1L << (REVERSE_QUOTE_ID - 968)) | (1L << (LOCAL_ID - 968)) | (1L << (GLOBAL_ID - 968)))) != 0)) {
					{
					setState(3039);
					expressionsWithDefaults();
					}
				}

				setState(3042);
				match(RR_BRACKET);
				setState(3051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3043);
					match(COMMA);
					setState(3044);
					match(LR_BRACKET);
					setState(3046);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (IF - 69)) | (1L << (INSERT - 69)) | (1L << (INTERVAL - 69)) | (1L << (LEFT - 69)) | (1L << (NOT - 69)) | (1L << (NULL_LITERAL - 69)) | (1L << (NUMBER - 69)) | (1L << (REPLACE - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (RIGHT - 133)) | (1L << (STACKED - 133)) | (1L << (TRUE - 133)) | (1L << (VALUES - 133)) | (1L << (DATE - 133)) | (1L << (TIME - 133)) | (1L << (TIMESTAMP - 133)) | (1L << (DATETIME - 133)) | (1L << (YEAR - 133)) | (1L << (CHAR - 133)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (BINARY - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)) | (1L << (CURRENT_DATE - 200)) | (1L << (CURRENT_TIME - 200)) | (1L << (CURRENT_TIMESTAMP - 200)) | (1L << (LOCALTIME - 200)) | (1L << (CURDATE - 200)) | (1L << (CURTIME - 200)) | (1L << (DATE_ADD - 200)) | (1L << (DATE_SUB - 200)) | (1L << (EXTRACT - 200)) | (1L << (LOCALTIMESTAMP - 200)) | (1L << (NOW - 200)) | (1L << (POSITION - 200)) | (1L << (SUBSTR - 200)) | (1L << (SUBSTRING - 200)) | (1L << (SYSDATE - 200)) | (1L << (TRIM - 200)) | (1L << (UTC_DATE - 200)) | (1L << (UTC_TIME - 200)) | (1L << (UTC_TIMESTAMP - 200)) | (1L << (ACCOUNT - 200)) | (1L << (ACTION - 200)) | (1L << (AFTER - 200)) | (1L << (AGGREGATE - 200)) | (1L << (ALGORITHM - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)) | (1L << (CLASS_ORIGIN - 264)) | (1L << (CLIENT - 264)) | (1L << (CLOSE - 264)) | (1L << (COALESCE - 264)) | (1L << (CODE - 264)) | (1L << (COLUMNS - 264)) | (1L << (COLUMN_FORMAT - 264)) | (1L << (COLUMN_NAME - 264)) | (1L << (COMMENT - 264)) | (1L << (COMMIT - 264)) | (1L << (COMPACT - 264)) | (1L << (COMPLETION - 264)) | (1L << (COMPRESSED - 264)) | (1L << (COMPRESSION - 264)) | (1L << (CONCURRENT - 264)) | (1L << (CONNECTION - 264)) | (1L << (CONSISTENT - 264)) | (1L << (CONSTRAINT_CATALOG - 264)) | (1L << (CONSTRAINT_SCHEMA - 264)) | (1L << (CONSTRAINT_NAME - 264)) | (1L << (CONTAINS - 264)) | (1L << (CONTEXT - 264)) | (1L << (CONTRIBUTORS - 264)) | (1L << (COPY - 264)) | (1L << (CPU - 264)) | (1L << (CURSOR_NAME - 264)) | (1L << (DATA - 264)) | (1L << (DATAFILE - 264)) | (1L << (DEALLOCATE - 264)) | (1L << (DEFAULT_AUTH - 264)) | (1L << (DEFINER - 264)) | (1L << (DELAY_KEY_WRITE - 264)) | (1L << (DES_KEY_FILE - 264)) | (1L << (DIRECTORY - 264)) | (1L << (DISABLE - 264)) | (1L << (DISCARD - 264)) | (1L << (DISK - 264)) | (1L << (DO - 264)) | (1L << (DUMPFILE - 264)) | (1L << (DUPLICATE - 264)) | (1L << (DYNAMIC - 264)) | (1L << (ENABLE - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)) | (1L << (FILE_BLOCK_SIZE - 328)) | (1L << (FILTER - 328)) | (1L << (FIRST - 328)) | (1L << (FIXED - 328)) | (1L << (FLUSH - 328)) | (1L << (FOLLOWS - 328)) | (1L << (FOUND - 328)) | (1L << (FULL - 328)) | (1L << (FUNCTION - 328)) | (1L << (GENERAL - 328)) | (1L << (GLOBAL - 328)) | (1L << (GRANTS - 328)) | (1L << (GROUP_REPLICATION - 328)) | (1L << (HANDLER - 328)) | (1L << (HASH - 328)) | (1L << (HELP - 328)) | (1L << (HOST - 328)) | (1L << (HOSTS - 328)) | (1L << (IDENTIFIED - 328)) | (1L << (IGNORE_SERVER_IDS - 328)) | (1L << (IMPORT - 328)) | (1L << (INDEXES - 328)) | (1L << (INITIAL_SIZE - 328)) | (1L << (INPLACE - 328)) | (1L << (INSERT_METHOD - 328)) | (1L << (INSTALL - 328)) | (1L << (INSTANCE - 328)) | (1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (KEY_BLOCK_SIZE - 328)) | (1L << (LANGUAGE - 328)) | (1L << (LAST - 328)) | (1L << (LEAVES - 328)) | (1L << (LESS - 328)) | (1L << (LEVEL - 328)) | (1L << (LIST - 328)) | (1L << (LOCAL - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MID - 392)) | (1L << (MIGRATE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NCHAR - 392)) | (1L << (NEVER - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)) | (1L << (OFFLINE - 392)) | (1L << (OFFSET - 392)) | (1L << (OJ - 392)) | (1L << (OLD_PASSWORD - 392)) | (1L << (ONE - 392)) | (1L << (ONLINE - 392)) | (1L << (ONLY - 392)) | (1L << (OPEN - 392)) | (1L << (OPTIMIZER_COSTS - 392)) | (1L << (OPTIONS - 392)) | (1L << (OWNER - 392)) | (1L << (PACK_KEYS - 392)) | (1L << (PAGE - 392)) | (1L << (PARSER - 392)) | (1L << (PARTIAL - 392)) | (1L << (PARTITIONING - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)) | (1L << (RECOVER - 456)) | (1L << (REDO_BUFFER_SIZE - 456)) | (1L << (REDUNDANT - 456)) | (1L << (RELAY - 456)) | (1L << (RELAY_LOG_FILE - 456)) | (1L << (RELAY_LOG_POS - 456)) | (1L << (RELAYLOG - 456)) | (1L << (REMOVE - 456)) | (1L << (REORGANIZE - 456)) | (1L << (REPAIR - 456)) | (1L << (REPLICATE_DO_DB - 456)) | (1L << (REPLICATE_DO_TABLE - 456)) | (1L << (REPLICATE_IGNORE_DB - 456)) | (1L << (REPLICATE_IGNORE_TABLE - 456)) | (1L << (REPLICATE_REWRITE_DB - 456)) | (1L << (REPLICATE_WILD_DO_TABLE - 456)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 456)) | (1L << (REPLICATION - 456)) | (1L << (RESET - 456)) | (1L << (RESUME - 456)) | (1L << (RETURNED_SQLSTATE - 456)) | (1L << (RETURNS - 456)) | (1L << (ROLLBACK - 456)) | (1L << (ROLLUP - 456)) | (1L << (ROTATE - 456)) | (1L << (ROW - 456)) | (1L << (ROWS - 456)) | (1L << (ROW_FORMAT - 456)) | (1L << (SAVEPOINT - 456)) | (1L << (SCHEDULE - 456)) | (1L << (SECURITY - 456)) | (1L << (SERVER - 456)) | (1L << (SESSION - 456)) | (1L << (SHARE - 456)) | (1L << (SHARED - 456)) | (1L << (SIGNED - 456)) | (1L << (SIMPLE - 456)) | (1L << (SLAVE - 456)) | (1L << (SLOW - 456)) | (1L << (SNAPSHOT - 456)) | (1L << (SOCKET - 456)) | (1L << (SOME - 456)) | (1L << (SONAME - 456)) | (1L << (SOUNDS - 456)) | (1L << (SOURCE - 456)) | (1L << (SQL_AFTER_GTIDS - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)) | (1L << (SUBCLASS_ORIGIN - 520)) | (1L << (SUBJECT - 520)) | (1L << (SUBPARTITION - 520)) | (1L << (SUBPARTITIONS - 520)) | (1L << (SUSPEND - 520)) | (1L << (SWAPS - 520)) | (1L << (SWITCHES - 520)) | (1L << (TABLE_NAME - 520)) | (1L << (TABLESPACE - 520)) | (1L << (TEMPORARY - 520)) | (1L << (TEMPTABLE - 520)) | (1L << (THAN - 520)) | (1L << (TRADITIONAL - 520)) | (1L << (TRANSACTION - 520)) | (1L << (TRIGGERS - 520)) | (1L << (TRUNCATE - 520)) | (1L << (UNDEFINED - 520)) | (1L << (UNDOFILE - 520)) | (1L << (UNDO_BUFFER_SIZE - 520)) | (1L << (UNINSTALL - 520)) | (1L << (UNKNOWN - 520)) | (1L << (UNTIL - 520)) | (1L << (UPGRADE - 520)) | (1L << (USER - 520)) | (1L << (USE_FRM - 520)) | (1L << (USER_RESOURCES - 520)) | (1L << (VALIDATION - 520)) | (1L << (VALUE - 520)) | (1L << (VARIABLES - 520)) | (1L << (VIEW - 520)) | (1L << (VISIBLE - 520)) | (1L << (WAIT - 520)) | (1L << (WARNINGS - 520)) | (1L << (WITHOUT - 520)) | (1L << (WORK - 520)) | (1L << (WRAPPER - 520)) | (1L << (X509 - 520)) | (1L << (XA - 520)) | (1L << (XML - 520)) | (1L << (INTERNAL - 520)) | (1L << (QUARTER - 520)) | (1L << (MONTH - 520)) | (1L << (DAY - 520)))) != 0) || ((((_la - 584)) & ~0x3f) == 0 && ((1L << (_la - 584)) & ((1L << (HOUR - 584)) | (1L << (MINUTE - 584)) | (1L << (WEEK - 584)) | (1L << (SECOND - 584)) | (1L << (MICROSECOND - 584)) | (1L << (TABLES - 584)) | (1L << (ROUTINE - 584)) | (1L << (EXECUTE - 584)) | (1L << (FILE - 584)) | (1L << (PROCESS - 584)) | (1L << (RELOAD - 584)) | (1L << (SHUTDOWN - 584)) | (1L << (SUPER - 584)) | (1L << (PRIVILEGES - 584)) | (1L << (SESSION_VARIABLES_ADMIN - 584)) | (1L << (ARMSCII8 - 584)) | (1L << (ASCII - 584)) | (1L << (BIG5 - 584)) | (1L << (CP1250 - 584)) | (1L << (CP1251 - 584)) | (1L << (CP1256 - 584)) | (1L << (CP1257 - 584)) | (1L << (CP850 - 584)) | (1L << (CP852 - 584)) | (1L << (CP866 - 584)) | (1L << (CP932 - 584)) | (1L << (DEC8 - 584)) | (1L << (EUCJPMS - 584)) | (1L << (EUCKR - 584)) | (1L << (GB2312 - 584)) | (1L << (GBK - 584)) | (1L << (GEOSTD8 - 584)) | (1L << (GREEK - 584)) | (1L << (HEBREW - 584)) | (1L << (HP8 - 584)) | (1L << (KEYBCS2 - 584)) | (1L << (KOI8R - 584)) | (1L << (KOI8U - 584)) | (1L << (LATIN1 - 584)) | (1L << (LATIN2 - 584)) | (1L << (LATIN5 - 584)) | (1L << (LATIN7 - 584)) | (1L << (MACCE - 584)) | (1L << (MACROMAN - 584)) | (1L << (SJIS - 584)) | (1L << (SWE7 - 584)) | (1L << (TIS620 - 584)) | (1L << (UCS2 - 584)) | (1L << (UJIS - 584)) | (1L << (UTF16 - 584)) | (1L << (UTF16LE - 584)) | (1L << (UTF32 - 584)) | (1L << (UTF8 - 584)) | (1L << (UTF8MB3 - 584)) | (1L << (UTF8MB4 - 584)) | (1L << (ARCHIVE - 584)) | (1L << (BLACKHOLE - 584)) | (1L << (CSV - 584)) | (1L << (FEDERATED - 584)) | (1L << (INNODB - 584)) | (1L << (MEMORY - 584)) | (1L << (MRG_MYISAM - 584)) | (1L << (MYISAM - 584)) | (1L << (NDB - 584)))) != 0) || ((((_la - 648)) & ~0x3f) == 0 && ((1L << (_la - 648)) & ((1L << (NDBCLUSTER - 648)) | (1L << (PERFORMANCE_SCHEMA - 648)) | (1L << (TOKUDB - 648)) | (1L << (REPEATABLE - 648)) | (1L << (COMMITTED - 648)) | (1L << (UNCOMMITTED - 648)) | (1L << (SERIALIZABLE - 648)) | (1L << (GEOMETRYCOLLECTION - 648)) | (1L << (LINESTRING - 648)) | (1L << (MULTILINESTRING - 648)) | (1L << (MULTIPOINT - 648)) | (1L << (MULTIPOLYGON - 648)) | (1L << (POINT - 648)) | (1L << (POLYGON - 648)) | (1L << (ABS - 648)) | (1L << (ACOS - 648)) | (1L << (ADDDATE - 648)) | (1L << (ADDTIME - 648)) | (1L << (AES_DECRYPT - 648)) | (1L << (AES_ENCRYPT - 648)) | (1L << (AREA - 648)) | (1L << (ASBINARY - 648)) | (1L << (ASIN - 648)) | (1L << (ASTEXT - 648)) | (1L << (ASWKB - 648)) | (1L << (ASWKT - 648)) | (1L << (ASYMMETRIC_DECRYPT - 648)) | (1L << (ASYMMETRIC_DERIVE - 648)) | (1L << (ASYMMETRIC_ENCRYPT - 648)) | (1L << (ASYMMETRIC_SIGN - 648)) | (1L << (ASYMMETRIC_VERIFY - 648)) | (1L << (ATAN - 648)) | (1L << (ATAN2 - 648)) | (1L << (BENCHMARK - 648)) | (1L << (BIN - 648)) | (1L << (BIT_COUNT - 648)) | (1L << (BIT_LENGTH - 648)) | (1L << (BUFFER - 648)) | (1L << (CATALOG_NAME - 648)) | (1L << (CEIL - 648)) | (1L << (CEILING - 648)) | (1L << (CENTROID - 648)) | (1L << (CHARACTER_LENGTH - 648)) | (1L << (CHARSET - 648)) | (1L << (CHAR_LENGTH - 648)) | (1L << (COERCIBILITY - 648)) | (1L << (COLLATION - 648)) | (1L << (COMPRESS - 648)) | (1L << (CONCAT - 648)) | (1L << (CONCAT_WS - 648)) | (1L << (CONNECTION_ID - 648)) | (1L << (CONV - 648)) | (1L << (CONVERT_TZ - 648)) | (1L << (COS - 648)) | (1L << (COT - 648)) | (1L << (CRC32 - 648)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 648)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 648)) | (1L << (CREATE_DH_PARAMETERS - 648)) | (1L << (CREATE_DIGEST - 648)) | (1L << (CROSSES - 648)) | (1L << (DATEDIFF - 648)))) != 0) || ((((_la - 712)) & ~0x3f) == 0 && ((1L << (_la - 712)) & ((1L << (DATE_FORMAT - 712)) | (1L << (DAYNAME - 712)) | (1L << (DAYOFMONTH - 712)) | (1L << (DAYOFWEEK - 712)) | (1L << (DAYOFYEAR - 712)) | (1L << (DECODE - 712)) | (1L << (DEGREES - 712)) | (1L << (DES_DECRYPT - 712)) | (1L << (DES_ENCRYPT - 712)) | (1L << (DIMENSION - 712)) | (1L << (DISJOINT - 712)) | (1L << (ELT - 712)) | (1L << (ENCODE - 712)) | (1L << (ENCRYPT - 712)) | (1L << (ENDPOINT - 712)) | (1L << (ENVELOPE - 712)) | (1L << (EQUALS - 712)) | (1L << (EXP - 712)) | (1L << (EXPORT_SET - 712)) | (1L << (EXTERIORRING - 712)) | (1L << (EXTRACTVALUE - 712)) | (1L << (FIELD - 712)) | (1L << (FIND_IN_SET - 712)) | (1L << (FLOOR - 712)) | (1L << (FORMAT - 712)) | (1L << (FOUND_ROWS - 712)) | (1L << (FROM_BASE64 - 712)) | (1L << (FROM_DAYS - 712)) | (1L << (FROM_UNIXTIME - 712)) | (1L << (GEOMCOLLFROMTEXT - 712)) | (1L << (GEOMCOLLFROMWKB - 712)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 712)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 712)) | (1L << (GEOMETRYFROMTEXT - 712)) | (1L << (GEOMETRYFROMWKB - 712)) | (1L << (GEOMETRYN - 712)) | (1L << (GEOMETRYTYPE - 712)) | (1L << (GEOMFROMTEXT - 712)) | (1L << (GEOMFROMWKB - 712)) | (1L << (GET_FORMAT - 712)) | (1L << (GET_LOCK - 712)) | (1L << (GLENGTH - 712)) | (1L << (GREATEST - 712)) | (1L << (GTID_SUBSET - 712)) | (1L << (GTID_SUBTRACT - 712)) | (1L << (HEX - 712)) | (1L << (IFNULL - 712)) | (1L << (INET6_ATON - 712)) | (1L << (INET6_NTOA - 712)) | (1L << (INET_ATON - 712)) | (1L << (INET_NTOA - 712)) | (1L << (INSTR - 712)) | (1L << (INTERIORRINGN - 712)) | (1L << (INTERSECTS - 712)) | (1L << (ISCLOSED - 712)) | (1L << (ISEMPTY - 712)) | (1L << (ISNULL - 712)) | (1L << (ISSIMPLE - 712)) | (1L << (IS_FREE_LOCK - 712)) | (1L << (IS_IPV4 - 712)) | (1L << (IS_IPV4_COMPAT - 712)) | (1L << (IS_IPV4_MAPPED - 712)) | (1L << (IS_IPV6 - 712)) | (1L << (IS_USED_LOCK - 712)))) != 0) || ((((_la - 776)) & ~0x3f) == 0 && ((1L << (_la - 776)) & ((1L << (LAST_INSERT_ID - 776)) | (1L << (LCASE - 776)) | (1L << (LEAST - 776)) | (1L << (LENGTH - 776)) | (1L << (LINEFROMTEXT - 776)) | (1L << (LINEFROMWKB - 776)) | (1L << (LINESTRINGFROMTEXT - 776)) | (1L << (LINESTRINGFROMWKB - 776)) | (1L << (LN - 776)) | (1L << (LOAD_FILE - 776)) | (1L << (LOCATE - 776)) | (1L << (LOG - 776)) | (1L << (LOG10 - 776)) | (1L << (LOG2 - 776)) | (1L << (LOWER - 776)) | (1L << (LPAD - 776)) | (1L << (LTRIM - 776)) | (1L << (MAKEDATE - 776)) | (1L << (MAKETIME - 776)) | (1L << (MAKE_SET - 776)) | (1L << (MASTER_POS_WAIT - 776)) | (1L << (MBRCONTAINS - 776)) | (1L << (MBRDISJOINT - 776)) | (1L << (MBREQUAL - 776)) | (1L << (MBRINTERSECTS - 776)) | (1L << (MBROVERLAPS - 776)) | (1L << (MBRTOUCHES - 776)) | (1L << (MBRWITHIN - 776)) | (1L << (MD5 - 776)) | (1L << (MLINEFROMTEXT - 776)) | (1L << (MLINEFROMWKB - 776)) | (1L << (MONTHNAME - 776)) | (1L << (MPOINTFROMTEXT - 776)) | (1L << (MPOINTFROMWKB - 776)) | (1L << (MPOLYFROMTEXT - 776)) | (1L << (MPOLYFROMWKB - 776)) | (1L << (MULTILINESTRINGFROMTEXT - 776)) | (1L << (MULTILINESTRINGFROMWKB - 776)) | (1L << (MULTIPOINTFROMTEXT - 776)) | (1L << (MULTIPOINTFROMWKB - 776)) | (1L << (MULTIPOLYGONFROMTEXT - 776)) | (1L << (MULTIPOLYGONFROMWKB - 776)) | (1L << (NAME_CONST - 776)) | (1L << (NULLIF - 776)) | (1L << (NUMGEOMETRIES - 776)) | (1L << (NUMINTERIORRINGS - 776)) | (1L << (NUMPOINTS - 776)) | (1L << (OCT - 776)) | (1L << (OCTET_LENGTH - 776)) | (1L << (ORD - 776)) | (1L << (OVERLAPS - 776)) | (1L << (PERIOD_ADD - 776)) | (1L << (PERIOD_DIFF - 776)) | (1L << (PI - 776)) | (1L << (POINTFROMTEXT - 776)) | (1L << (POINTFROMWKB - 776)) | (1L << (POINTN - 776)) | (1L << (POLYFROMTEXT - 776)) | (1L << (POLYFROMWKB - 776)) | (1L << (POLYGONFROMTEXT - 776)) | (1L << (POLYGONFROMWKB - 776)) | (1L << (POW - 776)) | (1L << (POWER - 776)) | (1L << (QUOTE - 776)))) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & ((1L << (RADIANS - 840)) | (1L << (RAND - 840)) | (1L << (RANDOM_BYTES - 840)) | (1L << (RELEASE_LOCK - 840)) | (1L << (REVERSE - 840)) | (1L << (ROUND - 840)) | (1L << (ROW_COUNT - 840)) | (1L << (RPAD - 840)) | (1L << (RTRIM - 840)) | (1L << (SEC_TO_TIME - 840)) | (1L << (SESSION_USER - 840)) | (1L << (SHA - 840)) | (1L << (SHA1 - 840)) | (1L << (SHA2 - 840)) | (1L << (SCHEMA_NAME - 840)) | (1L << (SIGN - 840)) | (1L << (SIN - 840)) | (1L << (SLEEP - 840)) | (1L << (SOUNDEX - 840)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 840)) | (1L << (SQRT - 840)) | (1L << (SRID - 840)) | (1L << (STARTPOINT - 840)) | (1L << (STRCMP - 840)) | (1L << (STR_TO_DATE - 840)) | (1L << (ST_AREA - 840)) | (1L << (ST_ASBINARY - 840)) | (1L << (ST_ASTEXT - 840)) | (1L << (ST_ASWKB - 840)) | (1L << (ST_ASWKT - 840)) | (1L << (ST_BUFFER - 840)) | (1L << (ST_CENTROID - 840)) | (1L << (ST_CONTAINS - 840)) | (1L << (ST_CROSSES - 840)) | (1L << (ST_DIFFERENCE - 840)) | (1L << (ST_DIMENSION - 840)) | (1L << (ST_DISJOINT - 840)) | (1L << (ST_DISTANCE - 840)) | (1L << (ST_ENDPOINT - 840)) | (1L << (ST_ENVELOPE - 840)) | (1L << (ST_EQUALS - 840)) | (1L << (ST_EXTERIORRING - 840)) | (1L << (ST_GEOMCOLLFROMTEXT - 840)) | (1L << (ST_GEOMCOLLFROMTXT - 840)) | (1L << (ST_GEOMCOLLFROMWKB - 840)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 840)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 840)) | (1L << (ST_GEOMETRYFROMTEXT - 840)) | (1L << (ST_GEOMETRYFROMWKB - 840)) | (1L << (ST_GEOMETRYN - 840)) | (1L << (ST_GEOMETRYTYPE - 840)) | (1L << (ST_GEOMFROMTEXT - 840)) | (1L << (ST_GEOMFROMWKB - 840)) | (1L << (ST_INTERIORRINGN - 840)) | (1L << (ST_INTERSECTION - 840)) | (1L << (ST_INTERSECTS - 840)) | (1L << (ST_ISCLOSED - 840)) | (1L << (ST_ISEMPTY - 840)) | (1L << (ST_ISSIMPLE - 840)) | (1L << (ST_LINEFROMTEXT - 840)) | (1L << (ST_LINEFROMWKB - 840)) | (1L << (ST_LINESTRINGFROMTEXT - 840)) | (1L << (ST_LINESTRINGFROMWKB - 840)) | (1L << (ST_NUMGEOMETRIES - 840)))) != 0) || ((((_la - 904)) & ~0x3f) == 0 && ((1L << (_la - 904)) & ((1L << (ST_NUMINTERIORRING - 904)) | (1L << (ST_NUMINTERIORRINGS - 904)) | (1L << (ST_NUMPOINTS - 904)) | (1L << (ST_OVERLAPS - 904)) | (1L << (ST_POINTFROMTEXT - 904)) | (1L << (ST_POINTFROMWKB - 904)) | (1L << (ST_POINTN - 904)) | (1L << (ST_POLYFROMTEXT - 904)) | (1L << (ST_POLYFROMWKB - 904)) | (1L << (ST_POLYGONFROMTEXT - 904)) | (1L << (ST_POLYGONFROMWKB - 904)) | (1L << (ST_SRID - 904)) | (1L << (ST_STARTPOINT - 904)) | (1L << (ST_SYMDIFFERENCE - 904)) | (1L << (ST_TOUCHES - 904)) | (1L << (ST_UNION - 904)) | (1L << (ST_WITHIN - 904)) | (1L << (ST_X - 904)) | (1L << (ST_Y - 904)) | (1L << (SUBDATE - 904)) | (1L << (SUBSTRING_INDEX - 904)) | (1L << (SUBTIME - 904)) | (1L << (SYSTEM_USER - 904)) | (1L << (TAN - 904)) | (1L << (TIMEDIFF - 904)) | (1L << (TIMESTAMPADD - 904)) | (1L << (TIMESTAMPDIFF - 904)) | (1L << (TIME_FORMAT - 904)) | (1L << (TIME_TO_SEC - 904)) | (1L << (TOUCHES - 904)) | (1L << (TO_BASE64 - 904)) | (1L << (TO_DAYS - 904)) | (1L << (TO_SECONDS - 904)) | (1L << (UCASE - 904)) | (1L << (UNCOMPRESS - 904)) | (1L << (UNCOMPRESSED_LENGTH - 904)) | (1L << (UNHEX - 904)) | (1L << (UNIX_TIMESTAMP - 904)) | (1L << (UPDATEXML - 904)) | (1L << (UPPER - 904)) | (1L << (UUID - 904)) | (1L << (UUID_SHORT - 904)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 904)) | (1L << (VERSION - 904)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 904)) | (1L << (WEEKDAY - 904)) | (1L << (WEEKOFYEAR - 904)) | (1L << (WEIGHT_STRING - 904)) | (1L << (WITHIN - 904)) | (1L << (YEARWEEK - 904)) | (1L << (Y_FUNCTION - 904)) | (1L << (X_FUNCTION - 904)))) != 0) || ((((_la - 968)) & ~0x3f) == 0 && ((1L << (_la - 968)) & ((1L << (PLUS - 968)) | (1L << (MINUS - 968)) | (1L << (EXCLAMATION_SYMBOL - 968)) | (1L << (BIT_NOT_OP - 968)) | (1L << (LR_BRACKET - 968)) | (1L << (ZERO_DECIMAL - 968)) | (1L << (ONE_DECIMAL - 968)) | (1L << (TWO_DECIMAL - 968)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 968)) | (1L << (START_NATIONAL_STRING_LITERAL - 968)) | (1L << (STRING_LITERAL - 968)) | (1L << (DECIMAL_LITERAL - 968)) | (1L << (HEXADECIMAL_LITERAL - 968)) | (1L << (REAL_LITERAL - 968)) | (1L << (NULL_SPEC_LITERAL - 968)) | (1L << (BIT_STRING - 968)) | (1L << (STRING_CHARSET_NAME - 968)) | (1L << (ID - 968)) | (1L << (REVERSE_QUOTE_ID - 968)) | (1L << (LOCAL_ID - 968)) | (1L << (GLOBAL_ID - 968)))) != 0)) {
						{
						setState(3045);
						expressionsWithDefaults();
						}
					}

					setState(3048);
					match(RR_BRACKET);
					}
					}
					setState(3053);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatedElementContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatedElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdatedElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdatedElement(this);
		}
	}

	public final UpdatedElementContext updatedElement() throws RecognitionException {
		UpdatedElementContext _localctx = new UpdatedElementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_updatedElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3056);
			fullColumnName();
			setState(3057);
			match(EQUAL_SYMBOL);
			setState(3060);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DIAGNOSTICS:
			case EXISTS:
			case FALSE:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case NUMBER:
			case REPLACE:
			case RIGHT:
			case STACKED:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				setState(3058);
				expression(0);
				}
				break;
			case DEFAULT:
				{
				setState(3059);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAssignmentField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAssignmentField(this);
		}
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_assignmentField);
		try {
			setState(3064);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3062);
				uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3063);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockClause(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_lockClause);
		try {
			setState(3072);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3066);
				match(FOR);
				setState(3067);
				match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3068);
				match(LOCK);
				setState(3069);
				match(IN);
				setState(3070);
				match(SHARE);
				setState(3071);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleDeleteStatement(this);
		}
	}

	public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_singleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3074);
			match(DELETE);
			setState(3076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3075);
				((SingleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(3078);
				match(QUICK);
				}
			}

			setState(3082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3081);
				match(IGNORE);
				}
			}

			setState(3084);
			match(FROM);
			setState(3085);
			tableName();
			setState(3091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3086);
				match(PARTITION);
				setState(3087);
				match(LR_BRACKET);
				setState(3088);
				uidList();
				setState(3089);
				match(RR_BRACKET);
				}
			}

			setState(3095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3093);
				match(WHERE);
				setState(3094);
				expression(0);
				}
			}

			setState(3098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3097);
				orderByClause();
				}
			}

			setState(3102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3100);
				match(LIMIT);
				setState(3101);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public List<TerminalNode> DOT() { return getTokens(MySqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MySqlParser.DOT, i);
		}
		public List<TerminalNode> STAR() { return getTokens(MySqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(MySqlParser.STAR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleDeleteStatement(this);
		}
	}

	public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_multipleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3104);
			match(DELETE);
			setState(3106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3105);
				((MultipleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				setState(3108);
				match(QUICK);
				}
				break;
			}
			setState(3112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3111);
				match(IGNORE);
				}
			}

			setState(3153);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(3114);
				tableName();
				setState(3117);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3115);
					match(DOT);
					setState(3116);
					match(STAR);
					}
				}

				setState(3127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3119);
					match(COMMA);
					setState(3120);
					tableName();
					setState(3123);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3121);
						match(DOT);
						setState(3122);
						match(STAR);
						}
					}

					}
					}
					setState(3129);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3130);
				match(FROM);
				setState(3131);
				tableSources();
				}
				break;
			case FROM:
				{
				setState(3133);
				match(FROM);
				setState(3134);
				tableName();
				setState(3137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3135);
					match(DOT);
					setState(3136);
					match(STAR);
					}
				}

				setState(3147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3139);
					match(COMMA);
					setState(3140);
					tableName();
					setState(3143);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3141);
						match(DOT);
						setState(3142);
						match(STAR);
						}
					}

					}
					}
					setState(3149);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3150);
				match(USING);
				setState(3151);
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3155);
				match(WHERE);
				setState(3156);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerOpenStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerOpenStatement(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3159);
			match(HANDLER);
			setState(3160);
			tableName();
			setState(3161);
			match(OPEN);
			setState(3166);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				{
				setState(3163);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3162);
					match(AS);
					}
				}

				setState(3165);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadIndexStatementContext extends ParserRuleContext {
		public UidContext index;
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerReadIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerReadIndexStatement(this);
		}
	}

	public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_handlerReadIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3168);
			match(HANDLER);
			setState(3169);
			tableName();
			setState(3170);
			match(READ);
			setState(3171);
			((HandlerReadIndexStatementContext)_localctx).index = uid();
			setState(3178);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				setState(3172);
				comparisonOperator();
				setState(3173);
				match(LR_BRACKET);
				setState(3174);
				constants();
				setState(3175);
				match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				setState(3177);
				((HandlerReadIndexStatementContext)_localctx).moveOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((HandlerReadIndexStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3182);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3180);
				match(WHERE);
				setState(3181);
				expression(0);
				}
			}

			setState(3186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3184);
				match(LIMIT);
				setState(3185);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerReadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerReadStatement(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3188);
			match(HANDLER);
			setState(3189);
			tableName();
			setState(3190);
			match(READ);
			setState(3191);
			((HandlerReadStatementContext)_localctx).moveOrder = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				((HandlerReadStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3192);
				match(WHERE);
				setState(3193);
				expression(0);
				}
			}

			setState(3198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3196);
				match(LIMIT);
				setState(3197);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerCloseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerCloseStatement(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3200);
			match(HANDLER);
			setState(3201);
			tableName();
			setState(3202);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleUpdateStatement(this);
		}
	}

	public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_singleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3204);
			match(UPDATE);
			setState(3206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3205);
				((SingleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3208);
				match(IGNORE);
				}
			}

			setState(3211);
			tableName();
			setState(3216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (LEFT - 87)) | (1L << (NUMBER - 87)) | (1L << (RIGHT - 87)))) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (STACKED - 151)) | (1L << (DATE - 151)) | (1L << (TIME - 151)) | (1L << (TIMESTAMP - 151)) | (1L << (DATETIME - 151)) | (1L << (YEAR - 151)) | (1L << (TEXT - 151)) | (1L << (ENUM - 151)) | (1L << (SERIAL - 151)))) != 0) || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & ((1L << (COUNT - 228)) | (1L << (POSITION - 228)) | (1L << (ACCOUNT - 228)) | (1L << (ACTION - 228)) | (1L << (AFTER - 228)) | (1L << (AGGREGATE - 228)) | (1L << (ALGORITHM - 228)) | (1L << (ANY - 228)) | (1L << (AT - 228)) | (1L << (AUTHORS - 228)) | (1L << (AUTOCOMMIT - 228)) | (1L << (AUTOEXTEND_SIZE - 228)) | (1L << (AUTO_INCREMENT - 228)) | (1L << (AVG_ROW_LENGTH - 228)) | (1L << (BEGIN - 228)) | (1L << (BINLOG - 228)) | (1L << (BIT - 228)) | (1L << (BLOCK - 228)) | (1L << (BOOL - 228)) | (1L << (BOOLEAN - 228)) | (1L << (BTREE - 228)) | (1L << (CACHE - 228)) | (1L << (CASCADED - 228)) | (1L << (CHAIN - 228)) | (1L << (CHANGED - 228)) | (1L << (CHANNEL - 228)) | (1L << (CHECKSUM - 228)) | (1L << (PAGE_CHECKSUM - 228)) | (1L << (CIPHER - 228)) | (1L << (CLASS_ORIGIN - 228)) | (1L << (CLIENT - 228)) | (1L << (CLOSE - 228)) | (1L << (COALESCE - 228)) | (1L << (CODE - 228)) | (1L << (COLUMNS - 228)))) != 0) || ((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (COLUMN_FORMAT - 292)) | (1L << (COLUMN_NAME - 292)) | (1L << (COMMENT - 292)) | (1L << (COMMIT - 292)) | (1L << (COMPACT - 292)) | (1L << (COMPLETION - 292)) | (1L << (COMPRESSED - 292)) | (1L << (COMPRESSION - 292)) | (1L << (CONCURRENT - 292)) | (1L << (CONNECTION - 292)) | (1L << (CONSISTENT - 292)) | (1L << (CONSTRAINT_CATALOG - 292)) | (1L << (CONSTRAINT_SCHEMA - 292)) | (1L << (CONSTRAINT_NAME - 292)) | (1L << (CONTAINS - 292)) | (1L << (CONTEXT - 292)) | (1L << (CONTRIBUTORS - 292)) | (1L << (COPY - 292)) | (1L << (CPU - 292)) | (1L << (CURSOR_NAME - 292)) | (1L << (DATA - 292)) | (1L << (DATAFILE - 292)) | (1L << (DEALLOCATE - 292)) | (1L << (DEFAULT_AUTH - 292)) | (1L << (DEFINER - 292)) | (1L << (DELAY_KEY_WRITE - 292)) | (1L << (DES_KEY_FILE - 292)) | (1L << (DIRECTORY - 292)) | (1L << (DISABLE - 292)) | (1L << (DISCARD - 292)) | (1L << (DISK - 292)) | (1L << (DO - 292)) | (1L << (DUMPFILE - 292)) | (1L << (DUPLICATE - 292)) | (1L << (DYNAMIC - 292)) | (1L << (ENABLE - 292)) | (1L << (ENCRYPTION - 292)) | (1L << (END - 292)) | (1L << (ENDS - 292)) | (1L << (ENGINE - 292)) | (1L << (ENGINES - 292)) | (1L << (ERROR - 292)) | (1L << (ERRORS - 292)) | (1L << (ESCAPE - 292)) | (1L << (EVEN - 292)) | (1L << (EVENT - 292)) | (1L << (EVENTS - 292)) | (1L << (EVERY - 292)) | (1L << (EXCHANGE - 292)) | (1L << (EXCLUSIVE - 292)) | (1L << (EXPIRE - 292)) | (1L << (EXPORT - 292)) | (1L << (EXTENDED - 292)) | (1L << (EXTENT_SIZE - 292)) | (1L << (FAST - 292)) | (1L << (FAULTS - 292)) | (1L << (FIELDS - 292)) | (1L << (FILE_BLOCK_SIZE - 292)) | (1L << (FILTER - 292)) | (1L << (FIRST - 292)) | (1L << (FIXED - 292)) | (1L << (FLUSH - 292)) | (1L << (FOLLOWS - 292)) | (1L << (FOUND - 292)))) != 0) || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (FULL - 356)) | (1L << (FUNCTION - 356)) | (1L << (GENERAL - 356)) | (1L << (GLOBAL - 356)) | (1L << (GRANTS - 356)) | (1L << (GROUP_REPLICATION - 356)) | (1L << (HANDLER - 356)) | (1L << (HASH - 356)) | (1L << (HELP - 356)) | (1L << (HOST - 356)) | (1L << (HOSTS - 356)) | (1L << (IDENTIFIED - 356)) | (1L << (IGNORE_SERVER_IDS - 356)) | (1L << (IMPORT - 356)) | (1L << (INDEXES - 356)) | (1L << (INITIAL_SIZE - 356)) | (1L << (INPLACE - 356)) | (1L << (INSERT_METHOD - 356)) | (1L << (INSTALL - 356)) | (1L << (INSTANCE - 356)) | (1L << (INVISIBLE - 356)) | (1L << (INVOKER - 356)) | (1L << (IO - 356)) | (1L << (IO_THREAD - 356)) | (1L << (IPC - 356)) | (1L << (ISOLATION - 356)) | (1L << (ISSUER - 356)) | (1L << (JSON - 356)) | (1L << (KEY_BLOCK_SIZE - 356)) | (1L << (LANGUAGE - 356)) | (1L << (LAST - 356)) | (1L << (LEAVES - 356)) | (1L << (LESS - 356)) | (1L << (LEVEL - 356)) | (1L << (LIST - 356)) | (1L << (LOCAL - 356)) | (1L << (LOGFILE - 356)) | (1L << (LOGS - 356)) | (1L << (MASTER - 356)) | (1L << (MASTER_AUTO_POSITION - 356)) | (1L << (MASTER_CONNECT_RETRY - 356)) | (1L << (MASTER_DELAY - 356)) | (1L << (MASTER_HEARTBEAT_PERIOD - 356)) | (1L << (MASTER_HOST - 356)) | (1L << (MASTER_LOG_FILE - 356)) | (1L << (MASTER_LOG_POS - 356)) | (1L << (MASTER_PASSWORD - 356)) | (1L << (MASTER_PORT - 356)) | (1L << (MASTER_RETRY_COUNT - 356)) | (1L << (MASTER_SSL - 356)) | (1L << (MASTER_SSL_CA - 356)) | (1L << (MASTER_SSL_CAPATH - 356)) | (1L << (MASTER_SSL_CERT - 356)) | (1L << (MASTER_SSL_CIPHER - 356)) | (1L << (MASTER_SSL_CRL - 356)) | (1L << (MASTER_SSL_CRLPATH - 356)) | (1L << (MASTER_SSL_KEY - 356)) | (1L << (MASTER_TLS_VERSION - 356)) | (1L << (MASTER_USER - 356)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 356)) | (1L << (MAX_QUERIES_PER_HOUR - 356)) | (1L << (MAX_ROWS - 356)) | (1L << (MAX_SIZE - 356)) | (1L << (MAX_UPDATES_PER_HOUR - 356)))) != 0) || ((((_la - 420)) & ~0x3f) == 0 && ((1L << (_la - 420)) & ((1L << (MAX_USER_CONNECTIONS - 420)) | (1L << (MEDIUM - 420)) | (1L << (MERGE - 420)) | (1L << (MESSAGE_TEXT - 420)) | (1L << (MID - 420)) | (1L << (MIGRATE - 420)) | (1L << (MIN_ROWS - 420)) | (1L << (MODE - 420)) | (1L << (MODIFY - 420)) | (1L << (MUTEX - 420)) | (1L << (MYSQL - 420)) | (1L << (MYSQL_ERRNO - 420)) | (1L << (NAME - 420)) | (1L << (NAMES - 420)) | (1L << (NCHAR - 420)) | (1L << (NEVER - 420)) | (1L << (NEXT - 420)) | (1L << (NO - 420)) | (1L << (NODEGROUP - 420)) | (1L << (NONE - 420)) | (1L << (OFFLINE - 420)) | (1L << (OFFSET - 420)) | (1L << (OJ - 420)) | (1L << (OLD_PASSWORD - 420)) | (1L << (ONE - 420)) | (1L << (ONLINE - 420)) | (1L << (ONLY - 420)) | (1L << (OPEN - 420)) | (1L << (OPTIMIZER_COSTS - 420)) | (1L << (OPTIONS - 420)) | (1L << (OWNER - 420)) | (1L << (PACK_KEYS - 420)) | (1L << (PAGE - 420)) | (1L << (PARSER - 420)) | (1L << (PARTIAL - 420)) | (1L << (PARTITIONING - 420)) | (1L << (PARTITIONS - 420)) | (1L << (PASSWORD - 420)) | (1L << (PHASE - 420)) | (1L << (PLUGIN - 420)) | (1L << (PLUGIN_DIR - 420)) | (1L << (PLUGINS - 420)) | (1L << (PORT - 420)) | (1L << (PRECEDES - 420)) | (1L << (PREPARE - 420)) | (1L << (PRESERVE - 420)) | (1L << (PREV - 420)) | (1L << (PROCESSLIST - 420)) | (1L << (PROFILE - 420)) | (1L << (PROFILES - 420)) | (1L << (PROXY - 420)) | (1L << (QUERY - 420)) | (1L << (QUICK - 420)) | (1L << (REBUILD - 420)) | (1L << (RECOVER - 420)) | (1L << (REDO_BUFFER_SIZE - 420)) | (1L << (REDUNDANT - 420)) | (1L << (RELAY - 420)) | (1L << (RELAY_LOG_FILE - 420)) | (1L << (RELAY_LOG_POS - 420)) | (1L << (RELAYLOG - 420)) | (1L << (REMOVE - 420)) | (1L << (REORGANIZE - 420)) | (1L << (REPAIR - 420)))) != 0) || ((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & ((1L << (REPLICATE_DO_DB - 484)) | (1L << (REPLICATE_DO_TABLE - 484)) | (1L << (REPLICATE_IGNORE_DB - 484)) | (1L << (REPLICATE_IGNORE_TABLE - 484)) | (1L << (REPLICATE_REWRITE_DB - 484)) | (1L << (REPLICATE_WILD_DO_TABLE - 484)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 484)) | (1L << (REPLICATION - 484)) | (1L << (RESET - 484)) | (1L << (RESUME - 484)) | (1L << (RETURNED_SQLSTATE - 484)) | (1L << (RETURNS - 484)) | (1L << (ROLLBACK - 484)) | (1L << (ROLLUP - 484)) | (1L << (ROTATE - 484)) | (1L << (ROW - 484)) | (1L << (ROWS - 484)) | (1L << (ROW_FORMAT - 484)) | (1L << (SAVEPOINT - 484)) | (1L << (SCHEDULE - 484)) | (1L << (SECURITY - 484)) | (1L << (SERVER - 484)) | (1L << (SESSION - 484)) | (1L << (SHARE - 484)) | (1L << (SHARED - 484)) | (1L << (SIGNED - 484)) | (1L << (SIMPLE - 484)) | (1L << (SLAVE - 484)) | (1L << (SLOW - 484)) | (1L << (SNAPSHOT - 484)) | (1L << (SOCKET - 484)) | (1L << (SOME - 484)) | (1L << (SONAME - 484)) | (1L << (SOUNDS - 484)) | (1L << (SOURCE - 484)) | (1L << (SQL_AFTER_GTIDS - 484)) | (1L << (SQL_AFTER_MTS_GAPS - 484)) | (1L << (SQL_BEFORE_GTIDS - 484)) | (1L << (SQL_BUFFER_RESULT - 484)) | (1L << (SQL_CACHE - 484)) | (1L << (SQL_NO_CACHE - 484)) | (1L << (SQL_THREAD - 484)) | (1L << (START - 484)) | (1L << (STARTS - 484)) | (1L << (STATS_AUTO_RECALC - 484)) | (1L << (STATS_PERSISTENT - 484)) | (1L << (STATS_SAMPLE_PAGES - 484)) | (1L << (STATUS - 484)) | (1L << (STOP - 484)) | (1L << (STORAGE - 484)) | (1L << (STRING - 484)) | (1L << (SUBCLASS_ORIGIN - 484)) | (1L << (SUBJECT - 484)) | (1L << (SUBPARTITION - 484)) | (1L << (SUBPARTITIONS - 484)) | (1L << (SUSPEND - 484)) | (1L << (SWAPS - 484)) | (1L << (SWITCHES - 484)) | (1L << (TABLE_NAME - 484)) | (1L << (TABLESPACE - 484)) | (1L << (TEMPORARY - 484)) | (1L << (TEMPTABLE - 484)) | (1L << (THAN - 484)))) != 0) || ((((_la - 548)) & ~0x3f) == 0 && ((1L << (_la - 548)) & ((1L << (TRADITIONAL - 548)) | (1L << (TRANSACTION - 548)) | (1L << (TRIGGERS - 548)) | (1L << (TRUNCATE - 548)) | (1L << (UNDEFINED - 548)) | (1L << (UNDOFILE - 548)) | (1L << (UNDO_BUFFER_SIZE - 548)) | (1L << (UNINSTALL - 548)) | (1L << (UNKNOWN - 548)) | (1L << (UNTIL - 548)) | (1L << (UPGRADE - 548)) | (1L << (USER - 548)) | (1L << (USE_FRM - 548)) | (1L << (USER_RESOURCES - 548)) | (1L << (VALIDATION - 548)) | (1L << (VALUE - 548)) | (1L << (VARIABLES - 548)) | (1L << (VIEW - 548)) | (1L << (VISIBLE - 548)) | (1L << (WAIT - 548)) | (1L << (WARNINGS - 548)) | (1L << (WITHOUT - 548)) | (1L << (WORK - 548)) | (1L << (WRAPPER - 548)) | (1L << (X509 - 548)) | (1L << (XA - 548)) | (1L << (XML - 548)) | (1L << (INTERNAL - 548)) | (1L << (QUARTER - 548)) | (1L << (MONTH - 548)) | (1L << (DAY - 548)) | (1L << (HOUR - 548)) | (1L << (MINUTE - 548)) | (1L << (WEEK - 548)) | (1L << (SECOND - 548)) | (1L << (MICROSECOND - 548)) | (1L << (TABLES - 548)) | (1L << (ROUTINE - 548)) | (1L << (EXECUTE - 548)) | (1L << (FILE - 548)) | (1L << (PROCESS - 548)) | (1L << (RELOAD - 548)) | (1L << (SHUTDOWN - 548)) | (1L << (SUPER - 548)) | (1L << (PRIVILEGES - 548)) | (1L << (SESSION_VARIABLES_ADMIN - 548)) | (1L << (ARMSCII8 - 548)) | (1L << (ASCII - 548)) | (1L << (BIG5 - 548)) | (1L << (CP1250 - 548)) | (1L << (CP1251 - 548)) | (1L << (CP1256 - 548)) | (1L << (CP1257 - 548)) | (1L << (CP850 - 548)) | (1L << (CP852 - 548)) | (1L << (CP866 - 548)) | (1L << (CP932 - 548)) | (1L << (DEC8 - 548)) | (1L << (EUCJPMS - 548)))) != 0) || ((((_la - 612)) & ~0x3f) == 0 && ((1L << (_la - 612)) & ((1L << (EUCKR - 612)) | (1L << (GB2312 - 612)) | (1L << (GBK - 612)) | (1L << (GEOSTD8 - 612)) | (1L << (GREEK - 612)) | (1L << (HEBREW - 612)) | (1L << (HP8 - 612)) | (1L << (KEYBCS2 - 612)) | (1L << (KOI8R - 612)) | (1L << (KOI8U - 612)) | (1L << (LATIN1 - 612)) | (1L << (LATIN2 - 612)) | (1L << (LATIN5 - 612)) | (1L << (LATIN7 - 612)) | (1L << (MACCE - 612)) | (1L << (MACROMAN - 612)) | (1L << (SJIS - 612)) | (1L << (SWE7 - 612)) | (1L << (TIS620 - 612)) | (1L << (UCS2 - 612)) | (1L << (UJIS - 612)) | (1L << (UTF16 - 612)) | (1L << (UTF16LE - 612)) | (1L << (UTF32 - 612)) | (1L << (UTF8 - 612)) | (1L << (UTF8MB3 - 612)) | (1L << (UTF8MB4 - 612)) | (1L << (ARCHIVE - 612)) | (1L << (BLACKHOLE - 612)) | (1L << (CSV - 612)) | (1L << (FEDERATED - 612)) | (1L << (INNODB - 612)) | (1L << (MEMORY - 612)) | (1L << (MRG_MYISAM - 612)) | (1L << (MYISAM - 612)) | (1L << (NDB - 612)) | (1L << (NDBCLUSTER - 612)) | (1L << (PERFORMANCE_SCHEMA - 612)) | (1L << (TOKUDB - 612)) | (1L << (REPEATABLE - 612)) | (1L << (COMMITTED - 612)) | (1L << (UNCOMMITTED - 612)) | (1L << (SERIALIZABLE - 612)) | (1L << (GEOMETRYCOLLECTION - 612)) | (1L << (LINESTRING - 612)) | (1L << (MULTILINESTRING - 612)) | (1L << (MULTIPOINT - 612)) | (1L << (MULTIPOLYGON - 612)) | (1L << (POINT - 612)) | (1L << (POLYGON - 612)) | (1L << (ABS - 612)) | (1L << (ACOS - 612)) | (1L << (ADDDATE - 612)) | (1L << (ADDTIME - 612)) | (1L << (AES_DECRYPT - 612)) | (1L << (AES_ENCRYPT - 612)) | (1L << (AREA - 612)) | (1L << (ASBINARY - 612)) | (1L << (ASIN - 612)) | (1L << (ASTEXT - 612)) | (1L << (ASWKB - 612)) | (1L << (ASWKT - 612)))) != 0) || ((((_la - 676)) & ~0x3f) == 0 && ((1L << (_la - 676)) & ((1L << (ASYMMETRIC_DECRYPT - 676)) | (1L << (ASYMMETRIC_DERIVE - 676)) | (1L << (ASYMMETRIC_ENCRYPT - 676)) | (1L << (ASYMMETRIC_SIGN - 676)) | (1L << (ASYMMETRIC_VERIFY - 676)) | (1L << (ATAN - 676)) | (1L << (ATAN2 - 676)) | (1L << (BENCHMARK - 676)) | (1L << (BIN - 676)) | (1L << (BIT_COUNT - 676)) | (1L << (BIT_LENGTH - 676)) | (1L << (BUFFER - 676)) | (1L << (CATALOG_NAME - 676)) | (1L << (CEIL - 676)) | (1L << (CEILING - 676)) | (1L << (CENTROID - 676)) | (1L << (CHARACTER_LENGTH - 676)) | (1L << (CHARSET - 676)) | (1L << (CHAR_LENGTH - 676)) | (1L << (COERCIBILITY - 676)) | (1L << (COLLATION - 676)) | (1L << (COMPRESS - 676)) | (1L << (CONCAT - 676)) | (1L << (CONCAT_WS - 676)) | (1L << (CONNECTION_ID - 676)) | (1L << (CONV - 676)) | (1L << (CONVERT_TZ - 676)) | (1L << (COS - 676)) | (1L << (COT - 676)) | (1L << (CRC32 - 676)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 676)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 676)) | (1L << (CREATE_DH_PARAMETERS - 676)) | (1L << (CREATE_DIGEST - 676)) | (1L << (CROSSES - 676)) | (1L << (DATEDIFF - 676)) | (1L << (DATE_FORMAT - 676)) | (1L << (DAYNAME - 676)) | (1L << (DAYOFMONTH - 676)) | (1L << (DAYOFWEEK - 676)) | (1L << (DAYOFYEAR - 676)) | (1L << (DECODE - 676)) | (1L << (DEGREES - 676)) | (1L << (DES_DECRYPT - 676)) | (1L << (DES_ENCRYPT - 676)) | (1L << (DIMENSION - 676)) | (1L << (DISJOINT - 676)) | (1L << (ELT - 676)) | (1L << (ENCODE - 676)) | (1L << (ENCRYPT - 676)) | (1L << (ENDPOINT - 676)) | (1L << (ENVELOPE - 676)) | (1L << (EQUALS - 676)) | (1L << (EXP - 676)) | (1L << (EXPORT_SET - 676)) | (1L << (EXTERIORRING - 676)) | (1L << (EXTRACTVALUE - 676)) | (1L << (FIELD - 676)) | (1L << (FIND_IN_SET - 676)) | (1L << (FLOOR - 676)) | (1L << (FORMAT - 676)) | (1L << (FOUND_ROWS - 676)) | (1L << (FROM_BASE64 - 676)) | (1L << (FROM_DAYS - 676)))) != 0) || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & ((1L << (FROM_UNIXTIME - 740)) | (1L << (GEOMCOLLFROMTEXT - 740)) | (1L << (GEOMCOLLFROMWKB - 740)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 740)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 740)) | (1L << (GEOMETRYFROMTEXT - 740)) | (1L << (GEOMETRYFROMWKB - 740)) | (1L << (GEOMETRYN - 740)) | (1L << (GEOMETRYTYPE - 740)) | (1L << (GEOMFROMTEXT - 740)) | (1L << (GEOMFROMWKB - 740)) | (1L << (GET_FORMAT - 740)) | (1L << (GET_LOCK - 740)) | (1L << (GLENGTH - 740)) | (1L << (GREATEST - 740)) | (1L << (GTID_SUBSET - 740)) | (1L << (GTID_SUBTRACT - 740)) | (1L << (HEX - 740)) | (1L << (IFNULL - 740)) | (1L << (INET6_ATON - 740)) | (1L << (INET6_NTOA - 740)) | (1L << (INET_ATON - 740)) | (1L << (INET_NTOA - 740)) | (1L << (INSTR - 740)) | (1L << (INTERIORRINGN - 740)) | (1L << (INTERSECTS - 740)) | (1L << (ISCLOSED - 740)) | (1L << (ISEMPTY - 740)) | (1L << (ISNULL - 740)) | (1L << (ISSIMPLE - 740)) | (1L << (IS_FREE_LOCK - 740)) | (1L << (IS_IPV4 - 740)) | (1L << (IS_IPV4_COMPAT - 740)) | (1L << (IS_IPV4_MAPPED - 740)) | (1L << (IS_IPV6 - 740)) | (1L << (IS_USED_LOCK - 740)) | (1L << (LAST_INSERT_ID - 740)) | (1L << (LCASE - 740)) | (1L << (LEAST - 740)) | (1L << (LENGTH - 740)) | (1L << (LINEFROMTEXT - 740)) | (1L << (LINEFROMWKB - 740)) | (1L << (LINESTRINGFROMTEXT - 740)) | (1L << (LINESTRINGFROMWKB - 740)) | (1L << (LN - 740)) | (1L << (LOAD_FILE - 740)) | (1L << (LOCATE - 740)) | (1L << (LOG - 740)) | (1L << (LOG10 - 740)) | (1L << (LOG2 - 740)) | (1L << (LOWER - 740)) | (1L << (LPAD - 740)) | (1L << (LTRIM - 740)) | (1L << (MAKEDATE - 740)) | (1L << (MAKETIME - 740)) | (1L << (MAKE_SET - 740)) | (1L << (MASTER_POS_WAIT - 740)) | (1L << (MBRCONTAINS - 740)) | (1L << (MBRDISJOINT - 740)) | (1L << (MBREQUAL - 740)) | (1L << (MBRINTERSECTS - 740)) | (1L << (MBROVERLAPS - 740)) | (1L << (MBRTOUCHES - 740)) | (1L << (MBRWITHIN - 740)))) != 0) || ((((_la - 804)) & ~0x3f) == 0 && ((1L << (_la - 804)) & ((1L << (MD5 - 804)) | (1L << (MLINEFROMTEXT - 804)) | (1L << (MLINEFROMWKB - 804)) | (1L << (MONTHNAME - 804)) | (1L << (MPOINTFROMTEXT - 804)) | (1L << (MPOINTFROMWKB - 804)) | (1L << (MPOLYFROMTEXT - 804)) | (1L << (MPOLYFROMWKB - 804)) | (1L << (MULTILINESTRINGFROMTEXT - 804)) | (1L << (MULTILINESTRINGFROMWKB - 804)) | (1L << (MULTIPOINTFROMTEXT - 804)) | (1L << (MULTIPOINTFROMWKB - 804)) | (1L << (MULTIPOLYGONFROMTEXT - 804)) | (1L << (MULTIPOLYGONFROMWKB - 804)) | (1L << (NAME_CONST - 804)) | (1L << (NULLIF - 804)) | (1L << (NUMGEOMETRIES - 804)) | (1L << (NUMINTERIORRINGS - 804)) | (1L << (NUMPOINTS - 804)) | (1L << (OCT - 804)) | (1L << (OCTET_LENGTH - 804)) | (1L << (ORD - 804)) | (1L << (OVERLAPS - 804)) | (1L << (PERIOD_ADD - 804)) | (1L << (PERIOD_DIFF - 804)) | (1L << (PI - 804)) | (1L << (POINTFROMTEXT - 804)) | (1L << (POINTFROMWKB - 804)) | (1L << (POINTN - 804)) | (1L << (POLYFROMTEXT - 804)) | (1L << (POLYFROMWKB - 804)) | (1L << (POLYGONFROMTEXT - 804)) | (1L << (POLYGONFROMWKB - 804)) | (1L << (POW - 804)) | (1L << (POWER - 804)) | (1L << (QUOTE - 804)) | (1L << (RADIANS - 804)) | (1L << (RAND - 804)) | (1L << (RANDOM_BYTES - 804)) | (1L << (RELEASE_LOCK - 804)) | (1L << (REVERSE - 804)) | (1L << (ROUND - 804)) | (1L << (ROW_COUNT - 804)) | (1L << (RPAD - 804)) | (1L << (RTRIM - 804)) | (1L << (SEC_TO_TIME - 804)) | (1L << (SESSION_USER - 804)) | (1L << (SHA - 804)) | (1L << (SHA1 - 804)) | (1L << (SHA2 - 804)) | (1L << (SCHEMA_NAME - 804)) | (1L << (SIGN - 804)) | (1L << (SIN - 804)) | (1L << (SLEEP - 804)) | (1L << (SOUNDEX - 804)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 804)) | (1L << (SQRT - 804)) | (1L << (SRID - 804)) | (1L << (STARTPOINT - 804)) | (1L << (STRCMP - 804)) | (1L << (STR_TO_DATE - 804)) | (1L << (ST_AREA - 804)) | (1L << (ST_ASBINARY - 804)) | (1L << (ST_ASTEXT - 804)))) != 0) || ((((_la - 868)) & ~0x3f) == 0 && ((1L << (_la - 868)) & ((1L << (ST_ASWKB - 868)) | (1L << (ST_ASWKT - 868)) | (1L << (ST_BUFFER - 868)) | (1L << (ST_CENTROID - 868)) | (1L << (ST_CONTAINS - 868)) | (1L << (ST_CROSSES - 868)) | (1L << (ST_DIFFERENCE - 868)) | (1L << (ST_DIMENSION - 868)) | (1L << (ST_DISJOINT - 868)) | (1L << (ST_DISTANCE - 868)) | (1L << (ST_ENDPOINT - 868)) | (1L << (ST_ENVELOPE - 868)) | (1L << (ST_EQUALS - 868)) | (1L << (ST_EXTERIORRING - 868)) | (1L << (ST_GEOMCOLLFROMTEXT - 868)) | (1L << (ST_GEOMCOLLFROMTXT - 868)) | (1L << (ST_GEOMCOLLFROMWKB - 868)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 868)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 868)) | (1L << (ST_GEOMETRYFROMTEXT - 868)) | (1L << (ST_GEOMETRYFROMWKB - 868)) | (1L << (ST_GEOMETRYN - 868)) | (1L << (ST_GEOMETRYTYPE - 868)) | (1L << (ST_GEOMFROMTEXT - 868)) | (1L << (ST_GEOMFROMWKB - 868)) | (1L << (ST_INTERIORRINGN - 868)) | (1L << (ST_INTERSECTION - 868)) | (1L << (ST_INTERSECTS - 868)) | (1L << (ST_ISCLOSED - 868)) | (1L << (ST_ISEMPTY - 868)) | (1L << (ST_ISSIMPLE - 868)) | (1L << (ST_LINEFROMTEXT - 868)) | (1L << (ST_LINEFROMWKB - 868)) | (1L << (ST_LINESTRINGFROMTEXT - 868)) | (1L << (ST_LINESTRINGFROMWKB - 868)) | (1L << (ST_NUMGEOMETRIES - 868)) | (1L << (ST_NUMINTERIORRING - 868)) | (1L << (ST_NUMINTERIORRINGS - 868)) | (1L << (ST_NUMPOINTS - 868)) | (1L << (ST_OVERLAPS - 868)) | (1L << (ST_POINTFROMTEXT - 868)) | (1L << (ST_POINTFROMWKB - 868)) | (1L << (ST_POINTN - 868)) | (1L << (ST_POLYFROMTEXT - 868)) | (1L << (ST_POLYFROMWKB - 868)) | (1L << (ST_POLYGONFROMTEXT - 868)) | (1L << (ST_POLYGONFROMWKB - 868)) | (1L << (ST_SRID - 868)) | (1L << (ST_STARTPOINT - 868)) | (1L << (ST_SYMDIFFERENCE - 868)) | (1L << (ST_TOUCHES - 868)) | (1L << (ST_UNION - 868)) | (1L << (ST_WITHIN - 868)) | (1L << (ST_X - 868)) | (1L << (ST_Y - 868)) | (1L << (SUBDATE - 868)) | (1L << (SUBSTRING_INDEX - 868)) | (1L << (SUBTIME - 868)) | (1L << (SYSTEM_USER - 868)) | (1L << (TAN - 868)) | (1L << (TIMEDIFF - 868)) | (1L << (TIMESTAMPADD - 868)) | (1L << (TIMESTAMPDIFF - 868)) | (1L << (TIME_FORMAT - 868)))) != 0) || ((((_la - 932)) & ~0x3f) == 0 && ((1L << (_la - 932)) & ((1L << (TIME_TO_SEC - 932)) | (1L << (TOUCHES - 932)) | (1L << (TO_BASE64 - 932)) | (1L << (TO_DAYS - 932)) | (1L << (TO_SECONDS - 932)) | (1L << (UCASE - 932)) | (1L << (UNCOMPRESS - 932)) | (1L << (UNCOMPRESSED_LENGTH - 932)) | (1L << (UNHEX - 932)) | (1L << (UNIX_TIMESTAMP - 932)) | (1L << (UPDATEXML - 932)) | (1L << (UPPER - 932)) | (1L << (UUID - 932)) | (1L << (UUID_SHORT - 932)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 932)) | (1L << (VERSION - 932)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 932)) | (1L << (WEEKDAY - 932)) | (1L << (WEEKOFYEAR - 932)) | (1L << (WEIGHT_STRING - 932)) | (1L << (WITHIN - 932)) | (1L << (YEARWEEK - 932)) | (1L << (Y_FUNCTION - 932)) | (1L << (X_FUNCTION - 932)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 932)))) != 0) || ((((_la - 997)) & ~0x3f) == 0 && ((1L << (_la - 997)) & ((1L << (STRING_LITERAL - 997)) | (1L << (ID - 997)) | (1L << (REVERSE_QUOTE_ID - 997)))) != 0)) {
				{
				setState(3213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3212);
					match(AS);
					}
				}

				setState(3215);
				uid();
				}
			}

			setState(3218);
			match(SET);
			setState(3219);
			updatedElement();
			setState(3224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3220);
				match(COMMA);
				setState(3221);
				updatedElement();
				}
				}
				setState(3226);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3227);
				match(WHERE);
				setState(3228);
				expression(0);
				}
			}

			setState(3232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3231);
				orderByClause();
				}
			}

			setState(3235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3234);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleUpdateStatement(this);
		}
	}

	public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_multipleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3237);
			match(UPDATE);
			setState(3239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3238);
				((MultipleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3242);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3241);
				match(IGNORE);
				}
			}

			setState(3244);
			tableSources();
			setState(3245);
			match(SET);
			setState(3246);
			updatedElement();
			setState(3251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3247);
				match(COMMA);
				setState(3248);
				updatedElement();
				}
				}
				setState(3253);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3254);
				match(WHERE);
				setState(3255);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByClause(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3258);
			match(ORDER);
			setState(3259);
			match(BY);
			setState(3260);
			orderByExpression();
			setState(3265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3261);
				match(COMMA);
				setState(3262);
				orderByExpression();
				}
				}
				setState(3267);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByExpression(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3268);
			expression(0);
			setState(3270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				setState(3269);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSources(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_tableSources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3272);
			tableSource();
			setState(3277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3273);
				match(COMMA);
				setState(3274);
				tableSource();
				}
				}
				setState(3279);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceNested(this);
		}
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceBase(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_tableSource);
		int _la;
		try {
			int _alt;
			setState(3297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3280);
				tableSourceItem();
				setState(3284);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,461,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3281);
						joinPart();
						}
						} 
					}
					setState(3286);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,461,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3287);
				match(LR_BRACKET);
				setState(3288);
				tableSourceItem();
				setState(3292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 31)) & ~0x3f) == 0 && ((1L << (_la - 31)) & ((1L << (CROSS - 31)) | (1L << (INNER - 31)) | (1L << (JOIN - 31)) | (1L << (LEFT - 31)))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (NATURAL - 101)) | (1L << (RIGHT - 101)) | (1L << (STRAIGHT_JOIN - 101)))) != 0)) {
					{
					{
					setState(3289);
					joinPart();
					}
					}
					setState(3294);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3295);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryTableItem(this);
		}
	}
	public static class AtomTableItemContext extends TableSourceItemContext {
		public UidContext alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAtomTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAtomTableItem(this);
		}
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourcesItem(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(3339);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3299);
				tableName();
				setState(3305);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(3300);
					match(PARTITION);
					setState(3301);
					match(LR_BRACKET);
					setState(3302);
					uidList();
					setState(3303);
					match(RR_BRACKET);
					}
				}

				setState(3311);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
				case 1:
					{
					setState(3308);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3307);
						match(AS);
						}
					}

					setState(3310);
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				setState(3321);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
				case 1:
					{
					setState(3313);
					indexHint();
					setState(3318);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,467,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3314);
							match(COMMA);
							setState(3315);
							indexHint();
							}
							} 
						}
						setState(3320);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,467,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3328);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
				case 1:
					{
					setState(3323);
					selectStatement();
					}
					break;
				case 2:
					{
					setState(3324);
					match(LR_BRACKET);
					setState(3325);
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					setState(3326);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3330);
					match(AS);
					}
				}

				setState(3333);
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3335);
				match(LR_BRACKET);
				setState(3336);
				tableSources();
				setState(3337);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHint(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3341);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3342);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3343);
				match(FOR);
				setState(3344);
				indexHintType();
				}
			}

			setState(3347);
			match(LR_BRACKET);
			setState(3348);
			uidList();
			setState(3349);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHintType(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_indexHintType);
		try {
			setState(3356);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3351);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3352);
				match(ORDER);
				setState(3353);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3354);
				match(GROUP);
				setState(3355);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
	 
		public JoinPartContext() { }
		public void copyFrom(JoinPartContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InnerJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode INNER() { return getToken(MySqlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(MySqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInnerJoin(this);
		}
	}
	public static class NaturalJoinContext extends JoinPartContext {
		public TerminalNode NATURAL() { return getToken(MySqlParser.NATURAL, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNaturalJoin(this);
		}
	}
	public static class OuterJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOuterJoin(this);
		}
	}
	public static class StraightJoinContext extends JoinPartContext {
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StraightJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStraightJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStraightJoin(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_joinPart);
		int _la;
		try {
			setState(3402);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(3358);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3361);
				match(JOIN);
				setState(3362);
				tableSourceItem();
				setState(3370);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
				case 1:
					{
					setState(3363);
					match(ON);
					setState(3364);
					expression(0);
					}
					break;
				case 2:
					{
					setState(3365);
					match(USING);
					setState(3366);
					match(LR_BRACKET);
					setState(3367);
					uidList();
					setState(3368);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3372);
				match(STRAIGHT_JOIN);
				setState(3373);
				tableSourceItem();
				setState(3376);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
				case 1:
					{
					setState(3374);
					match(ON);
					setState(3375);
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3378);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3380);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3379);
					match(OUTER);
					}
				}

				setState(3382);
				match(JOIN);
				setState(3383);
				tableSourceItem();
				setState(3391);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(3384);
					match(ON);
					setState(3385);
					expression(0);
					}
					break;
				case USING:
					{
					setState(3386);
					match(USING);
					setState(3387);
					match(LR_BRACKET);
					setState(3388);
					uidList();
					setState(3389);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3393);
				match(NATURAL);
				setState(3398);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(3394);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3396);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(3395);
						match(OUTER);
						}
					}

					}
				}

				setState(3400);
				match(JOIN);
				setState(3401);
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpression(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_queryExpression);
		try {
			setState(3412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3404);
				match(LR_BRACKET);
				setState(3405);
				querySpecification();
				setState(3406);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3408);
				match(LR_BRACKET);
				setState(3409);
				queryExpression();
				setState(3410);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpressionNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpressionNointo(this);
		}
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_queryExpressionNointo);
		try {
			setState(3422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3414);
				match(LR_BRACKET);
				setState(3415);
				querySpecificationNointo();
				setState(3416);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3418);
				match(LR_BRACKET);
				setState(3419);
				queryExpressionNointo();
				setState(3420);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecification(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(3464);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3424);
				match(SELECT);
				setState(3428);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,484,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3425);
						selectSpec();
						}
						} 
					}
					setState(3430);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,484,_ctx);
				}
				setState(3431);
				selectElements();
				setState(3433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3432);
					selectIntoExpression();
					}
				}

				setState(3436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(3435);
					fromClause();
					}
				}

				setState(3439);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
				case 1:
					{
					setState(3438);
					orderByClause();
					}
					break;
				}
				setState(3442);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
				case 1:
					{
					setState(3441);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3444);
				match(SELECT);
				setState(3448);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,489,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3445);
						selectSpec();
						}
						} 
					}
					setState(3450);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,489,_ctx);
				}
				setState(3451);
				selectElements();
				setState(3453);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(3452);
					fromClause();
					}
				}

				setState(3456);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
				case 1:
					{
					setState(3455);
					orderByClause();
					}
					break;
				}
				setState(3459);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
				case 1:
					{
					setState(3458);
					limitClause();
					}
					break;
				}
				setState(3462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3461);
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecificationNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecificationNointo(this);
		}
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3466);
			match(SELECT);
			setState(3470);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,495,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3467);
					selectSpec();
					}
					} 
				}
				setState(3472);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,495,_ctx);
			}
			setState(3473);
			selectElements();
			setState(3475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3474);
				fromClause();
				}
			}

			setState(3478);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(3477);
				orderByClause();
				}
				break;
			}
			setState(3481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				setState(3480);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesis(this);
		}
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3483);
			match(UNION);
			setState(3485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3484);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3487);
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionStatement(this);
		}
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3489);
			match(UNION);
			setState(3491);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3490);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3495);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(3493);
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(3494);
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(MySqlParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(MySqlParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectSpec(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_selectSpec);
		int _la;
		try {
			setState(3505);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(3497);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3498);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3499);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3500);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3501);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3502);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3503);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(3504);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectElements(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_selectElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3509);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
				{
				setState(3507);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DIAGNOSTICS:
			case EXISTS:
			case FALSE:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case NUMBER:
			case REPLACE:
			case RIGHT:
			case STACKED:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				setState(3508);
				selectElement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3511);
				match(COMMA);
				setState(3512);
				selectElement();
				}
				}
				setState(3517);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectExpressionElementContext extends SelectElementContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectExpressionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectExpressionElement(this);
		}
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFunctionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFunctionElement(this);
		}
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectStarElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectStarElement(this);
		}
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectColumnElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectColumnElement(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_selectElement);
		int _la;
		try {
			setState(3547);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3518);
				fullId();
				setState(3519);
				match(DOT);
				setState(3520);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3522);
				fullColumnName();
				setState(3527);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
				case 1:
					{
					setState(3524);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3523);
						match(AS);
						}
					}

					setState(3526);
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3529);
				functionCall();
				setState(3534);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
				case 1:
					{
					setState(3531);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3530);
						match(AS);
						}
					}

					setState(3533);
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3538);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
				case 1:
					{
					setState(3536);
					match(LOCAL_ID);
					setState(3537);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(3540);
				expression(0);
				setState(3545);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
				case 1:
					{
					setState(3542);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3541);
						match(AS);
						}
					}

					setState(3544);
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoVariables(this);
		}
	}
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(MySqlParser.OUTFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoTextFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoTextFile(this);
		}
	}
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoDumpFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoDumpFile(this);
		}
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_selectIntoExpression);
		int _la;
		try {
			setState(3585);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3549);
				match(INTO);
				setState(3550);
				assignmentField();
				setState(3555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3551);
					match(COMMA);
					setState(3552);
					assignmentField();
					}
					}
					setState(3557);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3558);
				match(INTO);
				setState(3559);
				match(DUMPFILE);
				setState(3560);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3561);
				match(INTO);
				setState(3562);
				match(OUTFILE);
				setState(3563);
				((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(3567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(3564);
					match(CHARACTER);
					setState(3565);
					match(SET);
					setState(3566);
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(3575);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
				case 1:
					{
					setState(3569);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3571); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3570);
						selectFieldsInto();
						}
						}
						setState(3573); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				setState(3583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(3577);
					match(LINES);
					setState(3579); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3578);
						selectLinesInto();
						}
						}
						setState(3581); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENCLOSED() { return getToken(MySqlParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(MySqlParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(MySqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFieldsInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFieldsInto(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_selectFieldsInto);
		int _la;
		try {
			setState(3599);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3587);
				match(TERMINATED);
				setState(3588);
				match(BY);
				setState(3589);
				((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(3590);
					match(OPTIONALLY);
					}
				}

				setState(3593);
				match(ENCLOSED);
				setState(3594);
				match(BY);
				setState(3595);
				((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(3596);
				match(ESCAPED);
				setState(3597);
				match(BY);
				setState(3598);
				((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(MySqlParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectLinesInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectLinesInto(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_selectLinesInto);
		try {
			setState(3607);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3601);
				match(STARTING);
				setState(3602);
				match(BY);
				setState(3603);
				((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3604);
				match(TERMINATED);
				setState(3605);
				match(BY);
				setState(3606);
				((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public ExpressionContext havingExpr;
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public TerminalNode HAVING() { return getToken(MySqlParser.HAVING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFromClause(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3609);
			match(FROM);
			setState(3610);
			tableSources();
			setState(3613);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3611);
				match(WHERE);
				setState(3612);
				((FromClauseContext)_localctx).whereExpr = expression(0);
				}
			}

			setState(3629);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(3615);
				match(GROUP);
				setState(3616);
				match(BY);
				setState(3617);
				groupByItem();
				setState(3622);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3618);
					match(COMMA);
					setState(3619);
					groupByItem();
					}
					}
					setState(3624);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3627);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
				case 1:
					{
					setState(3625);
					match(WITH);
					setState(3626);
					match(ROLLUP);
					}
					break;
				}
				}
			}

			setState(3633);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(3631);
				match(HAVING);
				setState(3632);
				((FromClauseContext)_localctx).havingExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByItem(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_groupByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3635);
			expression(0);
			setState(3637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
			case 1:
				{
				setState(3636);
				((GroupByItemContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClause(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3639);
			match(LIMIT);
			setState(3650);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				{
				setState(3643);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
				case 1:
					{
					setState(3640);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(3641);
					match(COMMA);
					}
					break;
				}
				setState(3645);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(3646);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(3647);
				match(OFFSET);
				setState(3648);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClauseAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClauseAtom(this);
		}
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_limitClauseAtom);
		try {
			setState(3654);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3652);
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3653);
				mysqlVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartTransaction(this);
		}
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3656);
			match(START);
			setState(3657);
			match(TRANSACTION);
			setState(3666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ || _la==WITH) {
				{
				setState(3658);
				transactionMode();
				setState(3663);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3659);
					match(COMMA);
					setState(3660);
					transactionMode();
					}
					}
					setState(3665);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBeginWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBeginWork(this);
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3668);
			match(BEGIN);
			setState(3670);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3669);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(MySqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MySqlParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommitWork(this);
		}
	}

	public final CommitWorkContext commitWork() throws RecognitionException {
		CommitWorkContext _localctx = new CommitWorkContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_commitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3672);
			match(COMMIT);
			setState(3674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3673);
				match(WORK);
				}
			}

			setState(3681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3676);
				match(AND);
				setState(3678);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3677);
					((CommitWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3680);
				match(CHAIN);
				}
			}

			setState(3687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
			case 1:
				{
				setState(3684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3683);
					((CommitWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3686);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(MySqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MySqlParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRollbackWork(this);
		}
	}

	public final RollbackWorkContext rollbackWork() throws RecognitionException {
		RollbackWorkContext _localctx = new RollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_rollbackWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3689);
			match(ROLLBACK);
			setState(3691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3690);
				match(WORK);
				}
			}

			setState(3698);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3693);
				match(AND);
				setState(3695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3694);
					((RollbackWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3697);
				match(CHAIN);
				}
			}

			setState(3704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				{
				setState(3701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3700);
					((RollbackWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3703);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSavepointStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSavepointStatement(this);
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_savepointStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3706);
			match(SAVEPOINT);
			setState(3707);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackStatementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRollbackStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRollbackStatement(this);
		}
	}

	public final RollbackStatementContext rollbackStatement() throws RecognitionException {
		RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_rollbackStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3709);
			match(ROLLBACK);
			setState(3711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3710);
				match(WORK);
				}
			}

			setState(3713);
			match(TO);
			setState(3715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				{
				setState(3714);
				match(SAVEPOINT);
				}
				break;
			}
			setState(3717);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReleaseStatementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReleaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReleaseStatement(this);
		}
	}

	public final ReleaseStatementContext releaseStatement() throws RecognitionException {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_releaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3719);
			match(RELEASE);
			setState(3720);
			match(SAVEPOINT);
			setState(3721);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTablesContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public List<LockTableElementContext> lockTableElement() {
			return getRuleContexts(LockTableElementContext.class);
		}
		public LockTableElementContext lockTableElement(int i) {
			return getRuleContext(LockTableElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockTables(this);
		}
	}

	public final LockTablesContext lockTables() throws RecognitionException {
		LockTablesContext _localctx = new LockTablesContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_lockTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3723);
			match(LOCK);
			setState(3724);
			match(TABLES);
			setState(3725);
			lockTableElement();
			setState(3730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3726);
				match(COMMA);
				setState(3727);
				lockTableElement();
				}
				}
				setState(3732);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlockTablesContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(MySqlParser.UNLOCK, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnlockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnlockTables(this);
		}
	}

	public final UnlockTablesContext unlockTables() throws RecognitionException {
		UnlockTablesContext _localctx = new UnlockTablesContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_unlockTables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3733);
			match(UNLOCK);
			setState(3734);
			match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAutocommitStatementContext extends ParserRuleContext {
		public Token autocommitValue;
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutocommitStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetAutocommitStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetAutocommitStatement(this);
		}
	}

	public final SetAutocommitStatementContext setAutocommitStatement() throws RecognitionException {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_setAutocommitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3736);
			match(SET);
			setState(3737);
			match(AUTOCOMMIT);
			setState(3738);
			match(EQUAL_SYMBOL);
			setState(3739);
			((SetAutocommitStatementContext)_localctx).autocommitValue = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				((SetAutocommitStatementContext)_localctx).autocommitValue = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTransactionStatementContext extends ParserRuleContext {
		public Token transactionContext;
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public List<TransactionOptionContext> transactionOption() {
			return getRuleContexts(TransactionOptionContext.class);
		}
		public TransactionOptionContext transactionOption(int i) {
			return getRuleContext(TransactionOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetTransactionStatement(this);
		}
	}

	public final SetTransactionStatementContext setTransactionStatement() throws RecognitionException {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_setTransactionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3741);
			match(SET);
			setState(3743);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(3742);
				((SetTransactionStatementContext)_localctx).transactionContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					((SetTransactionStatementContext)_localctx).transactionContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3745);
			match(TRANSACTION);
			setState(3746);
			transactionOption();
			setState(3751);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3747);
				match(COMMA);
				setState(3748);
				transactionOption();
				}
				}
				setState(3753);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionMode(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_transactionMode);
		try {
			setState(3761);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3754);
				match(WITH);
				setState(3755);
				match(CONSISTENT);
				setState(3756);
				match(SNAPSHOT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3757);
				match(READ);
				setState(3758);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3759);
				match(READ);
				setState(3760);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTableElementContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public LockActionContext lockAction() {
			return getRuleContext(LockActionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockTableElement(this);
		}
	}

	public final LockTableElementContext lockTableElement() throws RecognitionException {
		LockTableElementContext _localctx = new LockTableElementContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_lockTableElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3763);
			tableName();
			setState(3768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (LEFT - 87)) | (1L << (NUMBER - 87)) | (1L << (RIGHT - 87)))) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (STACKED - 151)) | (1L << (DATE - 151)) | (1L << (TIME - 151)) | (1L << (TIMESTAMP - 151)) | (1L << (DATETIME - 151)) | (1L << (YEAR - 151)) | (1L << (TEXT - 151)) | (1L << (ENUM - 151)) | (1L << (SERIAL - 151)))) != 0) || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & ((1L << (COUNT - 228)) | (1L << (POSITION - 228)) | (1L << (ACCOUNT - 228)) | (1L << (ACTION - 228)) | (1L << (AFTER - 228)) | (1L << (AGGREGATE - 228)) | (1L << (ALGORITHM - 228)) | (1L << (ANY - 228)) | (1L << (AT - 228)) | (1L << (AUTHORS - 228)) | (1L << (AUTOCOMMIT - 228)) | (1L << (AUTOEXTEND_SIZE - 228)) | (1L << (AUTO_INCREMENT - 228)) | (1L << (AVG_ROW_LENGTH - 228)) | (1L << (BEGIN - 228)) | (1L << (BINLOG - 228)) | (1L << (BIT - 228)) | (1L << (BLOCK - 228)) | (1L << (BOOL - 228)) | (1L << (BOOLEAN - 228)) | (1L << (BTREE - 228)) | (1L << (CACHE - 228)) | (1L << (CASCADED - 228)) | (1L << (CHAIN - 228)) | (1L << (CHANGED - 228)) | (1L << (CHANNEL - 228)) | (1L << (CHECKSUM - 228)) | (1L << (PAGE_CHECKSUM - 228)) | (1L << (CIPHER - 228)) | (1L << (CLASS_ORIGIN - 228)) | (1L << (CLIENT - 228)) | (1L << (CLOSE - 228)) | (1L << (COALESCE - 228)) | (1L << (CODE - 228)) | (1L << (COLUMNS - 228)))) != 0) || ((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (COLUMN_FORMAT - 292)) | (1L << (COLUMN_NAME - 292)) | (1L << (COMMENT - 292)) | (1L << (COMMIT - 292)) | (1L << (COMPACT - 292)) | (1L << (COMPLETION - 292)) | (1L << (COMPRESSED - 292)) | (1L << (COMPRESSION - 292)) | (1L << (CONCURRENT - 292)) | (1L << (CONNECTION - 292)) | (1L << (CONSISTENT - 292)) | (1L << (CONSTRAINT_CATALOG - 292)) | (1L << (CONSTRAINT_SCHEMA - 292)) | (1L << (CONSTRAINT_NAME - 292)) | (1L << (CONTAINS - 292)) | (1L << (CONTEXT - 292)) | (1L << (CONTRIBUTORS - 292)) | (1L << (COPY - 292)) | (1L << (CPU - 292)) | (1L << (CURSOR_NAME - 292)) | (1L << (DATA - 292)) | (1L << (DATAFILE - 292)) | (1L << (DEALLOCATE - 292)) | (1L << (DEFAULT_AUTH - 292)) | (1L << (DEFINER - 292)) | (1L << (DELAY_KEY_WRITE - 292)) | (1L << (DES_KEY_FILE - 292)) | (1L << (DIRECTORY - 292)) | (1L << (DISABLE - 292)) | (1L << (DISCARD - 292)) | (1L << (DISK - 292)) | (1L << (DO - 292)) | (1L << (DUMPFILE - 292)) | (1L << (DUPLICATE - 292)) | (1L << (DYNAMIC - 292)) | (1L << (ENABLE - 292)) | (1L << (ENCRYPTION - 292)) | (1L << (END - 292)) | (1L << (ENDS - 292)) | (1L << (ENGINE - 292)) | (1L << (ENGINES - 292)) | (1L << (ERROR - 292)) | (1L << (ERRORS - 292)) | (1L << (ESCAPE - 292)) | (1L << (EVEN - 292)) | (1L << (EVENT - 292)) | (1L << (EVENTS - 292)) | (1L << (EVERY - 292)) | (1L << (EXCHANGE - 292)) | (1L << (EXCLUSIVE - 292)) | (1L << (EXPIRE - 292)) | (1L << (EXPORT - 292)) | (1L << (EXTENDED - 292)) | (1L << (EXTENT_SIZE - 292)) | (1L << (FAST - 292)) | (1L << (FAULTS - 292)) | (1L << (FIELDS - 292)) | (1L << (FILE_BLOCK_SIZE - 292)) | (1L << (FILTER - 292)) | (1L << (FIRST - 292)) | (1L << (FIXED - 292)) | (1L << (FLUSH - 292)) | (1L << (FOLLOWS - 292)) | (1L << (FOUND - 292)))) != 0) || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (FULL - 356)) | (1L << (FUNCTION - 356)) | (1L << (GENERAL - 356)) | (1L << (GLOBAL - 356)) | (1L << (GRANTS - 356)) | (1L << (GROUP_REPLICATION - 356)) | (1L << (HANDLER - 356)) | (1L << (HASH - 356)) | (1L << (HELP - 356)) | (1L << (HOST - 356)) | (1L << (HOSTS - 356)) | (1L << (IDENTIFIED - 356)) | (1L << (IGNORE_SERVER_IDS - 356)) | (1L << (IMPORT - 356)) | (1L << (INDEXES - 356)) | (1L << (INITIAL_SIZE - 356)) | (1L << (INPLACE - 356)) | (1L << (INSERT_METHOD - 356)) | (1L << (INSTALL - 356)) | (1L << (INSTANCE - 356)) | (1L << (INVISIBLE - 356)) | (1L << (INVOKER - 356)) | (1L << (IO - 356)) | (1L << (IO_THREAD - 356)) | (1L << (IPC - 356)) | (1L << (ISOLATION - 356)) | (1L << (ISSUER - 356)) | (1L << (JSON - 356)) | (1L << (KEY_BLOCK_SIZE - 356)) | (1L << (LANGUAGE - 356)) | (1L << (LAST - 356)) | (1L << (LEAVES - 356)) | (1L << (LESS - 356)) | (1L << (LEVEL - 356)) | (1L << (LIST - 356)) | (1L << (LOCAL - 356)) | (1L << (LOGFILE - 356)) | (1L << (LOGS - 356)) | (1L << (MASTER - 356)) | (1L << (MASTER_AUTO_POSITION - 356)) | (1L << (MASTER_CONNECT_RETRY - 356)) | (1L << (MASTER_DELAY - 356)) | (1L << (MASTER_HEARTBEAT_PERIOD - 356)) | (1L << (MASTER_HOST - 356)) | (1L << (MASTER_LOG_FILE - 356)) | (1L << (MASTER_LOG_POS - 356)) | (1L << (MASTER_PASSWORD - 356)) | (1L << (MASTER_PORT - 356)) | (1L << (MASTER_RETRY_COUNT - 356)) | (1L << (MASTER_SSL - 356)) | (1L << (MASTER_SSL_CA - 356)) | (1L << (MASTER_SSL_CAPATH - 356)) | (1L << (MASTER_SSL_CERT - 356)) | (1L << (MASTER_SSL_CIPHER - 356)) | (1L << (MASTER_SSL_CRL - 356)) | (1L << (MASTER_SSL_CRLPATH - 356)) | (1L << (MASTER_SSL_KEY - 356)) | (1L << (MASTER_TLS_VERSION - 356)) | (1L << (MASTER_USER - 356)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 356)) | (1L << (MAX_QUERIES_PER_HOUR - 356)) | (1L << (MAX_ROWS - 356)) | (1L << (MAX_SIZE - 356)) | (1L << (MAX_UPDATES_PER_HOUR - 356)))) != 0) || ((((_la - 420)) & ~0x3f) == 0 && ((1L << (_la - 420)) & ((1L << (MAX_USER_CONNECTIONS - 420)) | (1L << (MEDIUM - 420)) | (1L << (MERGE - 420)) | (1L << (MESSAGE_TEXT - 420)) | (1L << (MID - 420)) | (1L << (MIGRATE - 420)) | (1L << (MIN_ROWS - 420)) | (1L << (MODE - 420)) | (1L << (MODIFY - 420)) | (1L << (MUTEX - 420)) | (1L << (MYSQL - 420)) | (1L << (MYSQL_ERRNO - 420)) | (1L << (NAME - 420)) | (1L << (NAMES - 420)) | (1L << (NCHAR - 420)) | (1L << (NEVER - 420)) | (1L << (NEXT - 420)) | (1L << (NO - 420)) | (1L << (NODEGROUP - 420)) | (1L << (NONE - 420)) | (1L << (OFFLINE - 420)) | (1L << (OFFSET - 420)) | (1L << (OJ - 420)) | (1L << (OLD_PASSWORD - 420)) | (1L << (ONE - 420)) | (1L << (ONLINE - 420)) | (1L << (ONLY - 420)) | (1L << (OPEN - 420)) | (1L << (OPTIMIZER_COSTS - 420)) | (1L << (OPTIONS - 420)) | (1L << (OWNER - 420)) | (1L << (PACK_KEYS - 420)) | (1L << (PAGE - 420)) | (1L << (PARSER - 420)) | (1L << (PARTIAL - 420)) | (1L << (PARTITIONING - 420)) | (1L << (PARTITIONS - 420)) | (1L << (PASSWORD - 420)) | (1L << (PHASE - 420)) | (1L << (PLUGIN - 420)) | (1L << (PLUGIN_DIR - 420)) | (1L << (PLUGINS - 420)) | (1L << (PORT - 420)) | (1L << (PRECEDES - 420)) | (1L << (PREPARE - 420)) | (1L << (PRESERVE - 420)) | (1L << (PREV - 420)) | (1L << (PROCESSLIST - 420)) | (1L << (PROFILE - 420)) | (1L << (PROFILES - 420)) | (1L << (PROXY - 420)) | (1L << (QUERY - 420)) | (1L << (QUICK - 420)) | (1L << (REBUILD - 420)) | (1L << (RECOVER - 420)) | (1L << (REDO_BUFFER_SIZE - 420)) | (1L << (REDUNDANT - 420)) | (1L << (RELAY - 420)) | (1L << (RELAY_LOG_FILE - 420)) | (1L << (RELAY_LOG_POS - 420)) | (1L << (RELAYLOG - 420)) | (1L << (REMOVE - 420)) | (1L << (REORGANIZE - 420)) | (1L << (REPAIR - 420)))) != 0) || ((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & ((1L << (REPLICATE_DO_DB - 484)) | (1L << (REPLICATE_DO_TABLE - 484)) | (1L << (REPLICATE_IGNORE_DB - 484)) | (1L << (REPLICATE_IGNORE_TABLE - 484)) | (1L << (REPLICATE_REWRITE_DB - 484)) | (1L << (REPLICATE_WILD_DO_TABLE - 484)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 484)) | (1L << (REPLICATION - 484)) | (1L << (RESET - 484)) | (1L << (RESUME - 484)) | (1L << (RETURNED_SQLSTATE - 484)) | (1L << (RETURNS - 484)) | (1L << (ROLLBACK - 484)) | (1L << (ROLLUP - 484)) | (1L << (ROTATE - 484)) | (1L << (ROW - 484)) | (1L << (ROWS - 484)) | (1L << (ROW_FORMAT - 484)) | (1L << (SAVEPOINT - 484)) | (1L << (SCHEDULE - 484)) | (1L << (SECURITY - 484)) | (1L << (SERVER - 484)) | (1L << (SESSION - 484)) | (1L << (SHARE - 484)) | (1L << (SHARED - 484)) | (1L << (SIGNED - 484)) | (1L << (SIMPLE - 484)) | (1L << (SLAVE - 484)) | (1L << (SLOW - 484)) | (1L << (SNAPSHOT - 484)) | (1L << (SOCKET - 484)) | (1L << (SOME - 484)) | (1L << (SONAME - 484)) | (1L << (SOUNDS - 484)) | (1L << (SOURCE - 484)) | (1L << (SQL_AFTER_GTIDS - 484)) | (1L << (SQL_AFTER_MTS_GAPS - 484)) | (1L << (SQL_BEFORE_GTIDS - 484)) | (1L << (SQL_BUFFER_RESULT - 484)) | (1L << (SQL_CACHE - 484)) | (1L << (SQL_NO_CACHE - 484)) | (1L << (SQL_THREAD - 484)) | (1L << (START - 484)) | (1L << (STARTS - 484)) | (1L << (STATS_AUTO_RECALC - 484)) | (1L << (STATS_PERSISTENT - 484)) | (1L << (STATS_SAMPLE_PAGES - 484)) | (1L << (STATUS - 484)) | (1L << (STOP - 484)) | (1L << (STORAGE - 484)) | (1L << (STRING - 484)) | (1L << (SUBCLASS_ORIGIN - 484)) | (1L << (SUBJECT - 484)) | (1L << (SUBPARTITION - 484)) | (1L << (SUBPARTITIONS - 484)) | (1L << (SUSPEND - 484)) | (1L << (SWAPS - 484)) | (1L << (SWITCHES - 484)) | (1L << (TABLE_NAME - 484)) | (1L << (TABLESPACE - 484)) | (1L << (TEMPORARY - 484)) | (1L << (TEMPTABLE - 484)) | (1L << (THAN - 484)))) != 0) || ((((_la - 548)) & ~0x3f) == 0 && ((1L << (_la - 548)) & ((1L << (TRADITIONAL - 548)) | (1L << (TRANSACTION - 548)) | (1L << (TRIGGERS - 548)) | (1L << (TRUNCATE - 548)) | (1L << (UNDEFINED - 548)) | (1L << (UNDOFILE - 548)) | (1L << (UNDO_BUFFER_SIZE - 548)) | (1L << (UNINSTALL - 548)) | (1L << (UNKNOWN - 548)) | (1L << (UNTIL - 548)) | (1L << (UPGRADE - 548)) | (1L << (USER - 548)) | (1L << (USE_FRM - 548)) | (1L << (USER_RESOURCES - 548)) | (1L << (VALIDATION - 548)) | (1L << (VALUE - 548)) | (1L << (VARIABLES - 548)) | (1L << (VIEW - 548)) | (1L << (VISIBLE - 548)) | (1L << (WAIT - 548)) | (1L << (WARNINGS - 548)) | (1L << (WITHOUT - 548)) | (1L << (WORK - 548)) | (1L << (WRAPPER - 548)) | (1L << (X509 - 548)) | (1L << (XA - 548)) | (1L << (XML - 548)) | (1L << (INTERNAL - 548)) | (1L << (QUARTER - 548)) | (1L << (MONTH - 548)) | (1L << (DAY - 548)) | (1L << (HOUR - 548)) | (1L << (MINUTE - 548)) | (1L << (WEEK - 548)) | (1L << (SECOND - 548)) | (1L << (MICROSECOND - 548)) | (1L << (TABLES - 548)) | (1L << (ROUTINE - 548)) | (1L << (EXECUTE - 548)) | (1L << (FILE - 548)) | (1L << (PROCESS - 548)) | (1L << (RELOAD - 548)) | (1L << (SHUTDOWN - 548)) | (1L << (SUPER - 548)) | (1L << (PRIVILEGES - 548)) | (1L << (SESSION_VARIABLES_ADMIN - 548)) | (1L << (ARMSCII8 - 548)) | (1L << (ASCII - 548)) | (1L << (BIG5 - 548)) | (1L << (CP1250 - 548)) | (1L << (CP1251 - 548)) | (1L << (CP1256 - 548)) | (1L << (CP1257 - 548)) | (1L << (CP850 - 548)) | (1L << (CP852 - 548)) | (1L << (CP866 - 548)) | (1L << (CP932 - 548)) | (1L << (DEC8 - 548)) | (1L << (EUCJPMS - 548)))) != 0) || ((((_la - 612)) & ~0x3f) == 0 && ((1L << (_la - 612)) & ((1L << (EUCKR - 612)) | (1L << (GB2312 - 612)) | (1L << (GBK - 612)) | (1L << (GEOSTD8 - 612)) | (1L << (GREEK - 612)) | (1L << (HEBREW - 612)) | (1L << (HP8 - 612)) | (1L << (KEYBCS2 - 612)) | (1L << (KOI8R - 612)) | (1L << (KOI8U - 612)) | (1L << (LATIN1 - 612)) | (1L << (LATIN2 - 612)) | (1L << (LATIN5 - 612)) | (1L << (LATIN7 - 612)) | (1L << (MACCE - 612)) | (1L << (MACROMAN - 612)) | (1L << (SJIS - 612)) | (1L << (SWE7 - 612)) | (1L << (TIS620 - 612)) | (1L << (UCS2 - 612)) | (1L << (UJIS - 612)) | (1L << (UTF16 - 612)) | (1L << (UTF16LE - 612)) | (1L << (UTF32 - 612)) | (1L << (UTF8 - 612)) | (1L << (UTF8MB3 - 612)) | (1L << (UTF8MB4 - 612)) | (1L << (ARCHIVE - 612)) | (1L << (BLACKHOLE - 612)) | (1L << (CSV - 612)) | (1L << (FEDERATED - 612)) | (1L << (INNODB - 612)) | (1L << (MEMORY - 612)) | (1L << (MRG_MYISAM - 612)) | (1L << (MYISAM - 612)) | (1L << (NDB - 612)) | (1L << (NDBCLUSTER - 612)) | (1L << (PERFORMANCE_SCHEMA - 612)) | (1L << (TOKUDB - 612)) | (1L << (REPEATABLE - 612)) | (1L << (COMMITTED - 612)) | (1L << (UNCOMMITTED - 612)) | (1L << (SERIALIZABLE - 612)) | (1L << (GEOMETRYCOLLECTION - 612)) | (1L << (LINESTRING - 612)) | (1L << (MULTILINESTRING - 612)) | (1L << (MULTIPOINT - 612)) | (1L << (MULTIPOLYGON - 612)) | (1L << (POINT - 612)) | (1L << (POLYGON - 612)) | (1L << (ABS - 612)) | (1L << (ACOS - 612)) | (1L << (ADDDATE - 612)) | (1L << (ADDTIME - 612)) | (1L << (AES_DECRYPT - 612)) | (1L << (AES_ENCRYPT - 612)) | (1L << (AREA - 612)) | (1L << (ASBINARY - 612)) | (1L << (ASIN - 612)) | (1L << (ASTEXT - 612)) | (1L << (ASWKB - 612)) | (1L << (ASWKT - 612)))) != 0) || ((((_la - 676)) & ~0x3f) == 0 && ((1L << (_la - 676)) & ((1L << (ASYMMETRIC_DECRYPT - 676)) | (1L << (ASYMMETRIC_DERIVE - 676)) | (1L << (ASYMMETRIC_ENCRYPT - 676)) | (1L << (ASYMMETRIC_SIGN - 676)) | (1L << (ASYMMETRIC_VERIFY - 676)) | (1L << (ATAN - 676)) | (1L << (ATAN2 - 676)) | (1L << (BENCHMARK - 676)) | (1L << (BIN - 676)) | (1L << (BIT_COUNT - 676)) | (1L << (BIT_LENGTH - 676)) | (1L << (BUFFER - 676)) | (1L << (CATALOG_NAME - 676)) | (1L << (CEIL - 676)) | (1L << (CEILING - 676)) | (1L << (CENTROID - 676)) | (1L << (CHARACTER_LENGTH - 676)) | (1L << (CHARSET - 676)) | (1L << (CHAR_LENGTH - 676)) | (1L << (COERCIBILITY - 676)) | (1L << (COLLATION - 676)) | (1L << (COMPRESS - 676)) | (1L << (CONCAT - 676)) | (1L << (CONCAT_WS - 676)) | (1L << (CONNECTION_ID - 676)) | (1L << (CONV - 676)) | (1L << (CONVERT_TZ - 676)) | (1L << (COS - 676)) | (1L << (COT - 676)) | (1L << (CRC32 - 676)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 676)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 676)) | (1L << (CREATE_DH_PARAMETERS - 676)) | (1L << (CREATE_DIGEST - 676)) | (1L << (CROSSES - 676)) | (1L << (DATEDIFF - 676)) | (1L << (DATE_FORMAT - 676)) | (1L << (DAYNAME - 676)) | (1L << (DAYOFMONTH - 676)) | (1L << (DAYOFWEEK - 676)) | (1L << (DAYOFYEAR - 676)) | (1L << (DECODE - 676)) | (1L << (DEGREES - 676)) | (1L << (DES_DECRYPT - 676)) | (1L << (DES_ENCRYPT - 676)) | (1L << (DIMENSION - 676)) | (1L << (DISJOINT - 676)) | (1L << (ELT - 676)) | (1L << (ENCODE - 676)) | (1L << (ENCRYPT - 676)) | (1L << (ENDPOINT - 676)) | (1L << (ENVELOPE - 676)) | (1L << (EQUALS - 676)) | (1L << (EXP - 676)) | (1L << (EXPORT_SET - 676)) | (1L << (EXTERIORRING - 676)) | (1L << (EXTRACTVALUE - 676)) | (1L << (FIELD - 676)) | (1L << (FIND_IN_SET - 676)) | (1L << (FLOOR - 676)) | (1L << (FORMAT - 676)) | (1L << (FOUND_ROWS - 676)) | (1L << (FROM_BASE64 - 676)) | (1L << (FROM_DAYS - 676)))) != 0) || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & ((1L << (FROM_UNIXTIME - 740)) | (1L << (GEOMCOLLFROMTEXT - 740)) | (1L << (GEOMCOLLFROMWKB - 740)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 740)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 740)) | (1L << (GEOMETRYFROMTEXT - 740)) | (1L << (GEOMETRYFROMWKB - 740)) | (1L << (GEOMETRYN - 740)) | (1L << (GEOMETRYTYPE - 740)) | (1L << (GEOMFROMTEXT - 740)) | (1L << (GEOMFROMWKB - 740)) | (1L << (GET_FORMAT - 740)) | (1L << (GET_LOCK - 740)) | (1L << (GLENGTH - 740)) | (1L << (GREATEST - 740)) | (1L << (GTID_SUBSET - 740)) | (1L << (GTID_SUBTRACT - 740)) | (1L << (HEX - 740)) | (1L << (IFNULL - 740)) | (1L << (INET6_ATON - 740)) | (1L << (INET6_NTOA - 740)) | (1L << (INET_ATON - 740)) | (1L << (INET_NTOA - 740)) | (1L << (INSTR - 740)) | (1L << (INTERIORRINGN - 740)) | (1L << (INTERSECTS - 740)) | (1L << (ISCLOSED - 740)) | (1L << (ISEMPTY - 740)) | (1L << (ISNULL - 740)) | (1L << (ISSIMPLE - 740)) | (1L << (IS_FREE_LOCK - 740)) | (1L << (IS_IPV4 - 740)) | (1L << (IS_IPV4_COMPAT - 740)) | (1L << (IS_IPV4_MAPPED - 740)) | (1L << (IS_IPV6 - 740)) | (1L << (IS_USED_LOCK - 740)) | (1L << (LAST_INSERT_ID - 740)) | (1L << (LCASE - 740)) | (1L << (LEAST - 740)) | (1L << (LENGTH - 740)) | (1L << (LINEFROMTEXT - 740)) | (1L << (LINEFROMWKB - 740)) | (1L << (LINESTRINGFROMTEXT - 740)) | (1L << (LINESTRINGFROMWKB - 740)) | (1L << (LN - 740)) | (1L << (LOAD_FILE - 740)) | (1L << (LOCATE - 740)) | (1L << (LOG - 740)) | (1L << (LOG10 - 740)) | (1L << (LOG2 - 740)) | (1L << (LOWER - 740)) | (1L << (LPAD - 740)) | (1L << (LTRIM - 740)) | (1L << (MAKEDATE - 740)) | (1L << (MAKETIME - 740)) | (1L << (MAKE_SET - 740)) | (1L << (MASTER_POS_WAIT - 740)) | (1L << (MBRCONTAINS - 740)) | (1L << (MBRDISJOINT - 740)) | (1L << (MBREQUAL - 740)) | (1L << (MBRINTERSECTS - 740)) | (1L << (MBROVERLAPS - 740)) | (1L << (MBRTOUCHES - 740)) | (1L << (MBRWITHIN - 740)))) != 0) || ((((_la - 804)) & ~0x3f) == 0 && ((1L << (_la - 804)) & ((1L << (MD5 - 804)) | (1L << (MLINEFROMTEXT - 804)) | (1L << (MLINEFROMWKB - 804)) | (1L << (MONTHNAME - 804)) | (1L << (MPOINTFROMTEXT - 804)) | (1L << (MPOINTFROMWKB - 804)) | (1L << (MPOLYFROMTEXT - 804)) | (1L << (MPOLYFROMWKB - 804)) | (1L << (MULTILINESTRINGFROMTEXT - 804)) | (1L << (MULTILINESTRINGFROMWKB - 804)) | (1L << (MULTIPOINTFROMTEXT - 804)) | (1L << (MULTIPOINTFROMWKB - 804)) | (1L << (MULTIPOLYGONFROMTEXT - 804)) | (1L << (MULTIPOLYGONFROMWKB - 804)) | (1L << (NAME_CONST - 804)) | (1L << (NULLIF - 804)) | (1L << (NUMGEOMETRIES - 804)) | (1L << (NUMINTERIORRINGS - 804)) | (1L << (NUMPOINTS - 804)) | (1L << (OCT - 804)) | (1L << (OCTET_LENGTH - 804)) | (1L << (ORD - 804)) | (1L << (OVERLAPS - 804)) | (1L << (PERIOD_ADD - 804)) | (1L << (PERIOD_DIFF - 804)) | (1L << (PI - 804)) | (1L << (POINTFROMTEXT - 804)) | (1L << (POINTFROMWKB - 804)) | (1L << (POINTN - 804)) | (1L << (POLYFROMTEXT - 804)) | (1L << (POLYFROMWKB - 804)) | (1L << (POLYGONFROMTEXT - 804)) | (1L << (POLYGONFROMWKB - 804)) | (1L << (POW - 804)) | (1L << (POWER - 804)) | (1L << (QUOTE - 804)) | (1L << (RADIANS - 804)) | (1L << (RAND - 804)) | (1L << (RANDOM_BYTES - 804)) | (1L << (RELEASE_LOCK - 804)) | (1L << (REVERSE - 804)) | (1L << (ROUND - 804)) | (1L << (ROW_COUNT - 804)) | (1L << (RPAD - 804)) | (1L << (RTRIM - 804)) | (1L << (SEC_TO_TIME - 804)) | (1L << (SESSION_USER - 804)) | (1L << (SHA - 804)) | (1L << (SHA1 - 804)) | (1L << (SHA2 - 804)) | (1L << (SCHEMA_NAME - 804)) | (1L << (SIGN - 804)) | (1L << (SIN - 804)) | (1L << (SLEEP - 804)) | (1L << (SOUNDEX - 804)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 804)) | (1L << (SQRT - 804)) | (1L << (SRID - 804)) | (1L << (STARTPOINT - 804)) | (1L << (STRCMP - 804)) | (1L << (STR_TO_DATE - 804)) | (1L << (ST_AREA - 804)) | (1L << (ST_ASBINARY - 804)) | (1L << (ST_ASTEXT - 804)))) != 0) || ((((_la - 868)) & ~0x3f) == 0 && ((1L << (_la - 868)) & ((1L << (ST_ASWKB - 868)) | (1L << (ST_ASWKT - 868)) | (1L << (ST_BUFFER - 868)) | (1L << (ST_CENTROID - 868)) | (1L << (ST_CONTAINS - 868)) | (1L << (ST_CROSSES - 868)) | (1L << (ST_DIFFERENCE - 868)) | (1L << (ST_DIMENSION - 868)) | (1L << (ST_DISJOINT - 868)) | (1L << (ST_DISTANCE - 868)) | (1L << (ST_ENDPOINT - 868)) | (1L << (ST_ENVELOPE - 868)) | (1L << (ST_EQUALS - 868)) | (1L << (ST_EXTERIORRING - 868)) | (1L << (ST_GEOMCOLLFROMTEXT - 868)) | (1L << (ST_GEOMCOLLFROMTXT - 868)) | (1L << (ST_GEOMCOLLFROMWKB - 868)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 868)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 868)) | (1L << (ST_GEOMETRYFROMTEXT - 868)) | (1L << (ST_GEOMETRYFROMWKB - 868)) | (1L << (ST_GEOMETRYN - 868)) | (1L << (ST_GEOMETRYTYPE - 868)) | (1L << (ST_GEOMFROMTEXT - 868)) | (1L << (ST_GEOMFROMWKB - 868)) | (1L << (ST_INTERIORRINGN - 868)) | (1L << (ST_INTERSECTION - 868)) | (1L << (ST_INTERSECTS - 868)) | (1L << (ST_ISCLOSED - 868)) | (1L << (ST_ISEMPTY - 868)) | (1L << (ST_ISSIMPLE - 868)) | (1L << (ST_LINEFROMTEXT - 868)) | (1L << (ST_LINEFROMWKB - 868)) | (1L << (ST_LINESTRINGFROMTEXT - 868)) | (1L << (ST_LINESTRINGFROMWKB - 868)) | (1L << (ST_NUMGEOMETRIES - 868)) | (1L << (ST_NUMINTERIORRING - 868)) | (1L << (ST_NUMINTERIORRINGS - 868)) | (1L << (ST_NUMPOINTS - 868)) | (1L << (ST_OVERLAPS - 868)) | (1L << (ST_POINTFROMTEXT - 868)) | (1L << (ST_POINTFROMWKB - 868)) | (1L << (ST_POINTN - 868)) | (1L << (ST_POLYFROMTEXT - 868)) | (1L << (ST_POLYFROMWKB - 868)) | (1L << (ST_POLYGONFROMTEXT - 868)) | (1L << (ST_POLYGONFROMWKB - 868)) | (1L << (ST_SRID - 868)) | (1L << (ST_STARTPOINT - 868)) | (1L << (ST_SYMDIFFERENCE - 868)) | (1L << (ST_TOUCHES - 868)) | (1L << (ST_UNION - 868)) | (1L << (ST_WITHIN - 868)) | (1L << (ST_X - 868)) | (1L << (ST_Y - 868)) | (1L << (SUBDATE - 868)) | (1L << (SUBSTRING_INDEX - 868)) | (1L << (SUBTIME - 868)) | (1L << (SYSTEM_USER - 868)) | (1L << (TAN - 868)) | (1L << (TIMEDIFF - 868)) | (1L << (TIMESTAMPADD - 868)) | (1L << (TIMESTAMPDIFF - 868)) | (1L << (TIME_FORMAT - 868)))) != 0) || ((((_la - 932)) & ~0x3f) == 0 && ((1L << (_la - 932)) & ((1L << (TIME_TO_SEC - 932)) | (1L << (TOUCHES - 932)) | (1L << (TO_BASE64 - 932)) | (1L << (TO_DAYS - 932)) | (1L << (TO_SECONDS - 932)) | (1L << (UCASE - 932)) | (1L << (UNCOMPRESS - 932)) | (1L << (UNCOMPRESSED_LENGTH - 932)) | (1L << (UNHEX - 932)) | (1L << (UNIX_TIMESTAMP - 932)) | (1L << (UPDATEXML - 932)) | (1L << (UPPER - 932)) | (1L << (UUID - 932)) | (1L << (UUID_SHORT - 932)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 932)) | (1L << (VERSION - 932)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 932)) | (1L << (WEEKDAY - 932)) | (1L << (WEEKOFYEAR - 932)) | (1L << (WEIGHT_STRING - 932)) | (1L << (WITHIN - 932)) | (1L << (YEARWEEK - 932)) | (1L << (Y_FUNCTION - 932)) | (1L << (X_FUNCTION - 932)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 932)))) != 0) || ((((_la - 997)) & ~0x3f) == 0 && ((1L << (_la - 997)) & ((1L << (STRING_LITERAL - 997)) | (1L << (ID - 997)) | (1L << (REVERSE_QUOTE_ID - 997)))) != 0)) {
				{
				setState(3765);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3764);
					match(AS);
					}
				}

				setState(3767);
				uid();
				}
			}

			setState(3770);
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockActionContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLockAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLockAction(this);
		}
	}

	public final LockActionContext lockAction() throws RecognitionException {
		LockActionContext _localctx = new LockActionContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_lockAction);
		int _la;
		try {
			setState(3780);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(3772);
				match(READ);
				setState(3774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(3773);
					match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(3776);
					match(LOW_PRIORITY);
					}
				}

				setState(3779);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOptionContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TransactionLevelContext transactionLevel() {
			return getRuleContext(TransactionLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionOption(this);
		}
	}

	public final TransactionOptionContext transactionOption() throws RecognitionException {
		TransactionOptionContext _localctx = new TransactionOptionContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_transactionOption);
		try {
			setState(3789);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3782);
				match(ISOLATION);
				setState(3783);
				match(LEVEL);
				setState(3784);
				transactionLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3785);
				match(READ);
				setState(3786);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3787);
				match(READ);
				setState(3788);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionLevel(this);
		}
	}

	public final TransactionLevelContext transactionLevel() throws RecognitionException {
		TransactionLevelContext _localctx = new TransactionLevelContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_transactionLevel);
		try {
			setState(3798);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3791);
				match(REPEATABLE);
				setState(3792);
				match(READ);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3793);
				match(READ);
				setState(3794);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3795);
				match(READ);
				setState(3796);
				match(UNCOMMITTED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3797);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChangeMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChangeMaster(this);
		}
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_changeMaster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3800);
			match(CHANGE);
			setState(3801);
			match(MASTER);
			setState(3802);
			match(TO);
			setState(3803);
			masterOption();
			setState(3808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3804);
				match(COMMA);
				setState(3805);
				masterOption();
				}
				}
				setState(3810);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3811);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationFilterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public List<ReplicationFilterContext> replicationFilter() {
			return getRuleContexts(ReplicationFilterContext.class);
		}
		public ReplicationFilterContext replicationFilter(int i) {
			return getRuleContext(ReplicationFilterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChangeReplicationFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChangeReplicationFilter(this);
		}
	}

	public final ChangeReplicationFilterContext changeReplicationFilter() throws RecognitionException {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_changeReplicationFilter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3814);
			match(CHANGE);
			setState(3815);
			match(REPLICATION);
			setState(3816);
			match(FILTER);
			setState(3817);
			replicationFilter();
			setState(3822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3818);
				match(COMMA);
				setState(3819);
				replicationFilter();
				}
				}
				setState(3824);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PurgeBinaryLogsContext extends ParserRuleContext {
		public Token purgeFormat;
		public Token fileName;
		public Token timeValue;
		public TerminalNode PURGE() { return getToken(MySqlParser.PURGE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode BEFORE() { return getToken(MySqlParser.BEFORE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgeBinaryLogs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPurgeBinaryLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPurgeBinaryLogs(this);
		}
	}

	public final PurgeBinaryLogsContext purgeBinaryLogs() throws RecognitionException {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_purgeBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3825);
			match(PURGE);
			setState(3826);
			((PurgeBinaryLogsContext)_localctx).purgeFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				((PurgeBinaryLogsContext)_localctx).purgeFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3827);
			match(LOGS);
			setState(3832);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(3828);
				match(TO);
				setState(3829);
				((PurgeBinaryLogsContext)_localctx).fileName = match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				setState(3830);
				match(BEFORE);
				setState(3831);
				((PurgeBinaryLogsContext)_localctx).timeValue = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetMasterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetMaster(this);
		}
	}

	public final ResetMasterContext resetMaster() throws RecognitionException {
		ResetMasterContext _localctx = new ResetMasterContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_resetMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3834);
			match(RESET);
			setState(3835);
			match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetSlaveContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetSlave(this);
		}
	}

	public final ResetSlaveContext resetSlave() throws RecognitionException {
		ResetSlaveContext _localctx = new ResetSlaveContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_resetSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3837);
			match(RESET);
			setState(3838);
			match(SLAVE);
			setState(3840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(3839);
				match(ALL);
				}
			}

			setState(3843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3842);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartSlaveContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public UntilOptionContext untilOption() {
			return getRuleContext(UntilOptionContext.class,0);
		}
		public List<ConnectionOptionContext> connectionOption() {
			return getRuleContexts(ConnectionOptionContext.class);
		}
		public ConnectionOptionContext connectionOption(int i) {
			return getRuleContext(ConnectionOptionContext.class,i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartSlave(this);
		}
	}

	public final StartSlaveContext startSlave() throws RecognitionException {
		StartSlaveContext _localctx = new StartSlaveContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_startSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3845);
			match(START);
			setState(3846);
			match(SLAVE);
			setState(3855);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(3847);
				threadType();
				setState(3852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3848);
					match(COMMA);
					setState(3849);
					threadType();
					}
					}
					setState(3854);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3857);
				match(UNTIL);
				setState(3858);
				untilOption();
				}
			}

			setState(3864);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				setState(3861);
				connectionOption();
				}
				}
				setState(3866);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3868);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3867);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopSlaveContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStopSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStopSlave(this);
		}
	}

	public final StopSlaveContext stopSlave() throws RecognitionException {
		StopSlaveContext _localctx = new StopSlaveContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_stopSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3870);
			match(STOP);
			setState(3871);
			match(SLAVE);
			setState(3880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(3872);
				threadType();
				setState(3877);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3873);
					match(COMMA);
					setState(3874);
					threadType();
					}
					}
					setState(3879);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartGroupReplicationContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStartGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStartGroupReplication(this);
		}
	}

	public final StartGroupReplicationContext startGroupReplication() throws RecognitionException {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_startGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3882);
			match(START);
			setState(3883);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopGroupReplicationContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStopGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStopGroupReplication(this);
		}
	}

	public final StopGroupReplicationContext stopGroupReplication() throws RecognitionException {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_stopGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3885);
			match(STOP);
			setState(3886);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	 
		public MasterOptionContext() { }
		public void copyFrom(MasterOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MasterStringOptionContext extends MasterOptionContext {
		public StringMasterOptionContext stringMasterOption() {
			return getRuleContext(StringMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterStringOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterStringOption(this);
		}
	}
	public static class MasterRealOptionContext extends MasterOptionContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterRealOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterRealOption(this);
		}
	}
	public static class MasterBoolOptionContext extends MasterOptionContext {
		public Token boolVal;
		public BoolMasterOptionContext boolMasterOption() {
			return getRuleContext(BoolMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public MasterBoolOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterBoolOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterBoolOption(this);
		}
	}
	public static class MasterUidListOptionContext extends MasterOptionContext {
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public MasterUidListOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterUidListOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterUidListOption(this);
		}
	}
	public static class MasterDecimalOptionContext extends MasterOptionContext {
		public DecimalMasterOptionContext decimalMasterOption() {
			return getRuleContext(DecimalMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterDecimalOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterDecimalOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterDecimalOption(this);
		}
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_masterOption);
		int _la;
		try {
			setState(3917);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3888);
				stringMasterOption();
				setState(3889);
				match(EQUAL_SYMBOL);
				setState(3890);
				match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3892);
				decimalMasterOption();
				setState(3893);
				match(EQUAL_SYMBOL);
				setState(3894);
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3896);
				boolMasterOption();
				setState(3897);
				match(EQUAL_SYMBOL);
				setState(3898);
				((MasterBoolOptionContext)_localctx).boolVal = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3900);
				match(MASTER_HEARTBEAT_PERIOD);
				setState(3901);
				match(EQUAL_SYMBOL);
				setState(3902);
				match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3903);
				match(IGNORE_SERVER_IDS);
				setState(3904);
				match(EQUAL_SYMBOL);
				setState(3905);
				match(LR_BRACKET);
				setState(3914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
					{
					setState(3906);
					uid();
					setState(3911);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3907);
						match(COMMA);
						setState(3908);
						uid();
						}
						}
						setState(3913);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3916);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_BIND() { return getToken(MySqlParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringMasterOption(this);
		}
	}

	public final StringMasterOptionContext stringMasterOption() throws RecognitionException {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_stringMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3919);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (MASTER_HOST - 399)) | (1L << (MASTER_LOG_FILE - 399)) | (1L << (MASTER_PASSWORD - 399)) | (1L << (MASTER_SSL_CA - 399)) | (1L << (MASTER_SSL_CAPATH - 399)) | (1L << (MASTER_SSL_CERT - 399)) | (1L << (MASTER_SSL_CIPHER - 399)) | (1L << (MASTER_SSL_CRL - 399)) | (1L << (MASTER_SSL_CRLPATH - 399)) | (1L << (MASTER_SSL_KEY - 399)) | (1L << (MASTER_TLS_VERSION - 399)) | (1L << (MASTER_USER - 399)))) != 0) || _la==RELAY_LOG_FILE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalMasterOption(this);
		}
	}

	public final DecimalMasterOptionContext decimalMasterOption() throws RecognitionException {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_decimalMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3921);
			_la = _input.LA(1);
			if ( !(((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (MASTER_CONNECT_RETRY - 396)) | (1L << (MASTER_DELAY - 396)) | (1L << (MASTER_LOG_POS - 396)) | (1L << (MASTER_PORT - 396)) | (1L << (MASTER_RETRY_COUNT - 396)))) != 0) || _la==RELAY_LOG_POS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBoolMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBoolMasterOption(this);
		}
	}

	public final BoolMasterOptionContext boolMasterOption() throws RecognitionException {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_boolMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3923);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChannelOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChannelOption(this);
		}
	}

	public final ChannelOptionContext channelOption() throws RecognitionException {
		ChannelOptionContext _localctx = new ChannelOptionContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_channelOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3925);
			match(FOR);
			setState(3926);
			match(CHANNEL);
			setState(3927);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationFilterContext extends ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationFilter; }
	 
		public ReplicationFilterContext() { }
		public void copyFrom(ReplicationFilterContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWildIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWildIgnoreTableReplication(this);
		}
	}
	public static class DoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public DoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoTableReplication(this);
		}
	}
	public static class IgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIgnoreTableReplication(this);
		}
	}
	public static class RewriteDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<TablePairContext> tablePair() {
			return getRuleContexts(TablePairContext.class);
		}
		public TablePairContext tablePair(int i) {
			return getRuleContext(TablePairContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRewriteDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRewriteDbReplication(this);
		}
	}
	public static class DoDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public DoDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoDbReplication(this);
		}
	}
	public static class IgnoreDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIgnoreDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIgnoreDbReplication(this);
		}
	}
	public static class WildDoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWildDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWildDoTableReplication(this);
		}
	}

	public final ReplicationFilterContext replicationFilter() throws RecognitionException {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_replicationFilter);
		int _la;
		try {
			setState(3978);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3929);
				match(REPLICATE_DO_DB);
				setState(3930);
				match(EQUAL_SYMBOL);
				setState(3931);
				match(LR_BRACKET);
				setState(3932);
				uidList();
				setState(3933);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3935);
				match(REPLICATE_IGNORE_DB);
				setState(3936);
				match(EQUAL_SYMBOL);
				setState(3937);
				match(LR_BRACKET);
				setState(3938);
				uidList();
				setState(3939);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3941);
				match(REPLICATE_DO_TABLE);
				setState(3942);
				match(EQUAL_SYMBOL);
				setState(3943);
				match(LR_BRACKET);
				setState(3944);
				tables();
				setState(3945);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3947);
				match(REPLICATE_IGNORE_TABLE);
				setState(3948);
				match(EQUAL_SYMBOL);
				setState(3949);
				match(LR_BRACKET);
				setState(3950);
				tables();
				setState(3951);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3953);
				match(REPLICATE_WILD_DO_TABLE);
				setState(3954);
				match(EQUAL_SYMBOL);
				setState(3955);
				match(LR_BRACKET);
				setState(3956);
				simpleStrings();
				setState(3957);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3959);
				match(REPLICATE_WILD_IGNORE_TABLE);
				setState(3960);
				match(EQUAL_SYMBOL);
				setState(3961);
				match(LR_BRACKET);
				setState(3962);
				simpleStrings();
				setState(3963);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3965);
				match(REPLICATE_REWRITE_DB);
				setState(3966);
				match(EQUAL_SYMBOL);
				setState(3967);
				match(LR_BRACKET);
				setState(3968);
				tablePair();
				setState(3973);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3969);
					match(COMMA);
					setState(3970);
					tablePair();
					}
					}
					setState(3975);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3976);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePairContext extends ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTablePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTablePair(this);
		}
	}

	public final TablePairContext tablePair() throws RecognitionException {
		TablePairContext _localctx = new TablePairContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_tablePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3980);
			match(LR_BRACKET);
			setState(3981);
			((TablePairContext)_localctx).firstTable = tableName();
			setState(3982);
			match(COMMA);
			setState(3983);
			((TablePairContext)_localctx).secondTable = tableName();
			setState(3984);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadTypeContext extends ParserRuleContext {
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterThreadType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitThreadType(this);
		}
	}

	public final ThreadTypeContext threadType() throws RecognitionException {
		ThreadTypeContext _localctx = new ThreadTypeContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_threadType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3986);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UntilOptionContext extends ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_untilOption; }
	 
		public UntilOptionContext() { }
		public void copyFrom(UntilOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GtidsUntilOptionContext extends UntilOptionContext {
		public Token gtids;
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public GtuidSetContext gtuidSet() {
			return getRuleContext(GtuidSetContext.class,0);
		}
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGtidsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGtidsUntilOption(this);
		}
	}
	public static class SqlGapsUntilOptionContext extends UntilOptionContext {
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlGapsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlGapsUntilOption(this);
		}
	}
	public static class MasterLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMasterLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMasterLogUntilOption(this);
		}
	}
	public static class RelayLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRelayLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRelayLogUntilOption(this);
		}
	}

	public final UntilOptionContext untilOption() throws RecognitionException {
		UntilOptionContext _localctx = new UntilOptionContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_untilOption);
		int _la;
		try {
			setState(4006);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3988);
				((GtidsUntilOptionContext)_localctx).gtids = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3989);
				match(EQUAL_SYMBOL);
				setState(3990);
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3991);
				match(MASTER_LOG_FILE);
				setState(3992);
				match(EQUAL_SYMBOL);
				setState(3993);
				match(STRING_LITERAL);
				setState(3994);
				match(COMMA);
				setState(3995);
				match(MASTER_LOG_POS);
				setState(3996);
				match(EQUAL_SYMBOL);
				setState(3997);
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3998);
				match(RELAY_LOG_FILE);
				setState(3999);
				match(EQUAL_SYMBOL);
				setState(4000);
				match(STRING_LITERAL);
				setState(4001);
				match(COMMA);
				setState(4002);
				match(RELAY_LOG_POS);
				setState(4003);
				match(EQUAL_SYMBOL);
				setState(4004);
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4005);
				match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptionContext extends ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOption; }
	 
		public ConnectionOptionContext() { }
		public void copyFrom(ConnectionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PluginDirConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPluginDir;
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPluginDirConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPluginDirConnectionOption(this);
		}
	}
	public static class UserConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptUser;
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserConnectionOption(this);
		}
	}
	public static class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptDefAuth;
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultAuthConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultAuthConnectionOption(this);
		}
	}
	public static class PasswordConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPassword;
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordConnectionOption(this);
		}
	}

	public final ConnectionOptionContext connectionOption() throws RecognitionException {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_connectionOption);
		try {
			setState(4020);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4008);
				match(USER);
				setState(4009);
				match(EQUAL_SYMBOL);
				setState(4010);
				((UserConnectionOptionContext)_localctx).conOptUser = match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4011);
				match(PASSWORD);
				setState(4012);
				match(EQUAL_SYMBOL);
				setState(4013);
				((PasswordConnectionOptionContext)_localctx).conOptPassword = match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4014);
				match(DEFAULT_AUTH);
				setState(4015);
				match(EQUAL_SYMBOL);
				setState(4016);
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4017);
				match(PLUGIN_DIR);
				setState(4018);
				match(EQUAL_SYMBOL);
				setState(4019);
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GtuidSetContext extends ParserRuleContext {
		public List<UuidSetContext> uuidSet() {
			return getRuleContexts(UuidSetContext.class);
		}
		public UuidSetContext uuidSet(int i) {
			return getRuleContext(UuidSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gtuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGtuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGtuidSet(this);
		}
	}

	public final GtuidSetContext gtuidSet() throws RecognitionException {
		GtuidSetContext _localctx = new GtuidSetContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_gtuidSet);
		int _la;
		try {
			setState(4031);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4022);
				uuidSet();
				setState(4027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4023);
					match(COMMA);
					setState(4024);
					uuidSet();
					}
					}
					setState(4029);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4030);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStartTransactionContext extends ParserRuleContext {
		public Token xaStart;
		public Token xaAction;
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStartTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaStartTransaction(this);
		}
	}

	public final XaStartTransactionContext xaStartTransaction() throws RecognitionException {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_xaStartTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4033);
			match(XA);
			setState(4034);
			((XaStartTransactionContext)_localctx).xaStart = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				((XaStartTransactionContext)_localctx).xaStart = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4035);
			xid();
			setState(4037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				setState(4036);
				((XaStartTransactionContext)_localctx).xaAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					((XaStartTransactionContext)_localctx).xaAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaEndTransactionContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaEndTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaEndTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaEndTransaction(this);
		}
	}

	public final XaEndTransactionContext xaEndTransaction() throws RecognitionException {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_xaEndTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4039);
			match(XA);
			setState(4040);
			match(END);
			setState(4041);
			xid();
			setState(4047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUSPEND) {
				{
				setState(4042);
				match(SUSPEND);
				setState(4045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4043);
					match(FOR);
					setState(4044);
					match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaPrepareStatementContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaPrepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaPrepareStatement(this);
		}
	}

	public final XaPrepareStatementContext xaPrepareStatement() throws RecognitionException {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_xaPrepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4049);
			match(XA);
			setState(4050);
			match(PREPARE);
			setState(4051);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaCommitWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaCommitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaCommitWork(this);
		}
	}

	public final XaCommitWorkContext xaCommitWork() throws RecognitionException {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_xaCommitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4053);
			match(XA);
			setState(4054);
			match(COMMIT);
			setState(4055);
			xid();
			setState(4058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONE) {
				{
				setState(4056);
				match(ONE);
				setState(4057);
				match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRollbackWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaRollbackWork(this);
		}
	}

	public final XaRollbackWorkContext xaRollbackWork() throws RecognitionException {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_xaRollbackWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4060);
			match(XA);
			setState(4061);
			match(ROLLBACK);
			setState(4062);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRecoverWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRecoverWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXaRecoverWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXaRecoverWork(this);
		}
	}

	public final XaRecoverWorkContext xaRecoverWork() throws RecognitionException {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_xaRecoverWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4064);
			match(XA);
			setState(4065);
			match(RECOVER);
			setState(4068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERT) {
				{
				setState(4066);
				match(CONVERT);
				setState(4067);
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStatementContext extends ParserRuleContext {
		public Token query;
		public Token variable;
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrepareStatement(this);
		}
	}

	public final PrepareStatementContext prepareStatement() throws RecognitionException {
		PrepareStatementContext _localctx = new PrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_prepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4070);
			match(PREPARE);
			setState(4071);
			uid();
			setState(4072);
			match(FROM);
			setState(4075);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				{
				setState(4073);
				((PrepareStatementContext)_localctx).query = match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				setState(4074);
				((PrepareStatementContext)_localctx).variable = match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public UserVariablesContext userVariables() {
			return getRuleContext(UserVariablesContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExecuteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExecuteStatement(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4077);
			match(EXECUTE);
			setState(4078);
			uid();
			setState(4081);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4079);
				match(USING);
				setState(4080);
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatePrepareContext extends ParserRuleContext {
		public Token dropFormat;
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatePrepare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeallocatePrepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeallocatePrepare(this);
		}
	}

	public final DeallocatePrepareContext deallocatePrepare() throws RecognitionException {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_deallocatePrepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4083);
			((DeallocatePrepareContext)_localctx).dropFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				((DeallocatePrepareContext)_localctx).dropFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4084);
			match(PREPARE);
			setState(4085);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineBodyContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineBody(this);
		}
	}

	public final RoutineBodyContext routineBody() throws RecognitionException {
		RoutineBodyContext _localctx = new RoutineBodyContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_routineBody);
		try {
			setState(4089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4087);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4088);
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<DeclareVariableContext> declareVariable() {
			return getRuleContexts(DeclareVariableContext.class);
		}
		public DeclareVariableContext declareVariable(int i) {
			return getRuleContext(DeclareVariableContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<DeclareConditionContext> declareCondition() {
			return getRuleContexts(DeclareConditionContext.class);
		}
		public DeclareConditionContext declareCondition(int i) {
			return getRuleContext(DeclareConditionContext.class,i);
		}
		public List<DeclareCursorContext> declareCursor() {
			return getRuleContexts(DeclareCursorContext.class);
		}
		public DeclareCursorContext declareCursor(int i) {
			return getRuleContext(DeclareCursorContext.class,i);
		}
		public List<DeclareHandlerContext> declareHandler() {
			return getRuleContexts(DeclareHandlerContext.class);
		}
		public DeclareHandlerContext declareHandler(int i) {
			return getRuleContext(DeclareHandlerContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBlockStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBlockStatement(this);
		}
	}

	public final BlockStatementContext blockStatement() throws RecognitionException {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
			case 1:
				{
				setState(4091);
				uid();
				setState(4092);
				match(COLON_SYMB);
				}
				break;
			}
			setState(4096);
			match(BEGIN);
			setState(4135);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
			case 1:
				{
				setState(4102);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,589,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4097);
						declareVariable();
						setState(4098);
						match(SEMI);
						}
						} 
					}
					setState(4104);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,589,_ctx);
				}
				setState(4110);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,590,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4105);
						declareCondition();
						setState(4106);
						match(SEMI);
						}
						} 
					}
					setState(4112);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,590,_ctx);
				}
				setState(4118);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,591,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4113);
						declareCursor();
						setState(4114);
						match(SEMI);
						}
						} 
					}
					setState(4120);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,591,_ctx);
				}
				setState(4126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DECLARE) {
					{
					{
					setState(4121);
					declareHandler();
					setState(4122);
					match(SEMI);
					}
					}
					setState(4128);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4132);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,593,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4129);
						procedureSqlStatement();
						}
						} 
					}
					setState(4134);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,593,_ctx);
				}
				}
				break;
			}
			setState(4137);
			match(END);
			setState(4139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
			case 1:
				{
				setState(4138);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(MySqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(MySqlParser.CASE, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<CaseAlternativeContext> caseAlternative() {
			return getRuleContexts(CaseAlternativeContext.class);
		}
		public CaseAlternativeContext caseAlternative(int i) {
			return getRuleContext(CaseAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseStatement(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4141);
			match(CASE);
			setState(4144);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
			case 1:
				{
				setState(4142);
				uid();
				}
				break;
			case 2:
				{
				setState(4143);
				expression(0);
				}
				break;
			}
			setState(4147); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4146);
				caseAlternative();
				}
				}
				setState(4149); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4151);
				match(ELSE);
				setState(4153); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4152);
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4155); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,598,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4159);
			match(END);
			setState(4160);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public ProcedureSqlStatementContext procedureSqlStatement;
		public List<ProcedureSqlStatementContext> thenStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<ProcedureSqlStatementContext> elseStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<TerminalNode> IF() { return getTokens(MySqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(MySqlParser.IF, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<ElifAlternativeContext> elifAlternative() {
			return getRuleContexts(ElifAlternativeContext.class);
		}
		public ElifAlternativeContext elifAlternative(int i) {
			return getRuleContext(ElifAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfStatement(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4162);
			match(IF);
			setState(4163);
			expression(0);
			setState(4164);
			match(THEN);
			setState(4166); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4165);
					((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
					((IfStatementContext)_localctx).thenStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4168); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,600,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(4170);
				elifAlternative();
				}
				}
				setState(4175);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4182);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4176);
				match(ELSE);
				setState(4178); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4177);
						((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
						((IfStatementContext)_localctx).elseStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4180); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,602,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4184);
			match(END);
			setState(4185);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(MySqlParser.ITERATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIterateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIterateStatement(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4187);
			match(ITERATE);
			setState(4188);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(MySqlParser.LEAVE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLeaveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLeaveStatement(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4190);
			match(LEAVE);
			setState(4191);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(MySqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(MySqlParser.LOOP, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoopStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoopStatement(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
				{
				setState(4193);
				uid();
				setState(4194);
				match(COLON_SYMB);
				}
			}

			setState(4198);
			match(LOOP);
			setState(4200); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4199);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4202); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,605,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4204);
			match(END);
			setState(4205);
			match(LOOP);
			setState(4207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
				{
				setState(4206);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatStatementContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT() { return getTokens(MySqlParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(MySqlParser.REPEAT, i);
		}
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRepeatStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRepeatStatement(this);
		}
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
				{
				setState(4209);
				uid();
				setState(4210);
				match(COLON_SYMB);
				}
			}

			setState(4214);
			match(REPEAT);
			setState(4216); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4215);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4218); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,608,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4220);
			match(UNTIL);
			setState(4221);
			expression(0);
			setState(4222);
			match(END);
			setState(4223);
			match(REPEAT);
			setState(4225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
				{
				setState(4224);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(MySqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReturnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReturnStatement(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4227);
			match(RETURN);
			setState(4228);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(MySqlParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(MySqlParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWhileStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWhileStatement(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4233);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
				{
				setState(4230);
				uid();
				setState(4231);
				match(COLON_SYMB);
				}
			}

			setState(4235);
			match(WHILE);
			setState(4236);
			expression(0);
			setState(4237);
			match(DO);
			setState(4239); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4238);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4241); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,611,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4243);
			match(END);
			setState(4244);
			match(WHILE);
			setState(4246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0)) {
				{
				setState(4245);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorStatementContext extends ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
	 
		public CursorStatementContext() { }
		public void copyFrom(CursorStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CloseCursorContext extends CursorStatementContext {
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CloseCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCloseCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCloseCursor(this);
		}
	}
	public static class OpenCursorContext extends CursorStatementContext {
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public OpenCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOpenCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOpenCursor(this);
		}
	}
	public static class FetchCursorContext extends CursorStatementContext {
		public TerminalNode FETCH() { return getToken(MySqlParser.FETCH, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFetchCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFetchCursor(this);
		}
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_cursorStatement);
		int _la;
		try {
			setState(4263);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4248);
				match(CLOSE);
				setState(4249);
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4250);
				match(FETCH);
				setState(4255);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
				case 1:
					{
					setState(4252);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(4251);
						match(NEXT);
						}
					}

					setState(4254);
					match(FROM);
					}
					break;
				}
				setState(4257);
				uid();
				setState(4258);
				match(INTO);
				setState(4259);
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4261);
				match(OPEN);
				setState(4262);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareVariableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareVariable(this);
		}
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4265);
			match(DECLARE);
			setState(4266);
			uidList();
			setState(4267);
			dataType();
			setState(4270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4268);
				match(DEFAULT);
				setState(4269);
				defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareConditionContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareCondition(this);
		}
	}

	public final DeclareConditionContext declareCondition() throws RecognitionException {
		DeclareConditionContext _localctx = new DeclareConditionContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_declareCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4272);
			match(DECLARE);
			setState(4273);
			uid();
			setState(4274);
			match(CONDITION);
			setState(4275);
			match(FOR);
			setState(4282);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				{
				setState(4276);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				setState(4277);
				match(SQLSTATE);
				setState(4279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4278);
					match(VALUE);
					}
				}

				setState(4281);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(MySqlParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareCursor(this);
		}
	}

	public final DeclareCursorContext declareCursor() throws RecognitionException {
		DeclareCursorContext _localctx = new DeclareCursorContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_declareCursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4284);
			match(DECLARE);
			setState(4285);
			uid();
			setState(4286);
			match(CURSOR);
			setState(4287);
			match(FOR);
			setState(4288);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareHandlerContext extends ParserRuleContext {
		public Token handlerAction;
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public List<HandlerConditionValueContext> handlerConditionValue() {
			return getRuleContexts(HandlerConditionValueContext.class);
		}
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return getRuleContext(HandlerConditionValueContext.class,i);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(MySqlParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(MySqlParser.EXIT, 0); }
		public TerminalNode UNDO() { return getToken(MySqlParser.UNDO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeclareHandler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeclareHandler(this);
		}
	}

	public final DeclareHandlerContext declareHandler() throws RecognitionException {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_declareHandler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4290);
			match(DECLARE);
			setState(4291);
			((DeclareHandlerContext)_localctx).handlerAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				((DeclareHandlerContext)_localctx).handlerAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4292);
			match(HANDLER);
			setState(4293);
			match(FOR);
			setState(4294);
			handlerConditionValue();
			setState(4299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4295);
				match(COMMA);
				setState(4296);
				handlerConditionValue();
				}
				}
				setState(4301);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4302);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionValueContext extends ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerConditionValue; }
	 
		public HandlerConditionValueContext() { }
		public void copyFrom(HandlerConditionValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
		public TerminalNode SQLWARNING() { return getToken(MySqlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionWarning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionWarning(this);
		}
	}
	public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionCode(this);
		}
	}
	public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionNotfound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionNotfound(this);
		}
	}
	public static class HandlerConditionStateContext extends HandlerConditionValueContext {
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionState(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionState(this);
		}
	}
	public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
		public TerminalNode SQLEXCEPTION() { return getToken(MySqlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionException(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionException(this);
		}
	}
	public static class HandlerConditionNameContext extends HandlerConditionValueContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerConditionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerConditionName(this);
		}
	}

	public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_handlerConditionValue);
		int _la;
		try {
			setState(4315);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4304);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4305);
				match(SQLSTATE);
				setState(4307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4306);
					match(VALUE);
					}
				}

				setState(4309);
				match(STRING_LITERAL);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4310);
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4311);
				match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4312);
				match(NOT);
				setState(4313);
				match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4314);
				match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureSqlStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureSqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProcedureSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProcedureSqlStatement(this);
		}
	}

	public final ProcedureSqlStatementContext procedureSqlStatement() throws RecognitionException {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_procedureSqlStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4319);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
			case 1:
				{
				setState(4317);
				compoundStatement();
				}
				break;
			case 2:
				{
				setState(4318);
				sqlStatement();
				}
				break;
			}
			setState(4321);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseAlternativeContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseAlternative(this);
		}
	}

	public final CaseAlternativeContext caseAlternative() throws RecognitionException {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_caseAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4323);
			match(WHEN);
			setState(4326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
			case 1:
				{
				setState(4324);
				constant();
				}
				break;
			case 2:
				{
				setState(4325);
				expression(0);
				}
				break;
			}
			setState(4328);
			match(THEN);
			setState(4330); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4329);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4332); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,624,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElifAlternativeContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(MySqlParser.ELSEIF, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elifAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterElifAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitElifAlternative(this);
		}
	}

	public final ElifAlternativeContext elifAlternative() throws RecognitionException {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_elifAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4334);
			match(ELSEIF);
			setState(4335);
			expression(0);
			setState(4336);
			match(THEN);
			setState(4338); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4337);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4340); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,625,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
	 
		public AlterUserContext() { }
		public void copyFrom(AlterUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUserMysqlV56Context extends AlterUserContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserSpecificationContext> userSpecification() {
			return getRuleContexts(UserSpecificationContext.class);
		}
		public UserSpecificationContext userSpecification(int i) {
			return getRuleContext(UserSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUserMysqlV56(this);
		}
	}
	public static class AlterUserMysqlV57Context extends AlterUserContext {
		public Token tlsNone;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public AlterUserMysqlV57Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAlterUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAlterUserMysqlV57(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_alterUser);
		int _la;
		try {
			setState(4396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4342);
				match(ALTER);
				setState(4343);
				match(USER);
				setState(4344);
				userSpecification();
				setState(4349);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4345);
					match(COMMA);
					setState(4346);
					userSpecification();
					}
					}
					setState(4351);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4352);
				match(ALTER);
				setState(4353);
				match(USER);
				setState(4355);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4354);
					ifExists();
					}
				}

				setState(4357);
				userAuthOption();
				setState(4362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4358);
					match(COMMA);
					setState(4359);
					userAuthOption();
					}
					}
					setState(4364);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4379);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4365);
					match(REQUIRE);
					setState(4377);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4366);
						((AlterUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4367);
						tlsOption();
						setState(4374);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4369);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4368);
								match(AND);
								}
							}

							setState(4371);
							tlsOption();
							}
							}
							setState(4376);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4381);
					match(WITH);
					setState(4383); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4382);
						userResourceOption();
						}
						}
						setState(4385); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 415)) & ~0x3f) == 0 && ((1L << (_la - 415)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 415)) | (1L << (MAX_QUERIES_PER_HOUR - 415)) | (1L << (MAX_UPDATES_PER_HOUR - 415)) | (1L << (MAX_USER_CONNECTIONS - 415)))) != 0) );
					}
				}

				setState(4393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4391);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4389);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4390);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4395);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
	 
		public CreateUserContext() { }
		public void copyFrom(CreateUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CreateUserMysqlV57Context extends CreateUserContext {
		public Token tlsNone;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public CreateUserMysqlV57Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUserMysqlV57(this);
		}
	}
	public static class CreateUserMysqlV56Context extends CreateUserContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateUserMysqlV56Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUserMysqlV56(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_createUser);
		int _la;
		try {
			setState(4452);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4398);
				match(CREATE);
				setState(4399);
				match(USER);
				setState(4400);
				userAuthOption();
				setState(4405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4401);
					match(COMMA);
					setState(4402);
					userAuthOption();
					}
					}
					setState(4407);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4408);
				match(CREATE);
				setState(4409);
				match(USER);
				setState(4411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4410);
					ifNotExists();
					}
				}

				setState(4413);
				userAuthOption();
				setState(4418);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4414);
					match(COMMA);
					setState(4415);
					userAuthOption();
					}
					}
					setState(4420);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4435);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4421);
					match(REQUIRE);
					setState(4433);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4422);
						((CreateUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4423);
						tlsOption();
						setState(4430);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4425);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4424);
								match(AND);
								}
							}

							setState(4427);
							tlsOption();
							}
							}
							setState(4432);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4437);
					match(WITH);
					setState(4439); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4438);
						userResourceOption();
						}
						}
						setState(4441); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 415)) & ~0x3f) == 0 && ((1L << (_la - 415)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 415)) | (1L << (MAX_QUERIES_PER_HOUR - 415)) | (1L << (MAX_UPDATES_PER_HOUR - 415)) | (1L << (MAX_USER_CONNECTIONS - 415)))) != 0) );
					}
				}

				setState(4449);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4447);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4445);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4446);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4451);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropUser(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_dropUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4454);
			match(DROP);
			setState(4455);
			match(USER);
			setState(4457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4456);
				ifExists();
				}
			}

			setState(4459);
			userName();
			setState(4464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4460);
				match(COMMA);
				setState(4461);
				userName();
				}
				}
				setState(4466);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStatementContext extends ParserRuleContext {
		public Token privilegeObject;
		public Token tlsNone;
		public List<TerminalNode> GRANT() { return getTokens(MySqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MySqlParser.GRANT, i);
		}
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<TerminalNode> OPTION() { return getTokens(MySqlParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(MySqlParser.OPTION, i);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGrantStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGrantStatement(this);
		}
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4467);
			match(GRANT);
			setState(4468);
			privelegeClause();
			setState(4473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4469);
				match(COMMA);
				setState(4470);
				privelegeClause();
				}
				}
				setState(4475);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4476);
			match(ON);
			setState(4478);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				{
				setState(4477);
				((GrantStatementContext)_localctx).privilegeObject = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
					((GrantStatementContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4480);
			privilegeLevel();
			setState(4481);
			match(TO);
			setState(4482);
			userAuthOption();
			setState(4487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4483);
				match(COMMA);
				setState(4484);
				userAuthOption();
				}
				}
				setState(4489);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REQUIRE) {
				{
				setState(4490);
				match(REQUIRE);
				setState(4502);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(4491);
					((GrantStatementContext)_localctx).tlsNone = match(NONE);
					}
					break;
				case SSL:
				case CIPHER:
				case ISSUER:
				case SUBJECT:
				case X509:
					{
					setState(4492);
					tlsOption();
					setState(4499);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
						{
						{
						setState(4494);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AND) {
							{
							setState(4493);
							match(AND);
							}
						}

						setState(4496);
						tlsOption();
						}
						}
						setState(4501);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4506);
				match(WITH);
				setState(4512);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,660,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(4510);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case GRANT:
							{
							setState(4507);
							match(GRANT);
							setState(4508);
							match(OPTION);
							}
							break;
						case MAX_CONNECTIONS_PER_HOUR:
						case MAX_QUERIES_PER_HOUR:
						case MAX_UPDATES_PER_HOUR:
						case MAX_USER_CONNECTIONS:
							{
							setState(4509);
							userResourceOption();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					setState(4514);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,660,_ctx);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantProxyContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext userName;
		public List<UserNameContext> toOther = new ArrayList<UserNameContext>();
		public List<TerminalNode> GRANT() { return getTokens(MySqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MySqlParser.GRANT, i);
		}
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGrantProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGrantProxy(this);
		}
	}

	public final GrantProxyContext grantProxy() throws RecognitionException {
		GrantProxyContext _localctx = new GrantProxyContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_grantProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4517);
			match(GRANT);
			setState(4518);
			match(PROXY);
			setState(4519);
			match(ON);
			setState(4520);
			((GrantProxyContext)_localctx).fromFirst = userName();
			setState(4521);
			match(TO);
			setState(4522);
			((GrantProxyContext)_localctx).toFirst = userName();
			setState(4527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4523);
				match(COMMA);
				setState(4524);
				((GrantProxyContext)_localctx).userName = userName();
				((GrantProxyContext)_localctx).toOther.add(((GrantProxyContext)_localctx).userName);
				}
				}
				setState(4529);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4533);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4530);
				match(WITH);
				setState(4531);
				match(GRANT);
				setState(4532);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<RenameUserClauseContext> renameUserClause() {
			return getRuleContexts(RenameUserClauseContext.class);
		}
		public RenameUserClauseContext renameUserClause(int i) {
			return getRuleContext(RenameUserClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameUser(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4535);
			match(RENAME);
			setState(4536);
			match(USER);
			setState(4537);
			renameUserClause();
			setState(4542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4538);
				match(COMMA);
				setState(4539);
				renameUserClause();
				}
				}
				setState(4544);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStatementContext extends ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStatement; }
	 
		public RevokeStatementContext() { }
		public void copyFrom(RevokeStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DetailRevokeContext extends RevokeStatementContext {
		public Token privilegeObject;
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDetailRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDetailRevoke(this);
		}
	}
	public static class ShortRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode GRANT() { return getToken(MySqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShortRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShortRevoke(this);
		}
	}

	public final RevokeStatementContext revokeStatement() throws RecognitionException {
		RevokeStatementContext _localctx = new RevokeStatementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_revokeStatement);
		int _la;
		try {
			setState(4585);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4545);
				match(REVOKE);
				setState(4546);
				privelegeClause();
				setState(4551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4547);
					match(COMMA);
					setState(4548);
					privelegeClause();
					}
					}
					setState(4553);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4554);
				match(ON);
				setState(4556);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
				case 1:
					{
					setState(4555);
					((DetailRevokeContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4558);
				privilegeLevel();
				setState(4559);
				match(FROM);
				setState(4560);
				userName();
				setState(4565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4561);
					match(COMMA);
					setState(4562);
					userName();
					}
					}
					setState(4567);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4568);
				match(REVOKE);
				setState(4569);
				match(ALL);
				setState(4571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4570);
					match(PRIVILEGES);
					}
				}

				setState(4573);
				match(COMMA);
				setState(4574);
				match(GRANT);
				setState(4575);
				match(OPTION);
				setState(4576);
				match(FROM);
				setState(4577);
				userName();
				setState(4582);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4578);
					match(COMMA);
					setState(4579);
					userName();
					}
					}
					setState(4584);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeProxyContext extends ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext userName;
		public List<UserNameContext> fromOther = new ArrayList<UserNameContext>();
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRevokeProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRevokeProxy(this);
		}
	}

	public final RevokeProxyContext revokeProxy() throws RecognitionException {
		RevokeProxyContext _localctx = new RevokeProxyContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_revokeProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4587);
			match(REVOKE);
			setState(4588);
			match(PROXY);
			setState(4589);
			match(ON);
			setState(4590);
			((RevokeProxyContext)_localctx).onUser = userName();
			setState(4591);
			match(FROM);
			setState(4592);
			((RevokeProxyContext)_localctx).fromFirst = userName();
			setState(4597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4593);
				match(COMMA);
				setState(4594);
				((RevokeProxyContext)_localctx).userName = userName();
				((RevokeProxyContext)_localctx).fromOther.add(((RevokeProxyContext)_localctx).userName);
				}
				}
				setState(4599);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetPasswordStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPasswordStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetPasswordStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetPasswordStatement(this);
		}
	}

	public final SetPasswordStatementContext setPasswordStatement() throws RecognitionException {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_setPasswordStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4600);
			match(SET);
			setState(4601);
			match(PASSWORD);
			setState(4604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4602);
				match(FOR);
				setState(4603);
				userName();
				}
			}

			setState(4606);
			match(EQUAL_SYMBOL);
			setState(4609);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				setState(4607);
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				setState(4608);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserSpecificationContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UserPasswordOptionContext userPasswordOption() {
			return getRuleContext(UserPasswordOptionContext.class,0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserSpecification(this);
		}
	}

	public final UserSpecificationContext userSpecification() throws RecognitionException {
		UserSpecificationContext _localctx = new UserSpecificationContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_userSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4611);
			userName();
			setState(4612);
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserAuthOptionContext extends ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAuthOption; }
	 
		public UserAuthOptionContext() { }
		public void copyFrom(UserAuthOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleAuthOption(this);
		}
	}
	public static class PasswordAuthOptionContext extends UserAuthOptionContext {
		public Token hashed;
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordAuthOption(this);
		}
	}
	public static class StringAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public StringAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringAuthOption(this);
		}
	}
	public static class HashAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHashAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHashAuthOption(this);
		}
	}

	public final UserAuthOptionContext userAuthOption() throws RecognitionException {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_userAuthOption);
		int _la;
		try {
			setState(4638);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4614);
				userName();
				setState(4615);
				match(IDENTIFIED);
				setState(4616);
				match(BY);
				setState(4617);
				match(PASSWORD);
				setState(4618);
				((PasswordAuthOptionContext)_localctx).hashed = match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4620);
				userName();
				setState(4621);
				match(IDENTIFIED);
				setState(4624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4622);
					match(WITH);
					setState(4623);
					authPlugin();
					}
				}

				setState(4626);
				match(BY);
				setState(4627);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4629);
				userName();
				setState(4630);
				match(IDENTIFIED);
				setState(4631);
				match(WITH);
				setState(4632);
				authPlugin();
				setState(4635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4633);
					match(AS);
					setState(4634);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4637);
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TlsOptionContext extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(MySqlParser.SSL, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTlsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTlsOption(this);
		}
	}

	public final TlsOptionContext tlsOption() throws RecognitionException {
		TlsOptionContext _localctx = new TlsOptionContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_tlsOption);
		try {
			setState(4648);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4640);
				match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(4641);
				match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4642);
				match(CIPHER);
				setState(4643);
				match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4644);
				match(ISSUER);
				setState(4645);
				match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4646);
				match(SUBJECT);
				setState(4647);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserResourceOptionContext extends ParserRuleContext {
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userResourceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserResourceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserResourceOption(this);
		}
	}

	public final UserResourceOptionContext userResourceOption() throws RecognitionException {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_userResourceOption);
		try {
			setState(4658);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4650);
				match(MAX_QUERIES_PER_HOUR);
				setState(4651);
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4652);
				match(MAX_UPDATES_PER_HOUR);
				setState(4653);
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4654);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(4655);
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4656);
				match(MAX_USER_CONNECTIONS);
				setState(4657);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserPasswordOptionContext extends ParserRuleContext {
		public Token expireType;
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userPasswordOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserPasswordOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserPasswordOption(this);
		}
	}

	public final UserPasswordOptionContext userPasswordOption() throws RecognitionException {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_userPasswordOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4660);
			match(PASSWORD);
			setState(4661);
			match(EXPIRE);
			setState(4668);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				{
				setState(4662);
				((UserPasswordOptionContext)_localctx).expireType = match(DEFAULT);
				}
				break;
			case NEVER:
				{
				setState(4663);
				((UserPasswordOptionContext)_localctx).expireType = match(NEVER);
				}
				break;
			case INTERVAL:
				{
				setState(4664);
				((UserPasswordOptionContext)_localctx).expireType = match(INTERVAL);
				setState(4665);
				decimalLiteral();
				setState(4666);
				match(DAY);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case ACCOUNT:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PASSWORD:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUSMINUS:
			case LR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserLockOptionContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(MySqlParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserLockOption(this);
		}
	}

	public final UserLockOptionContext userLockOption() throws RecognitionException {
		UserLockOptionContext _localctx = new UserLockOptionContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_userLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4670);
			match(ACCOUNT);
			setState(4671);
			((UserLockOptionContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				((UserLockOptionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivelegeClauseContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privelegeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivelegeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivelegeClause(this);
		}
	}

	public final PrivelegeClauseContext privelegeClause() throws RecognitionException {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_privelegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4673);
			privilege();
			setState(4678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(4674);
				match(LR_BRACKET);
				setState(4675);
				uidList();
				setState(4676);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode GRANT() { return getToken(MySqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(MySqlParser.USAGE, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilege(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_privilege);
		int _la;
		try {
			setState(4723);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4680);
				match(ALL);
				setState(4682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4681);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4684);
				match(ALTER);
				setState(4686);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(4685);
					match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4688);
				match(CREATE);
				setState(4695);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TEMPORARY:
					{
					setState(4689);
					match(TEMPORARY);
					setState(4690);
					match(TABLES);
					}
					break;
				case ROUTINE:
					{
					setState(4691);
					match(ROUTINE);
					}
					break;
				case VIEW:
					{
					setState(4692);
					match(VIEW);
					}
					break;
				case USER:
					{
					setState(4693);
					match(USER);
					}
					break;
				case TABLESPACE:
					{
					setState(4694);
					match(TABLESPACE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4697);
				match(DELETE);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 5);
				{
				setState(4698);
				match(DROP);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4699);
				match(EVENT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4700);
				match(EXECUTE);
				}
				break;
			case FILE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4701);
				match(FILE);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(4702);
				match(GRANT);
				setState(4703);
				match(OPTION);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 10);
				{
				setState(4704);
				match(INDEX);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(4705);
				match(INSERT);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 12);
				{
				setState(4706);
				match(LOCK);
				setState(4707);
				match(TABLES);
				}
				break;
			case PROCESS:
				enterOuterAlt(_localctx, 13);
				{
				setState(4708);
				match(PROCESS);
				}
				break;
			case PROXY:
				enterOuterAlt(_localctx, 14);
				{
				setState(4709);
				match(PROXY);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 15);
				{
				setState(4710);
				match(REFERENCES);
				}
				break;
			case RELOAD:
				enterOuterAlt(_localctx, 16);
				{
				setState(4711);
				match(RELOAD);
				}
				break;
			case REPLICATION:
				enterOuterAlt(_localctx, 17);
				{
				setState(4712);
				match(REPLICATION);
				setState(4713);
				_la = _input.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 18);
				{
				setState(4714);
				match(SELECT);
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 19);
				{
				setState(4715);
				match(SHOW);
				setState(4716);
				_la = _input.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 20);
				{
				setState(4717);
				match(SHUTDOWN);
				}
				break;
			case SUPER:
				enterOuterAlt(_localctx, 21);
				{
				setState(4718);
				match(SUPER);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 22);
				{
				setState(4719);
				match(TRIGGER);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 23);
				{
				setState(4720);
				match(UPDATE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 24);
				{
				setState(4721);
				match(USAGE);
				}
				break;
			case SESSION_VARIABLES_ADMIN:
				enterOuterAlt(_localctx, 25);
				{
				setState(4722);
				match(SESSION_VARIABLES_ADMIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeLevelContext extends ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
	 
		public PrivilegeLevelContext() { }
		public void copyFrom(PrivilegeLevelContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteSchemaPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteSchemaPrivLevel(this);
		}
	}
	public static class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext dottedId() {
			return getRuleContext(DottedIdContext.class,0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteFullTablePrivLevel2(this);
		}
	}
	public static class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteFullTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteFullTablePrivLevel(this);
		}
	}
	public static class GlobalPrivLevelContext extends PrivilegeLevelContext {
		public List<TerminalNode> STAR() { return getTokens(MySqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(MySqlParser.STAR, i);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public GlobalPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGlobalPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGlobalPrivLevel(this);
		}
	}
	public static class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefiniteTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefiniteTablePrivLevel(this);
		}
	}
	public static class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCurrentSchemaPriviLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCurrentSchemaPriviLevel(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_privilegeLevel);
		try {
			setState(4741);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4725);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4726);
				match(STAR);
				setState(4727);
				match(DOT);
				setState(4728);
				match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4729);
				uid();
				setState(4730);
				match(DOT);
				setState(4731);
				match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4733);
				uid();
				setState(4734);
				match(DOT);
				setState(4735);
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4737);
				uid();
				setState(4738);
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4740);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserClauseContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUserClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameUserClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameUserClause(this);
		}
	}

	public final RenameUserClauseContext renameUserClause() throws RecognitionException {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_renameUserClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4743);
			((RenameUserClauseContext)_localctx).fromFirst = userName();
			setState(4744);
			match(TO);
			setState(4745);
			((RenameUserClauseContext)_localctx).toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAnalyzeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAnalyzeTable(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4747);
			match(ANALYZE);
			setState(4749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4748);
				((AnalyzeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((AnalyzeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4751);
			match(TABLE);
			setState(4752);
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public List<CheckTableOptionContext> checkTableOption() {
			return getRuleContexts(CheckTableOptionContext.class);
		}
		public CheckTableOptionContext checkTableOption(int i) {
			return getRuleContext(CheckTableOptionContext.class,i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTable(this);
		}
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_checkTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4754);
			match(CHECK);
			setState(4755);
			match(TABLE);
			setState(4756);
			tables();
			setState(4760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==CHANGED || _la==EXTENDED || _la==FAST || _la==MEDIUM || _la==QUICK) {
				{
				{
				setState(4757);
				checkTableOption();
				}
				}
				setState(4762);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChecksumTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChecksumTable(this);
		}
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4763);
			match(CHECKSUM);
			setState(4764);
			match(TABLE);
			setState(4765);
			tables();
			setState(4767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				setState(4766);
				((ChecksumTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					((ChecksumTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOptimizeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOptimizeTable(this);
		}
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4769);
			match(OPTIMIZE);
			setState(4771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4770);
				((OptimizeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((OptimizeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4773);
			match(TABLE);
			setState(4774);
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRepairTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRepairTable(this);
		}
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4776);
			match(REPAIR);
			setState(4778);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4777);
				((RepairTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((RepairTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4780);
			match(TABLE);
			setState(4781);
			tables();
			setState(4783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(4782);
				match(QUICK);
				}
			}

			setState(4786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(4785);
				match(EXTENDED);
				}
			}

			setState(4789);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(4788);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTableOption(this);
		}
	}

	public final CheckTableOptionContext checkTableOption() throws RecognitionException {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_checkTableOption);
		try {
			setState(4798);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4791);
				match(FOR);
				setState(4792);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4793);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(4794);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(4795);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(4796);
				match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(4797);
				match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfunctionContext extends ParserRuleContext {
		public Token returnType;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdfunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateUdfunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateUdfunction(this);
		}
	}

	public final CreateUdfunctionContext createUdfunction() throws RecognitionException {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_createUdfunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4800);
			match(CREATE);
			setState(4802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(4801);
				match(AGGREGATE);
				}
			}

			setState(4804);
			match(FUNCTION);
			setState(4805);
			uid();
			setState(4806);
			match(RETURNS);
			setState(4807);
			((CreateUdfunctionContext)_localctx).returnType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (INTEGER - 182)) | (1L << (REAL - 182)) | (1L << (DECIMAL - 182)))) != 0) || _la==STRING) ) {
				((CreateUdfunctionContext)_localctx).returnType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4808);
			match(SONAME);
			setState(4809);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInstallPlugin(this);
		}
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4811);
			match(INSTALL);
			setState(4812);
			match(PLUGIN);
			setState(4813);
			uid();
			setState(4814);
			match(SONAME);
			setState(4815);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUninstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUninstallPlugin(this);
		}
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4817);
			match(UNINSTALL);
			setState(4818);
			match(PLUGIN);
			setState(4819);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	 
		public SetStatementContext() { }
		public void copyFrom(SetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetTransactionContext extends SetStatementContext {
		public SetTransactionStatementContext setTransactionStatement() {
			return getRuleContext(SetTransactionStatementContext.class,0);
		}
		public SetTransactionContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetTransaction(this);
		}
	}
	public static class SetCharsetContext extends SetStatementContext {
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetCharset(this);
		}
	}
	public static class SetNamesContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public SetNamesContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetNames(this);
		}
	}
	public static class SetPasswordContext extends SetStatementContext {
		public SetPasswordStatementContext setPasswordStatement() {
			return getRuleContext(SetPasswordStatementContext.class,0);
		}
		public SetPasswordContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetPassword(this);
		}
	}
	public static class SetAutocommitContext extends SetStatementContext {
		public SetAutocommitStatementContext setAutocommitStatement() {
			return getRuleContext(SetAutocommitStatementContext.class,0);
		}
		public SetAutocommitContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetAutocommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetAutocommit(this);
		}
	}
	public static class SetNewValueInsideTriggerContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public SetNewValueInsideTriggerContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetNewValueInsideTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetNewValueInsideTrigger(this);
		}
	}
	public static class SetVariableContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(MySqlParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(MySqlParser.VAR_ASSIGN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SetVariableContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSetVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSetVariable(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_setStatement);
		int _la;
		try {
			setState(4863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,701,_ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4821);
				match(SET);
				setState(4822);
				variableClause();
				setState(4823);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4824);
				expression(0);
				setState(4832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4825);
					match(COMMA);
					setState(4826);
					variableClause();
					setState(4827);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4828);
					expression(0);
					}
					}
					setState(4834);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4835);
				match(SET);
				setState(4839);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(4836);
					match(CHARACTER);
					setState(4837);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(4838);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4843);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(4841);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(4842);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4845);
				match(SET);
				setState(4846);
				match(NAMES);
				setState(4853);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(4847);
					charsetName();
					setState(4850);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE) {
						{
						setState(4848);
						match(COLLATE);
						setState(4849);
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					setState(4852);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4855);
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4856);
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4857);
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4858);
				match(SET);
				setState(4859);
				fullId();
				setState(4860);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4861);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	 
		public ShowStatementContext() { }
		public void copyFrom(ShowStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowOpenTablesContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowOpenTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowOpenTables(this);
		}
	}
	public static class ShowGlobalInfoContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return getRuleContext(ShowGlobalInfoClauseContext.class,0);
		}
		public ShowGlobalInfoContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGlobalInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGlobalInfo(this);
		}
	}
	public static class ShowCreateFullIdObjectContext extends ShowStatementContext {
		public Token namedEntity;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateFullIdObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateFullIdObject(this);
		}
	}
	public static class ShowCreateUserContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowCreateUserContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateUser(this);
		}
	}
	public static class ShowErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowErrors(this);
		}
	}
	public static class ShowCountErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCountErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCountErrors(this);
		}
	}
	public static class ShowObjectFilterContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowCommonEntityContext showCommonEntity() {
			return getRuleContext(ShowCommonEntityContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowObjectFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowObjectFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowObjectFilter(this);
		}
	}
	public static class ShowCreateDbContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public ShowCreateDbContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateDb(this);
		}
	}
	public static class ShowEngineContext extends ShowStatementContext {
		public Token engineOption;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowEngine(this);
		}
	}
	public static class ShowSchemaFilterContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return getRuleContext(ShowSchemaEntityContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSchemaFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSchemaFilter(this);
		}
	}
	public static class ShowIndexesContext extends ShowStatementContext {
		public Token indexFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowIndexesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowIndexes(this);
		}
	}
	public static class ShowLogEventsContext extends ShowStatementContext {
		public Token logFormat;
		public Token filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowLogEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowLogEvents(this);
		}
	}
	public static class ShowMasterLogsContext extends ShowStatementContext {
		public Token logFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowMasterLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowMasterLogs(this);
		}
	}
	public static class ShowGrantsContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowGrantsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGrants(this);
		}
	}
	public static class ShowSlaveStatusContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSlaveStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSlaveStatus(this);
		}
	}
	public static class ShowRoutineContext extends ShowStatementContext {
		public Token routine;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowRoutine(this);
		}
	}
	public static class ShowProfileContext extends ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public ShowProfileContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowProfile(this);
		}
	}
	public static class ShowColumnsContext extends ShowStatementContext {
		public Token columnsFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowColumnsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowColumns(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_showStatement);
		int _la;
		try {
			setState(5016);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4865);
				match(SHOW);
				setState(4866);
				((ShowMasterLogsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4867);
				match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4868);
				match(SHOW);
				setState(4869);
				((ShowLogEventsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4870);
				match(EVENTS);
				setState(4873);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(4871);
					match(IN);
					setState(4872);
					((ShowLogEventsContext)_localctx).filename = match(STRING_LITERAL);
					}
				}

				setState(4877);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(4875);
					match(FROM);
					setState(4876);
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				setState(4886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(4879);
					match(LIMIT);
					setState(4883);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,704,_ctx) ) {
					case 1:
						{
						setState(4880);
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						setState(4881);
						match(COMMA);
						}
						break;
					}
					setState(4885);
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4888);
				match(SHOW);
				setState(4889);
				showCommonEntity();
				setState(4891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4890);
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4893);
				match(SHOW);
				setState(4895);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4894);
					match(FULL);
					}
				}

				setState(4897);
				((ShowColumnsContext)_localctx).columnsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4898);
				((ShowColumnsContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4899);
				tableName();
				setState(4902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4900);
					((ShowColumnsContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4901);
					uid();
					}
				}

				setState(4905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4904);
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4907);
				match(SHOW);
				setState(4908);
				match(CREATE);
				setState(4909);
				((ShowCreateDbContext)_localctx).schemaFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4910);
					ifNotExists();
					}
				}

				setState(4913);
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4914);
				match(SHOW);
				setState(4915);
				match(CREATE);
				setState(4916);
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (PROCEDURE - 117)) | (1L << (TABLE - 117)) | (1L << (TRIGGER - 117)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4917);
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4918);
				match(SHOW);
				setState(4919);
				match(CREATE);
				setState(4920);
				match(USER);
				setState(4921);
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4922);
				match(SHOW);
				setState(4923);
				match(ENGINE);
				setState(4924);
				engineName();
				setState(4925);
				((ShowEngineContext)_localctx).engineOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(4927);
				match(SHOW);
				setState(4928);
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(4929);
				match(SHOW);
				setState(4930);
				((ShowErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				{
				setState(4931);
				match(LIMIT);
				setState(4935);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
				case 1:
					{
					setState(4932);
					((ShowErrorsContext)_localctx).offset = decimalLiteral();
					setState(4933);
					match(COMMA);
					}
					break;
				}
				setState(4937);
				((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(4938);
				match(SHOW);
				setState(4939);
				match(COUNT);
				setState(4940);
				match(LR_BRACKET);
				setState(4941);
				match(STAR);
				setState(4942);
				match(RR_BRACKET);
				setState(4943);
				((ShowCountErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(4944);
				match(SHOW);
				setState(4945);
				showSchemaEntity();
				setState(4948);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4946);
					((ShowSchemaFilterContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4947);
					uid();
					}
				}

				setState(4951);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4950);
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(4953);
				match(SHOW);
				setState(4954);
				((ShowRoutineContext)_localctx).routine = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4955);
				match(CODE);
				setState(4956);
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(4957);
				match(SHOW);
				setState(4958);
				match(GRANTS);
				setState(4961);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4959);
					match(FOR);
					setState(4960);
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(4963);
				match(SHOW);
				setState(4964);
				((ShowIndexesContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4965);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4966);
				tableName();
				setState(4969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4967);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4968);
					uid();
					}
				}

				setState(4973);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4971);
					match(WHERE);
					setState(4972);
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(4975);
				match(SHOW);
				setState(4976);
				match(OPEN);
				setState(4977);
				match(TABLES);
				setState(4980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4978);
					((ShowOpenTablesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4979);
					uid();
					}
				}

				setState(4983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4982);
					showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(4985);
				match(SHOW);
				setState(4986);
				match(PROFILE);
				setState(4987);
				showProfileType();
				setState(4992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4988);
					match(COMMA);
					setState(4989);
					showProfileType();
					}
					}
					setState(4994);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4995);
					match(FOR);
					setState(4996);
					match(QUERY);
					setState(4997);
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				setState(5000);
				match(LIMIT);
				setState(5004);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
				case 1:
					{
					setState(5001);
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					setState(5002);
					match(COMMA);
					}
					break;
				}
				setState(5006);
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(5008);
				match(SHOW);
				setState(5009);
				match(SLAVE);
				setState(5010);
				match(STATUS);
				setState(5014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5011);
					match(FOR);
					setState(5012);
					match(CHANNEL);
					setState(5013);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableClauseContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public List<TerminalNode> AT_SIGN() { return getTokens(MySqlParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(MySqlParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterVariableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitVariableClause(this);
		}
	}

	public final VariableClauseContext variableClause() throws RecognitionException {
		VariableClauseContext _localctx = new VariableClauseContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_variableClause);
		int _la;
		try {
			setState(5028);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5018);
				match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5019);
				match(GLOBAL_ID);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(5025);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
				case 1:
					{
					setState(5022);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AT_SIGN) {
						{
						setState(5020);
						match(AT_SIGN);
						setState(5021);
						match(AT_SIGN);
						}
					}

					setState(5024);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5027);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommonEntityContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(MySqlParser.SCHEMAS, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommonEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCommonEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCommonEntity(this);
		}
	}

	public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_showCommonEntity);
		int _la;
		try {
			setState(5043);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5030);
				match(CHARACTER);
				setState(5031);
				match(SET);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5032);
				match(COLLATION);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5033);
				match(DATABASES);
				}
				break;
			case SCHEMAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5034);
				match(SCHEMAS);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(5035);
				match(FUNCTION);
				setState(5036);
				match(STATUS);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5037);
				match(PROCEDURE);
				setState(5038);
				match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				enterOuterAlt(_localctx, 7);
				{
				setState(5040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(5039);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5042);
				_la = _input.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowFilter(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_showFilter);
		try {
			setState(5049);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5045);
				match(LIKE);
				setState(5046);
				match(STRING_LITERAL);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5047);
				match(WHERE);
				setState(5048);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGlobalInfoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGlobalInfoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGlobalInfoClause(this);
		}
	}

	public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_showGlobalInfoClause);
		int _la;
		try {
			setState(5068);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINES:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(5051);
					match(STORAGE);
					}
				}

				setState(5054);
				match(ENGINES);
				}
				break;
			case MASTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5055);
				match(MASTER);
				setState(5056);
				match(STATUS);
				}
				break;
			case PLUGINS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5057);
				match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 4);
				{
				setState(5058);
				match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				enterOuterAlt(_localctx, 5);
				{
				setState(5060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5059);
					match(FULL);
					}
				}

				setState(5062);
				match(PROCESSLIST);
				}
				break;
			case PROFILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(5063);
				match(PROFILES);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5064);
				match(SLAVE);
				setState(5065);
				match(HOSTS);
				}
				break;
			case AUTHORS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5066);
				match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5067);
				match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSchemaEntityContext extends ParserRuleContext {
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemaEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSchemaEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSchemaEntity(this);
		}
	}

	public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_showSchemaEntity);
		int _la;
		try {
			setState(5078);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EVENTS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5070);
				match(EVENTS);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5071);
				match(TABLE);
				setState(5072);
				match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5073);
					match(FULL);
					}
				}

				setState(5076);
				match(TABLES);
				}
				break;
			case TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5077);
				match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowProfileType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowProfileType(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_showProfileType);
		try {
			setState(5092);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5080);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5081);
				match(BLOCK);
				setState(5082);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5083);
				match(CONTEXT);
				setState(5084);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(5085);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(5086);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(5087);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5088);
				match(PAGE);
				setState(5089);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5090);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5091);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinlogStatementContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlogStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinlogStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinlogStatement(this);
		}
	}

	public final BinlogStatementContext binlogStatement() throws RecognitionException {
		BinlogStatementContext _localctx = new BinlogStatementContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_binlogStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5094);
			match(BINLOG);
			setState(5095);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheIndexStatementContext extends ParserRuleContext {
		public UidContext schema;
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public List<TableIndexesContext> tableIndexes() {
			return getRuleContexts(TableIndexesContext.class);
		}
		public TableIndexesContext tableIndexes(int i) {
			return getRuleContext(TableIndexesContext.class,i);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCacheIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCacheIndexStatement(this);
		}
	}

	public final CacheIndexStatementContext cacheIndexStatement() throws RecognitionException {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_cacheIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5097);
			match(CACHE);
			setState(5098);
			match(INDEX);
			setState(5099);
			tableIndexes();
			setState(5104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5100);
				match(COMMA);
				setState(5101);
				tableIndexes();
				}
				}
				setState(5106);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5107);
				match(PARTITION);
				setState(5108);
				match(LR_BRACKET);
				setState(5111);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5109);
					uidList();
					}
					break;
				case ALL:
					{
					setState(5110);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5113);
				match(RR_BRACKET);
				}
			}

			setState(5116);
			match(IN);
			setState(5117);
			((CacheIndexStatementContext)_localctx).schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushStatementContext extends ParserRuleContext {
		public Token flushFormat;
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFlushStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFlushStatement(this);
		}
	}

	public final FlushStatementContext flushStatement() throws RecognitionException {
		FlushStatementContext _localctx = new FlushStatementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_flushStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5119);
			match(FLUSH);
			setState(5121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5120);
				((FlushStatementContext)_localctx).flushFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((FlushStatementContext)_localctx).flushFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5123);
			flushOption();
			setState(5128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5124);
				match(COMMA);
				setState(5125);
				flushOption();
				}
				}
				setState(5130);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KillStatementContext extends ParserRuleContext {
		public Token connectionFormat;
		public TerminalNode KILL() { return getToken(MySqlParser.KILL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_killStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKillStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKillStatement(this);
		}
	}

	public final KillStatementContext killStatement() throws RecognitionException {
		KillStatementContext _localctx = new KillStatementContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_killStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5131);
			match(KILL);
			setState(5133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				setState(5132);
				((KillStatementContext)_localctx).connectionFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					((KillStatementContext)_localctx).connectionFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5136); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5135);
				decimalLiteral();
				}
				}
				setState(5138); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 987)) & ~0x3f) == 0 && ((1L << (_la - 987)) & ((1L << (ZERO_DECIMAL - 987)) | (1L << (ONE_DECIMAL - 987)) | (1L << (TWO_DECIMAL - 987)) | (1L << (DECIMAL_LITERAL - 987)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadIndexIntoCacheContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public List<LoadedTableIndexesContext> loadedTableIndexes() {
			return getRuleContexts(LoadedTableIndexesContext.class);
		}
		public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return getRuleContext(LoadedTableIndexesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexIntoCache; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadIndexIntoCache(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadIndexIntoCache(this);
		}
	}

	public final LoadIndexIntoCacheContext loadIndexIntoCache() throws RecognitionException {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_loadIndexIntoCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5140);
			match(LOAD);
			setState(5141);
			match(INDEX);
			setState(5142);
			match(INTO);
			setState(5143);
			match(CACHE);
			setState(5144);
			loadedTableIndexes();
			setState(5149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5145);
				match(COMMA);
				setState(5146);
				loadedTableIndexes();
				}
				}
				setState(5151);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResetStatement(this);
		}
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_resetStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5152);
			match(RESET);
			setState(5153);
			match(QUERY);
			setState(5154);
			match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShutdownStatementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdownStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShutdownStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShutdownStatement(this);
		}
	}

	public final ShutdownStatementContext shutdownStatement() throws RecognitionException {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_shutdownStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5156);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIndexesContext extends ParserRuleContext {
		public Token indexFormat;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableIndexes(this);
		}
	}

	public final TableIndexesContext tableIndexes() throws RecognitionException {
		TableIndexesContext _localctx = new TableIndexesContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_tableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5158);
			tableName();
			setState(5166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				setState(5160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5159);
					((TableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((TableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5162);
				match(LR_BRACKET);
				setState(5163);
				uidList();
				setState(5164);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	 
		public FlushOptionContext() { }
		public void copyFrom(FlushOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableFlushOptionContext extends FlushOptionContext {
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public FlushTableOptionContext flushTableOption() {
			return getRuleContext(FlushTableOptionContext.class,0);
		}
		public TableFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableFlushOption(this);
		}
	}
	public static class ChannelFlushOptionContext extends FlushOptionContext {
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChannelFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterChannelFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitChannelFlushOption(this);
		}
	}
	public static class SimpleFlushOptionContext extends FlushOptionContext {
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleFlushOption(this);
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_flushOption);
		int _la;
		try {
			setState(5198);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,751,_ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5186);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DES_KEY_FILE:
					{
					setState(5168);
					match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					setState(5169);
					match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					setState(5171);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BINARY || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & ((1L << (ENGINE - 331)) | (1L << (ERROR - 331)) | (1L << (GENERAL - 331)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						setState(5170);
						_la = _input.LA(1);
						if ( !(_la==BINARY || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & ((1L << (ENGINE - 331)) | (1L << (ERROR - 331)) | (1L << (GENERAL - 331)))) != 0) || _la==RELAY || _la==SLOW) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5173);
					match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					setState(5174);
					match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					setState(5175);
					match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					setState(5176);
					match(QUERY);
					setState(5177);
					match(CACHE);
					}
					break;
				case STATUS:
					{
					setState(5178);
					match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					setState(5179);
					match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					setState(5180);
					match(TABLES);
					setState(5184);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(5181);
						match(WITH);
						setState(5182);
						match(READ);
						setState(5183);
						match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5188);
				match(RELAY);
				setState(5189);
				match(LOGS);
				setState(5191);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5190);
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5193);
				match(TABLES);
				setState(5194);
				tables();
				setState(5196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					setState(5195);
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTableOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFlushTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFlushTableOption(this);
		}
	}

	public final FlushTableOptionContext flushTableOption() throws RecognitionException {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_flushTableOption);
		try {
			setState(5205);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5200);
				match(WITH);
				setState(5201);
				match(READ);
				setState(5202);
				match(LOCK);
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5203);
				match(FOR);
				setState(5204);
				match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadedTableIndexesContext extends ParserRuleContext {
		public UidListContext partitionList;
		public Token indexFormat;
		public UidListContext indexList;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadedTableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadedTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadedTableIndexes(this);
		}
	}

	public final LoadedTableIndexesContext loadedTableIndexes() throws RecognitionException {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_loadedTableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5207);
			tableName();
			setState(5215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5208);
				match(PARTITION);
				setState(5209);
				match(LR_BRACKET);
				setState(5212);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5210);
					((LoadedTableIndexesContext)_localctx).partitionList = uidList();
					}
					break;
				case ALL:
					{
					setState(5211);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5214);
				match(RR_BRACKET);
				}
			}

			setState(5224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,756,_ctx) ) {
			case 1:
				{
				setState(5218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5217);
					((LoadedTableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((LoadedTableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5220);
				match(LR_BRACKET);
				setState(5221);
				((LoadedTableIndexesContext)_localctx).indexList = uidList();
				setState(5222);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(5226);
				match(IGNORE);
				setState(5227);
				match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public UidContext column;
		public Token pattern;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDescribeStatement(this);
		}
	}

	public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_simpleDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5230);
			((SimpleDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((SimpleDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5231);
			tableName();
			setState(5234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
			case 1:
				{
				setState(5232);
				((SimpleDescribeStatementContext)_localctx).column = uid();
				}
				break;
			case 2:
				{
				setState(5233);
				((SimpleDescribeStatementContext)_localctx).pattern = match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public Token formatType;
		public Token formatValue;
		public DescribeObjectClauseContext describeObjectClause() {
			return getRuleContext(DescribeObjectClauseContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullDescribeStatement(this);
		}
	}

	public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_fullDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5236);
			((FullDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((FullDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				setState(5237);
				((FullDescribeStatementContext)_localctx).formatType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					((FullDescribeStatementContext)_localctx).formatType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5238);
				match(EQUAL_SYMBOL);
				setState(5239);
				((FullDescribeStatementContext)_localctx).formatValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					((FullDescribeStatementContext)_localctx).formatValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5242);
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpStatementContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHelpStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHelpStatement(this);
		}
	}

	public final HelpStatementContext helpStatement() throws RecognitionException {
		HelpStatementContext _localctx = new HelpStatementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_helpStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5244);
			match(HELP);
			setState(5245);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseStatementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUseStatement(this);
		}
	}

	public final UseStatementContext useStatement() throws RecognitionException {
		UseStatementContext _localctx = new UseStatementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_useStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5247);
			match(USE);
			setState(5248);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(MySqlParser.SIGNAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSignalStatement(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5250);
			match(SIGNAL);
			setState(5258);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5251);
				match(SQLSTATE);
				setState(5253);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5252);
					match(VALUE);
					}
				}

				setState(5255);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5256);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5257);
				match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5269);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
			case 1:
				{
				setState(5260);
				match(SET);
				setState(5261);
				signalConditionInformation();
				setState(5266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5262);
					match(COMMA);
					setState(5263);
					signalConditionInformation();
					}
					}
					setState(5268);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL() { return getToken(MySqlParser.RESIGNAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResignalStatement(this);
		}
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_resignalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5271);
			match(RESIGNAL);
			setState(5279);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5272);
				match(SQLSTATE);
				setState(5274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5273);
					match(VALUE);
					}
				}

				setState(5276);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5277);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5278);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUSMINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			setState(5290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
			case 1:
				{
				setState(5281);
				match(SET);
				setState(5282);
				signalConditionInformation();
				setState(5287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5283);
					match(COMMA);
					setState(5284);
					signalConditionInformation();
					}
					}
					setState(5289);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalConditionInformationContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalConditionInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSignalConditionInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSignalConditionInformation(this);
		}
	}

	public final SignalConditionInformationContext signalConditionInformation() throws RecognitionException {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_signalConditionInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5292);
			_la = _input.LA(1);
			if ( !(((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (CLASS_ORIGIN - 286)) | (1L << (COLUMN_NAME - 286)) | (1L << (CONSTRAINT_CATALOG - 286)) | (1L << (CONSTRAINT_SCHEMA - 286)) | (1L << (CONSTRAINT_NAME - 286)) | (1L << (CURSOR_NAME - 286)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5293);
			match(EQUAL_SYMBOL);
			setState(5296);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case STRING_CHARSET_NAME:
				{
				setState(5294);
				stringLiteral();
				}
				break;
			case DECIMAL_LITERAL:
				{
				setState(5295);
				match(DECIMAL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsStatementContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(MySqlParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public List<DiagnosticsConditionInformationNameContext> diagnosticsConditionInformationName() {
			return getRuleContexts(DiagnosticsConditionInformationNameContext.class);
		}
		public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return getRuleContext(DiagnosticsConditionInformationNameContext.class,i);
		}
		public List<TerminalNode> NUMBER() { return getTokens(MySqlParser.NUMBER); }
		public TerminalNode NUMBER(int i) {
			return getToken(MySqlParser.NUMBER, i);
		}
		public List<TerminalNode> ROW_COUNT() { return getTokens(MySqlParser.ROW_COUNT); }
		public TerminalNode ROW_COUNT(int i) {
			return getToken(MySqlParser.ROW_COUNT, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDiagnosticsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDiagnosticsStatement(this);
		}
	}

	public final DiagnosticsStatementContext diagnosticsStatement() throws RecognitionException {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_diagnosticsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5298);
			match(GET);
			setState(5300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				setState(5299);
				_la = _input.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5302);
			match(DIAGNOSTICS);
			setState(5334);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				{
				setState(5303);
				variableClause();
				setState(5304);
				match(EQUAL_SYMBOL);
				setState(5305);
				_la = _input.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5313);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5306);
					match(COMMA);
					setState(5307);
					variableClause();
					setState(5308);
					match(EQUAL_SYMBOL);
					setState(5309);
					_la = _input.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(5315);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case CONDITION:
				{
				{
				setState(5316);
				match(CONDITION);
				setState(5319);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
					{
					setState(5317);
					decimalLiteral();
					}
					break;
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					setState(5318);
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5321);
				variableClause();
				setState(5322);
				match(EQUAL_SYMBOL);
				setState(5323);
				diagnosticsConditionInformationName();
				setState(5331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5324);
					match(COMMA);
					setState(5325);
					variableClause();
					setState(5326);
					match(EQUAL_SYMBOL);
					setState(5327);
					diagnosticsConditionInformationName();
					}
					}
					setState(5333);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsConditionInformationNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsConditionInformationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDiagnosticsConditionInformationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDiagnosticsConditionInformationName(this);
		}
	}

	public final DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() throws RecognitionException {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5336);
			_la = _input.LA(1);
			if ( !(((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (CLASS_ORIGIN - 286)) | (1L << (COLUMN_NAME - 286)) | (1L << (CONSTRAINT_CATALOG - 286)) | (1L << (CONSTRAINT_SCHEMA - 286)) | (1L << (CONSTRAINT_NAME - 286)) | (1L << (CURSOR_NAME - 286)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (RETURNED_SQLSTATE - 494)) | (1L << (SUBCLASS_ORIGIN - 494)) | (1L << (TABLE_NAME - 494)))) != 0) || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescribeStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescribeStatements(this);
		}
	}
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescribeConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescribeConnection(this);
		}
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_describeObjectClause);
		try {
			setState(5348);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5343);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					setState(5338);
					selectStatement();
					}
					break;
				case DELETE:
					{
					setState(5339);
					deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(5340);
					insertStatement();
					}
					break;
				case REPLACE:
					{
					setState(5341);
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					setState(5342);
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5345);
				match(FOR);
				setState(5346);
				match(CONNECTION);
				setState(5347);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullId(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5350);
			uid();
			setState(5354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
			case 1:
				{
				setState(5351);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(5352);
				match(DOT);
				setState(5353);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableName(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5356);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnName(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_fullColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5358);
			uid();
			setState(5363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
			case 1:
				{
				setState(5359);
				dottedId();
				setState(5361);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
				case 1:
					{
					setState(5360);
					dottedId();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public Token sortType;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnName(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
			case 1:
				{
				setState(5365);
				uid();
				}
				break;
			case 2:
				{
				setState(5366);
				match(STRING_LITERAL);
				}
				break;
			}
			setState(5373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5369);
				match(LR_BRACKET);
				setState(5370);
				decimalLiteral();
				setState(5371);
				match(RR_BRACKET);
				}
			}

			setState(5376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(5375);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserNameContext extends ParserRuleContext {
		public TerminalNode STRING_USER_NAME() { return getToken(MySqlParser.STRING_USER_NAME, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserName(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_userName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5378);
			_la = _input.LA(1);
			if ( !(((((_la - 997)) & ~0x3f) == 0 && ((1L << (_la - 997)) & ((1L << (STRING_LITERAL - 997)) | (1L << (ID - 997)) | (1L << (STRING_USER_NAME - 997)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariable(this);
		}
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5380);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetName(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_charsetName);
		try {
			setState(5386);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5382);
				match(BINARY);
				}
				break;
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
				enterOuterAlt(_localctx, 2);
				{
				setState(5383);
				charsetNameBase();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5384);
				match(STRING_LITERAL);
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				enterOuterAlt(_localctx, 4);
				{
				setState(5385);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollationName(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_collationName);
		try {
			setState(5390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5388);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5389);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(MySqlParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(MySqlParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(MySqlParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(MySqlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(MySqlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(MySqlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(MySqlParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(MySqlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(MySqlParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEngineName(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5392);
			_la = _input.LA(1);
			if ( !(((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (ARCHIVE - 639)) | (1L << (BLACKHOLE - 639)) | (1L << (CSV - 639)) | (1L << (FEDERATED - 639)) | (1L << (INNODB - 639)) | (1L << (MEMORY - 639)) | (1L << (MRG_MYISAM - 639)) | (1L << (MYISAM - 639)) | (1L << (NDB - 639)) | (1L << (NDBCLUSTER - 639)) | (1L << (PERFORMANCE_SCHEMA - 639)) | (1L << (TOKUDB - 639)))) != 0) || ((((_la - 997)) & ~0x3f) == 0 && ((1L << (_la - 997)) & ((1L << (STRING_LITERAL - 997)) | (1L << (ID - 997)) | (1L << (REVERSE_QUOTE_ID - 997)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UuidSetContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public List<TerminalNode> COLON_SYMB() { return getTokens(MySqlParser.COLON_SYMB); }
		public TerminalNode COLON_SYMB(int i) {
			return getToken(MySqlParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUuidSet(this);
		}
	}

	public final UuidSetContext uuidSet() throws RecognitionException {
		UuidSetContext _localctx = new UuidSetContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_uuidSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5394);
			decimalLiteral();
			setState(5395);
			match(MINUS);
			setState(5396);
			decimalLiteral();
			setState(5397);
			match(MINUS);
			setState(5398);
			decimalLiteral();
			setState(5399);
			match(MINUS);
			setState(5400);
			decimalLiteral();
			setState(5401);
			match(MINUS);
			setState(5402);
			decimalLiteral();
			setState(5408); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5403);
				match(COLON_SYMB);
				setState(5404);
				decimalLiteral();
				setState(5405);
				match(MINUS);
				setState(5406);
				decimalLiteral();
				}
				}
				setState(5410); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		public List<XuidStringIdContext> xuidStringId() {
			return getRuleContexts(XuidStringIdContext.class);
		}
		public XuidStringIdContext xuidStringId(int i) {
			return getRuleContext(XuidStringIdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXid(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5412);
			((XidContext)_localctx).globalTableUid = xuidStringId();
			setState(5419);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5413);
				match(COMMA);
				setState(5414);
				((XidContext)_localctx).qualifier = xuidStringId();
				setState(5417);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5415);
					match(COMMA);
					setState(5416);
					((XidContext)_localctx).idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XuidStringIdContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(MySqlParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xuidStringId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXuidStringId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXuidStringId(this);
		}
	}

	public final XuidStringIdContext xuidStringId() throws RecognitionException {
		XuidStringIdContext _localctx = new XuidStringIdContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_xuidStringId);
		int _la;
		try {
			setState(5428);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5421);
				match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5422);
				match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5424); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5423);
					match(HEXADECIMAL_LITERAL);
					}
					}
					setState(5426); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAuthPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAuthPlugin(this);
		}
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_authPlugin);
		try {
			setState(5432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5430);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5431);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUid(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_uid);
		try {
			setState(5437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5434);
				simpleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5435);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5436);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleId(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_simpleId);
		try {
			setState(5448);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5439);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5440);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5441);
				transactionLevelBase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5442);
				engineName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5443);
				privilegesBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5444);
				intervalTypeBase();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5445);
				dataTypeBase();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5446);
				keywordsCanBeId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5447);
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDottedId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDottedId(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_dottedId);
		try {
			setState(5453);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5450);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5451);
				match(DOT);
				setState(5452);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalLiteral(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5455);
			_la = _input.LA(1);
			if ( !(((((_la - 987)) & ~0x3f) == 0 && ((1L << (_la - 987)) & ((1L << (ZERO_DECIMAL - 987)) | (1L << (ONE_DECIMAL - 987)) | (1L << (TWO_DECIMAL - 987)) | (1L << (DECIMAL_LITERAL - 987)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(MySqlParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFileSizeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFileSizeLiteral(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_fileSizeLiteral);
		try {
			setState(5459);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5457);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5458);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringLiteral(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(5484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5466);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5462);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5461);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(5464);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5465);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5469); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5468);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5471); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,796,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5478);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5474);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5473);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(5476);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5477);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5482);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
				case 1:
					{
					setState(5480);
					match(COLLATE);
					setState(5481);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBooleanLiteral(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5486);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHexadecimalLiteral(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(5488);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(5491);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullNotnull(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5494);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5493);
				match(NOT);
				}
			}

			setState(5496);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstant(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_constant);
		int _la;
		try {
			setState(5510);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5498);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5499);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5500);
				match(MINUS);
				setState(5501);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5502);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5503);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5504);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5505);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5506);
					match(NOT);
					}
				}

				setState(5509);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(MySqlParser.GEOMCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode GEOMETRY() { return getToken(MySqlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpatialDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpatialDataType(this);
		}
	}
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionDataType(this);
		}
	}
	public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalVaryingStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalVaryingStringDataType(this);
		}
	}
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode TINYINT() { return getToken(MySqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(MySqlParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(MySqlParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(MySqlParser.BIGINT, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode ZEROFILL() { return getToken(MySqlParser.ZEROFILL, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(MySqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(MySqlParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(MySqlParser.DEC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(MySqlParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(MySqlParser.FLOAT, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDimensionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDimensionDataType(this);
		}
	}
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(MySqlParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(MySqlParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(MySqlParser.LONGTEXT, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(MySqlParser.NVARCHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringDataType(this);
		}
	}
	public static class NationalStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalStringDataType(this);
		}
	}
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(MySqlParser.TINYBLOB, 0); }
		public TerminalNode BLOB() { return getToken(MySqlParser.BLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(MySqlParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(MySqlParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDataType(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_dataType);
		int _la;
		try {
			setState(5618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,833,_ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5512);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (CHAR - 196)) | (1L << (VARCHAR - 196)) | (1L << (NVARCHAR - 196)) | (1L << (TINYTEXT - 196)) | (1L << (TEXT - 196)) | (1L << (MEDIUMTEXT - 196)) | (1L << (LONGTEXT - 196)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5514);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
				case 1:
					{
					setState(5513);
					lengthOneDimension();
					}
					break;
				}
				setState(5517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5516);
					match(BINARY);
					}
				}

				setState(5525);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
				case 1:
					{
					setState(5522);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5519);
						match(CHARACTER);
						setState(5520);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5521);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5524);
					charsetName();
					}
					break;
				}
				setState(5529);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
				case 1:
					{
					setState(5527);
					match(COLLATE);
					setState(5528);
					collationName();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5531);
				match(NATIONAL);
				setState(5532);
				((NationalStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5534);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
				case 1:
					{
					setState(5533);
					lengthOneDimension();
					}
					break;
				}
				setState(5537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5536);
					match(BINARY);
					}
				}

				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5539);
				match(NCHAR);
				setState(5540);
				((NationalStringDataTypeContext)_localctx).typeName = match(VARCHAR);
				setState(5542);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,812,_ctx) ) {
				case 1:
					{
					setState(5541);
					lengthOneDimension();
					}
					break;
				}
				setState(5545);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5544);
					match(BINARY);
					}
				}

				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5547);
				match(NATIONAL);
				setState(5548);
				((NationalVaryingStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5549);
				match(VARYING);
				setState(5551);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
				case 1:
					{
					setState(5550);
					lengthOneDimension();
					}
					break;
				}
				setState(5554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5553);
					match(BINARY);
					}
				}

				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5556);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (TINYINT - 178)) | (1L << (SMALLINT - 178)) | (1L << (MEDIUMINT - 178)) | (1L << (INT - 178)) | (1L << (INTEGER - 178)) | (1L << (BIGINT - 178)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5558);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
				case 1:
					{
					setState(5557);
					lengthOneDimension();
					}
					break;
				}
				setState(5561);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
				case 1:
					{
					setState(5560);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5563);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5566);
				((DimensionDataTypeContext)_localctx).typeName = match(REAL);
				setState(5568);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,819,_ctx) ) {
				case 1:
					{
					setState(5567);
					lengthTwoDimension();
					}
					break;
				}
				setState(5571);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
				case 1:
					{
					setState(5570);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5573);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5576);
				((DimensionDataTypeContext)_localctx).typeName = match(DOUBLE);
				setState(5578);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5577);
					match(PRECISION);
					}
				}

				setState(5581);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,823,_ctx) ) {
				case 1:
					{
					setState(5580);
					lengthTwoDimension();
					}
					break;
				}
				setState(5584);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,824,_ctx) ) {
				case 1:
					{
					setState(5583);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5586);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5589);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (FLOAT - 187)) | (1L << (DECIMAL - 187)) | (1L << (DEC - 187)) | (1L << (NUMERIC - 187)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5591);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
				case 1:
					{
					setState(5590);
					lengthTwoOptionalDimension();
					}
					break;
				}
				setState(5594);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
				case 1:
					{
					setState(5593);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5597);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5596);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5599);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TINYBLOB - 191)) | (1L << (BLOB - 191)) | (1L << (MEDIUMBLOB - 191)) | (1L << (LONGBLOB - 191)) | (1L << (SERIAL - 191)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5600);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (DATETIME - 192)) | (1L << (YEAR - 192)) | (1L << (BINARY - 192)) | (1L << (VARBINARY - 192)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5602);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
				case 1:
					{
					setState(5601);
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5604);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5605);
				collectionOptions();
				setState(5607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5606);
					match(BINARY);
					}
				}

				setState(5615);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
				case 1:
					{
					setState(5612);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5609);
						match(CHARACTER);
						setState(5610);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5611);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5614);
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5617);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (GEOMETRYCOLLECTION - 655)) | (1L << (GEOMCOLLECTION - 655)) | (1L << (GEOMETRY - 655)) | (1L << (LINESTRING - 655)) | (1L << (MULTILINESTRING - 655)) | (1L << (MULTIPOINT - 655)) | (1L << (MULTIPOLYGON - 655)) | (1L << (POINT - 655)) | (1L << (POLYGON - 655)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionOptions(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5620);
			match(LR_BRACKET);
			setState(5621);
			match(STRING_LITERAL);
			setState(5626);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5622);
				match(COMMA);
				setState(5623);
				match(STRING_LITERAL);
				}
				}
				setState(5628);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5629);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConvertedDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConvertedDataType(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_convertedDataType);
		int _la;
		try {
			setState(5656);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5631);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5632);
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5635);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(5637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5636);
					lengthOneDimension();
					}
				}

				setState(5645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHARSET) {
					{
					setState(5642);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5639);
						match(CHARACTER);
						setState(5640);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5641);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5644);
					charsetName();
					}
				}

				}
				break;
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				enterOuterAlt(_localctx, 3);
				{
				setState(5647);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (DATETIME - 191)))) != 0) || _la==JSON) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5648);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(5650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5649);
					lengthTwoDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				enterOuterAlt(_localctx, 5);
				{
				setState(5652);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(5653);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthOneDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthOneDimension(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5658);
			match(LR_BRACKET);
			setState(5659);
			decimalLiteral();
			setState(5660);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoDimension(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5662);
			match(LR_BRACKET);
			setState(5663);
			decimalLiteral();
			setState(5664);
			match(COMMA);
			setState(5665);
			decimalLiteral();
			setState(5666);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoOptionalDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoOptionalDimension(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5668);
			match(LR_BRACKET);
			setState(5669);
			decimalLiteral();
			setState(5672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5670);
				match(COMMA);
				setState(5671);
				decimalLiteral();
				}
			}

			setState(5674);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUidList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUidList(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_uidList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5676);
			uid();
			setState(5681);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5677);
					match(COMMA);
					setState(5678);
					uid();
					}
					} 
				}
				setState(5683);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTables(this);
		}
	}

	public final TablesContext tables() throws RecognitionException {
		TablesContext _localctx = new TablesContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_tables);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5684);
			tableName();
			setState(5689);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,844,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5685);
					match(COMMA);
					setState(5686);
					tableName();
					}
					} 
				}
				setState(5691);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,844,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnNames(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5692);
			match(LR_BRACKET);
			setState(5693);
			indexColumnName();
			setState(5698);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5694);
				match(COMMA);
				setState(5695);
				indexColumnName();
				}
				}
				setState(5700);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5701);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressions(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5703);
			expression(0);
			setState(5708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5704);
				match(COMMA);
				setState(5705);
				expression(0);
				}
				}
				setState(5710);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionsWithDefaults(this);
		}
	}

	public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_expressionsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5711);
			expressionOrDefault();
			setState(5716);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5712);
				match(COMMA);
				setState(5713);
				expressionOrDefault();
				}
				}
				setState(5718);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstants(this);
		}
	}

	public final ConstantsContext constants() throws RecognitionException {
		ConstantsContext _localctx = new ConstantsContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_constants);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5719);
			constant();
			setState(5724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5720);
				match(COMMA);
				setState(5721);
				constant();
				}
				}
				setState(5726);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStringsContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStrings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleStrings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleStrings(this);
		}
	}

	public final SimpleStringsContext simpleStrings() throws RecognitionException {
		SimpleStringsContext _localctx = new SimpleStringsContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_simpleStrings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5727);
			match(STRING_LITERAL);
			setState(5732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5728);
				match(COMMA);
				setState(5729);
				match(STRING_LITERAL);
				}
				}
				setState(5734);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariablesContext extends ParserRuleContext {
		public List<TerminalNode> LOCAL_ID() { return getTokens(MySqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MySqlParser.LOCAL_ID, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserVariables(this);
		}
	}

	public final UserVariablesContext userVariables() throws RecognitionException {
		UserVariablesContext _localctx = new UserVariablesContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_userVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5735);
			match(LOCAL_ID);
			setState(5740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5736);
				match(COMMA);
				setState(5737);
				match(LOCAL_ID);
				}
				}
				setState(5742);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultValue(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_defaultValue);
		try {
			setState(5754);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,853,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5743);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5745);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
				case 1:
					{
					setState(5744);
					unaryOperator();
					}
					break;
				}
				setState(5747);
				constant();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5748);
				currentTimestamp();
				setState(5752);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
				case 1:
					{
					setState(5749);
					match(ON);
					setState(5750);
					match(UPDATE);
					setState(5751);
					currentTimestamp();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCurrentTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCurrentTimestamp(this);
		}
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5770);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				setState(5756);
				_la = _input.LA(1);
				if ( !(((((_la - 242)) & ~0x3f) == 0 && ((1L << (_la - 242)) & ((1L << (CURRENT_TIMESTAMP - 242)) | (1L << (LOCALTIME - 242)) | (1L << (LOCALTIMESTAMP - 242)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5762);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,855,_ctx) ) {
				case 1:
					{
					setState(5757);
					match(LR_BRACKET);
					setState(5759);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 987)) & ~0x3f) == 0 && ((1L << (_la - 987)) & ((1L << (ZERO_DECIMAL - 987)) | (1L << (ONE_DECIMAL - 987)) | (1L << (TWO_DECIMAL - 987)) | (1L << (DECIMAL_LITERAL - 987)))) != 0)) {
						{
						setState(5758);
						decimalLiteral();
						}
					}

					setState(5761);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				setState(5764);
				match(NOW);
				setState(5765);
				match(LR_BRACKET);
				setState(5767);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 987)) & ~0x3f) == 0 && ((1L << (_la - 987)) & ((1L << (ZERO_DECIMAL - 987)) | (1L << (ONE_DECIMAL - 987)) | (1L << (TWO_DECIMAL - 987)) | (1L << (DECIMAL_LITERAL - 987)))) != 0)) {
					{
					setState(5766);
					decimalLiteral();
					}
				}

				setState(5769);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionOrDefault(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_expressionOrDefault);
		try {
			setState(5774);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DIAGNOSTICS:
			case EXISTS:
			case FALSE:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case NUMBER:
			case REPLACE:
			case RIGHT:
			case STACKED:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5772);
				expression(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5773);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfExists(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5776);
			match(IF);
			setState(5777);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfNotExists(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5779);
			match(IF);
			setState(5780);
			match(NOT);
			setState(5781);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecificFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecificFunctionCall(this);
		}
	}
	public static class PasswordFunctionCallContext extends FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordFunctionCall(this);
		}
	}
	public static class UdfFunctionCallContext extends FunctionCallContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public UdfFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUdfFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUdfFunctionCall(this);
		}
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateFunctionCall(this);
		}
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionCall(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_functionCall);
		int _la;
		try {
			setState(5800);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5783);
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5784);
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5785);
				scalarFunctionName();
				setState(5786);
				match(LR_BRACKET);
				setState(5788);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (IF - 69)) | (1L << (INSERT - 69)) | (1L << (INTERVAL - 69)) | (1L << (LEFT - 69)) | (1L << (NOT - 69)) | (1L << (NULL_LITERAL - 69)) | (1L << (NUMBER - 69)) | (1L << (REPLACE - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (RIGHT - 133)) | (1L << (STACKED - 133)) | (1L << (TRUE - 133)) | (1L << (VALUES - 133)) | (1L << (DATE - 133)) | (1L << (TIME - 133)) | (1L << (TIMESTAMP - 133)) | (1L << (DATETIME - 133)) | (1L << (YEAR - 133)) | (1L << (CHAR - 133)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (BINARY - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)) | (1L << (CURRENT_DATE - 200)) | (1L << (CURRENT_TIME - 200)) | (1L << (CURRENT_TIMESTAMP - 200)) | (1L << (LOCALTIME - 200)) | (1L << (CURDATE - 200)) | (1L << (CURTIME - 200)) | (1L << (DATE_ADD - 200)) | (1L << (DATE_SUB - 200)) | (1L << (EXTRACT - 200)) | (1L << (LOCALTIMESTAMP - 200)) | (1L << (NOW - 200)) | (1L << (POSITION - 200)) | (1L << (SUBSTR - 200)) | (1L << (SUBSTRING - 200)) | (1L << (SYSDATE - 200)) | (1L << (TRIM - 200)) | (1L << (UTC_DATE - 200)) | (1L << (UTC_TIME - 200)) | (1L << (UTC_TIMESTAMP - 200)) | (1L << (ACCOUNT - 200)) | (1L << (ACTION - 200)) | (1L << (AFTER - 200)) | (1L << (AGGREGATE - 200)) | (1L << (ALGORITHM - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)) | (1L << (CLASS_ORIGIN - 264)) | (1L << (CLIENT - 264)) | (1L << (CLOSE - 264)) | (1L << (COALESCE - 264)) | (1L << (CODE - 264)) | (1L << (COLUMNS - 264)) | (1L << (COLUMN_FORMAT - 264)) | (1L << (COLUMN_NAME - 264)) | (1L << (COMMENT - 264)) | (1L << (COMMIT - 264)) | (1L << (COMPACT - 264)) | (1L << (COMPLETION - 264)) | (1L << (COMPRESSED - 264)) | (1L << (COMPRESSION - 264)) | (1L << (CONCURRENT - 264)) | (1L << (CONNECTION - 264)) | (1L << (CONSISTENT - 264)) | (1L << (CONSTRAINT_CATALOG - 264)) | (1L << (CONSTRAINT_SCHEMA - 264)) | (1L << (CONSTRAINT_NAME - 264)) | (1L << (CONTAINS - 264)) | (1L << (CONTEXT - 264)) | (1L << (CONTRIBUTORS - 264)) | (1L << (COPY - 264)) | (1L << (CPU - 264)) | (1L << (CURSOR_NAME - 264)) | (1L << (DATA - 264)) | (1L << (DATAFILE - 264)) | (1L << (DEALLOCATE - 264)) | (1L << (DEFAULT_AUTH - 264)) | (1L << (DEFINER - 264)) | (1L << (DELAY_KEY_WRITE - 264)) | (1L << (DES_KEY_FILE - 264)) | (1L << (DIRECTORY - 264)) | (1L << (DISABLE - 264)) | (1L << (DISCARD - 264)) | (1L << (DISK - 264)) | (1L << (DO - 264)) | (1L << (DUMPFILE - 264)) | (1L << (DUPLICATE - 264)) | (1L << (DYNAMIC - 264)) | (1L << (ENABLE - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)) | (1L << (FILE_BLOCK_SIZE - 328)) | (1L << (FILTER - 328)) | (1L << (FIRST - 328)) | (1L << (FIXED - 328)) | (1L << (FLUSH - 328)) | (1L << (FOLLOWS - 328)) | (1L << (FOUND - 328)) | (1L << (FULL - 328)) | (1L << (FUNCTION - 328)) | (1L << (GENERAL - 328)) | (1L << (GLOBAL - 328)) | (1L << (GRANTS - 328)) | (1L << (GROUP_REPLICATION - 328)) | (1L << (HANDLER - 328)) | (1L << (HASH - 328)) | (1L << (HELP - 328)) | (1L << (HOST - 328)) | (1L << (HOSTS - 328)) | (1L << (IDENTIFIED - 328)) | (1L << (IGNORE_SERVER_IDS - 328)) | (1L << (IMPORT - 328)) | (1L << (INDEXES - 328)) | (1L << (INITIAL_SIZE - 328)) | (1L << (INPLACE - 328)) | (1L << (INSERT_METHOD - 328)) | (1L << (INSTALL - 328)) | (1L << (INSTANCE - 328)) | (1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (KEY_BLOCK_SIZE - 328)) | (1L << (LANGUAGE - 328)) | (1L << (LAST - 328)) | (1L << (LEAVES - 328)) | (1L << (LESS - 328)) | (1L << (LEVEL - 328)) | (1L << (LIST - 328)) | (1L << (LOCAL - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MID - 392)) | (1L << (MIGRATE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NCHAR - 392)) | (1L << (NEVER - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)) | (1L << (OFFLINE - 392)) | (1L << (OFFSET - 392)) | (1L << (OJ - 392)) | (1L << (OLD_PASSWORD - 392)) | (1L << (ONE - 392)) | (1L << (ONLINE - 392)) | (1L << (ONLY - 392)) | (1L << (OPEN - 392)) | (1L << (OPTIMIZER_COSTS - 392)) | (1L << (OPTIONS - 392)) | (1L << (OWNER - 392)) | (1L << (PACK_KEYS - 392)) | (1L << (PAGE - 392)) | (1L << (PARSER - 392)) | (1L << (PARTIAL - 392)) | (1L << (PARTITIONING - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)) | (1L << (RECOVER - 456)) | (1L << (REDO_BUFFER_SIZE - 456)) | (1L << (REDUNDANT - 456)) | (1L << (RELAY - 456)) | (1L << (RELAY_LOG_FILE - 456)) | (1L << (RELAY_LOG_POS - 456)) | (1L << (RELAYLOG - 456)) | (1L << (REMOVE - 456)) | (1L << (REORGANIZE - 456)) | (1L << (REPAIR - 456)) | (1L << (REPLICATE_DO_DB - 456)) | (1L << (REPLICATE_DO_TABLE - 456)) | (1L << (REPLICATE_IGNORE_DB - 456)) | (1L << (REPLICATE_IGNORE_TABLE - 456)) | (1L << (REPLICATE_REWRITE_DB - 456)) | (1L << (REPLICATE_WILD_DO_TABLE - 456)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 456)) | (1L << (REPLICATION - 456)) | (1L << (RESET - 456)) | (1L << (RESUME - 456)) | (1L << (RETURNED_SQLSTATE - 456)) | (1L << (RETURNS - 456)) | (1L << (ROLLBACK - 456)) | (1L << (ROLLUP - 456)) | (1L << (ROTATE - 456)) | (1L << (ROW - 456)) | (1L << (ROWS - 456)) | (1L << (ROW_FORMAT - 456)) | (1L << (SAVEPOINT - 456)) | (1L << (SCHEDULE - 456)) | (1L << (SECURITY - 456)) | (1L << (SERVER - 456)) | (1L << (SESSION - 456)) | (1L << (SHARE - 456)) | (1L << (SHARED - 456)) | (1L << (SIGNED - 456)) | (1L << (SIMPLE - 456)) | (1L << (SLAVE - 456)) | (1L << (SLOW - 456)) | (1L << (SNAPSHOT - 456)) | (1L << (SOCKET - 456)) | (1L << (SOME - 456)) | (1L << (SONAME - 456)) | (1L << (SOUNDS - 456)) | (1L << (SOURCE - 456)) | (1L << (SQL_AFTER_GTIDS - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)) | (1L << (SUBCLASS_ORIGIN - 520)) | (1L << (SUBJECT - 520)) | (1L << (SUBPARTITION - 520)) | (1L << (SUBPARTITIONS - 520)) | (1L << (SUSPEND - 520)) | (1L << (SWAPS - 520)) | (1L << (SWITCHES - 520)) | (1L << (TABLE_NAME - 520)) | (1L << (TABLESPACE - 520)) | (1L << (TEMPORARY - 520)) | (1L << (TEMPTABLE - 520)) | (1L << (THAN - 520)) | (1L << (TRADITIONAL - 520)) | (1L << (TRANSACTION - 520)) | (1L << (TRIGGERS - 520)) | (1L << (TRUNCATE - 520)) | (1L << (UNDEFINED - 520)) | (1L << (UNDOFILE - 520)) | (1L << (UNDO_BUFFER_SIZE - 520)) | (1L << (UNINSTALL - 520)) | (1L << (UNKNOWN - 520)) | (1L << (UNTIL - 520)) | (1L << (UPGRADE - 520)) | (1L << (USER - 520)) | (1L << (USE_FRM - 520)) | (1L << (USER_RESOURCES - 520)) | (1L << (VALIDATION - 520)) | (1L << (VALUE - 520)) | (1L << (VARIABLES - 520)) | (1L << (VIEW - 520)) | (1L << (VISIBLE - 520)) | (1L << (WAIT - 520)) | (1L << (WARNINGS - 520)) | (1L << (WITHOUT - 520)) | (1L << (WORK - 520)) | (1L << (WRAPPER - 520)) | (1L << (X509 - 520)) | (1L << (XA - 520)) | (1L << (XML - 520)) | (1L << (INTERNAL - 520)) | (1L << (QUARTER - 520)) | (1L << (MONTH - 520)) | (1L << (DAY - 520)))) != 0) || ((((_la - 584)) & ~0x3f) == 0 && ((1L << (_la - 584)) & ((1L << (HOUR - 584)) | (1L << (MINUTE - 584)) | (1L << (WEEK - 584)) | (1L << (SECOND - 584)) | (1L << (MICROSECOND - 584)) | (1L << (TABLES - 584)) | (1L << (ROUTINE - 584)) | (1L << (EXECUTE - 584)) | (1L << (FILE - 584)) | (1L << (PROCESS - 584)) | (1L << (RELOAD - 584)) | (1L << (SHUTDOWN - 584)) | (1L << (SUPER - 584)) | (1L << (PRIVILEGES - 584)) | (1L << (SESSION_VARIABLES_ADMIN - 584)) | (1L << (ARMSCII8 - 584)) | (1L << (ASCII - 584)) | (1L << (BIG5 - 584)) | (1L << (CP1250 - 584)) | (1L << (CP1251 - 584)) | (1L << (CP1256 - 584)) | (1L << (CP1257 - 584)) | (1L << (CP850 - 584)) | (1L << (CP852 - 584)) | (1L << (CP866 - 584)) | (1L << (CP932 - 584)) | (1L << (DEC8 - 584)) | (1L << (EUCJPMS - 584)) | (1L << (EUCKR - 584)) | (1L << (GB2312 - 584)) | (1L << (GBK - 584)) | (1L << (GEOSTD8 - 584)) | (1L << (GREEK - 584)) | (1L << (HEBREW - 584)) | (1L << (HP8 - 584)) | (1L << (KEYBCS2 - 584)) | (1L << (KOI8R - 584)) | (1L << (KOI8U - 584)) | (1L << (LATIN1 - 584)) | (1L << (LATIN2 - 584)) | (1L << (LATIN5 - 584)) | (1L << (LATIN7 - 584)) | (1L << (MACCE - 584)) | (1L << (MACROMAN - 584)) | (1L << (SJIS - 584)) | (1L << (SWE7 - 584)) | (1L << (TIS620 - 584)) | (1L << (UCS2 - 584)) | (1L << (UJIS - 584)) | (1L << (UTF16 - 584)) | (1L << (UTF16LE - 584)) | (1L << (UTF32 - 584)) | (1L << (UTF8 - 584)) | (1L << (UTF8MB3 - 584)) | (1L << (UTF8MB4 - 584)) | (1L << (ARCHIVE - 584)) | (1L << (BLACKHOLE - 584)) | (1L << (CSV - 584)) | (1L << (FEDERATED - 584)) | (1L << (INNODB - 584)) | (1L << (MEMORY - 584)) | (1L << (MRG_MYISAM - 584)) | (1L << (MYISAM - 584)) | (1L << (NDB - 584)))) != 0) || ((((_la - 648)) & ~0x3f) == 0 && ((1L << (_la - 648)) & ((1L << (NDBCLUSTER - 648)) | (1L << (PERFORMANCE_SCHEMA - 648)) | (1L << (TOKUDB - 648)) | (1L << (REPEATABLE - 648)) | (1L << (COMMITTED - 648)) | (1L << (UNCOMMITTED - 648)) | (1L << (SERIALIZABLE - 648)) | (1L << (GEOMETRYCOLLECTION - 648)) | (1L << (LINESTRING - 648)) | (1L << (MULTILINESTRING - 648)) | (1L << (MULTIPOINT - 648)) | (1L << (MULTIPOLYGON - 648)) | (1L << (POINT - 648)) | (1L << (POLYGON - 648)) | (1L << (ABS - 648)) | (1L << (ACOS - 648)) | (1L << (ADDDATE - 648)) | (1L << (ADDTIME - 648)) | (1L << (AES_DECRYPT - 648)) | (1L << (AES_ENCRYPT - 648)) | (1L << (AREA - 648)) | (1L << (ASBINARY - 648)) | (1L << (ASIN - 648)) | (1L << (ASTEXT - 648)) | (1L << (ASWKB - 648)) | (1L << (ASWKT - 648)) | (1L << (ASYMMETRIC_DECRYPT - 648)) | (1L << (ASYMMETRIC_DERIVE - 648)) | (1L << (ASYMMETRIC_ENCRYPT - 648)) | (1L << (ASYMMETRIC_SIGN - 648)) | (1L << (ASYMMETRIC_VERIFY - 648)) | (1L << (ATAN - 648)) | (1L << (ATAN2 - 648)) | (1L << (BENCHMARK - 648)) | (1L << (BIN - 648)) | (1L << (BIT_COUNT - 648)) | (1L << (BIT_LENGTH - 648)) | (1L << (BUFFER - 648)) | (1L << (CATALOG_NAME - 648)) | (1L << (CEIL - 648)) | (1L << (CEILING - 648)) | (1L << (CENTROID - 648)) | (1L << (CHARACTER_LENGTH - 648)) | (1L << (CHARSET - 648)) | (1L << (CHAR_LENGTH - 648)) | (1L << (COERCIBILITY - 648)) | (1L << (COLLATION - 648)) | (1L << (COMPRESS - 648)) | (1L << (CONCAT - 648)) | (1L << (CONCAT_WS - 648)) | (1L << (CONNECTION_ID - 648)) | (1L << (CONV - 648)) | (1L << (CONVERT_TZ - 648)) | (1L << (COS - 648)) | (1L << (COT - 648)) | (1L << (CRC32 - 648)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 648)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 648)) | (1L << (CREATE_DH_PARAMETERS - 648)) | (1L << (CREATE_DIGEST - 648)) | (1L << (CROSSES - 648)) | (1L << (DATEDIFF - 648)))) != 0) || ((((_la - 712)) & ~0x3f) == 0 && ((1L << (_la - 712)) & ((1L << (DATE_FORMAT - 712)) | (1L << (DAYNAME - 712)) | (1L << (DAYOFMONTH - 712)) | (1L << (DAYOFWEEK - 712)) | (1L << (DAYOFYEAR - 712)) | (1L << (DECODE - 712)) | (1L << (DEGREES - 712)) | (1L << (DES_DECRYPT - 712)) | (1L << (DES_ENCRYPT - 712)) | (1L << (DIMENSION - 712)) | (1L << (DISJOINT - 712)) | (1L << (ELT - 712)) | (1L << (ENCODE - 712)) | (1L << (ENCRYPT - 712)) | (1L << (ENDPOINT - 712)) | (1L << (ENVELOPE - 712)) | (1L << (EQUALS - 712)) | (1L << (EXP - 712)) | (1L << (EXPORT_SET - 712)) | (1L << (EXTERIORRING - 712)) | (1L << (EXTRACTVALUE - 712)) | (1L << (FIELD - 712)) | (1L << (FIND_IN_SET - 712)) | (1L << (FLOOR - 712)) | (1L << (FORMAT - 712)) | (1L << (FOUND_ROWS - 712)) | (1L << (FROM_BASE64 - 712)) | (1L << (FROM_DAYS - 712)) | (1L << (FROM_UNIXTIME - 712)) | (1L << (GEOMCOLLFROMTEXT - 712)) | (1L << (GEOMCOLLFROMWKB - 712)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 712)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 712)) | (1L << (GEOMETRYFROMTEXT - 712)) | (1L << (GEOMETRYFROMWKB - 712)) | (1L << (GEOMETRYN - 712)) | (1L << (GEOMETRYTYPE - 712)) | (1L << (GEOMFROMTEXT - 712)) | (1L << (GEOMFROMWKB - 712)) | (1L << (GET_FORMAT - 712)) | (1L << (GET_LOCK - 712)) | (1L << (GLENGTH - 712)) | (1L << (GREATEST - 712)) | (1L << (GTID_SUBSET - 712)) | (1L << (GTID_SUBTRACT - 712)) | (1L << (HEX - 712)) | (1L << (IFNULL - 712)) | (1L << (INET6_ATON - 712)) | (1L << (INET6_NTOA - 712)) | (1L << (INET_ATON - 712)) | (1L << (INET_NTOA - 712)) | (1L << (INSTR - 712)) | (1L << (INTERIORRINGN - 712)) | (1L << (INTERSECTS - 712)) | (1L << (ISCLOSED - 712)) | (1L << (ISEMPTY - 712)) | (1L << (ISNULL - 712)) | (1L << (ISSIMPLE - 712)) | (1L << (IS_FREE_LOCK - 712)) | (1L << (IS_IPV4 - 712)) | (1L << (IS_IPV4_COMPAT - 712)) | (1L << (IS_IPV4_MAPPED - 712)) | (1L << (IS_IPV6 - 712)) | (1L << (IS_USED_LOCK - 712)))) != 0) || ((((_la - 776)) & ~0x3f) == 0 && ((1L << (_la - 776)) & ((1L << (LAST_INSERT_ID - 776)) | (1L << (LCASE - 776)) | (1L << (LEAST - 776)) | (1L << (LENGTH - 776)) | (1L << (LINEFROMTEXT - 776)) | (1L << (LINEFROMWKB - 776)) | (1L << (LINESTRINGFROMTEXT - 776)) | (1L << (LINESTRINGFROMWKB - 776)) | (1L << (LN - 776)) | (1L << (LOAD_FILE - 776)) | (1L << (LOCATE - 776)) | (1L << (LOG - 776)) | (1L << (LOG10 - 776)) | (1L << (LOG2 - 776)) | (1L << (LOWER - 776)) | (1L << (LPAD - 776)) | (1L << (LTRIM - 776)) | (1L << (MAKEDATE - 776)) | (1L << (MAKETIME - 776)) | (1L << (MAKE_SET - 776)) | (1L << (MASTER_POS_WAIT - 776)) | (1L << (MBRCONTAINS - 776)) | (1L << (MBRDISJOINT - 776)) | (1L << (MBREQUAL - 776)) | (1L << (MBRINTERSECTS - 776)) | (1L << (MBROVERLAPS - 776)) | (1L << (MBRTOUCHES - 776)) | (1L << (MBRWITHIN - 776)) | (1L << (MD5 - 776)) | (1L << (MLINEFROMTEXT - 776)) | (1L << (MLINEFROMWKB - 776)) | (1L << (MONTHNAME - 776)) | (1L << (MPOINTFROMTEXT - 776)) | (1L << (MPOINTFROMWKB - 776)) | (1L << (MPOLYFROMTEXT - 776)) | (1L << (MPOLYFROMWKB - 776)) | (1L << (MULTILINESTRINGFROMTEXT - 776)) | (1L << (MULTILINESTRINGFROMWKB - 776)) | (1L << (MULTIPOINTFROMTEXT - 776)) | (1L << (MULTIPOINTFROMWKB - 776)) | (1L << (MULTIPOLYGONFROMTEXT - 776)) | (1L << (MULTIPOLYGONFROMWKB - 776)) | (1L << (NAME_CONST - 776)) | (1L << (NULLIF - 776)) | (1L << (NUMGEOMETRIES - 776)) | (1L << (NUMINTERIORRINGS - 776)) | (1L << (NUMPOINTS - 776)) | (1L << (OCT - 776)) | (1L << (OCTET_LENGTH - 776)) | (1L << (ORD - 776)) | (1L << (OVERLAPS - 776)) | (1L << (PERIOD_ADD - 776)) | (1L << (PERIOD_DIFF - 776)) | (1L << (PI - 776)) | (1L << (POINTFROMTEXT - 776)) | (1L << (POINTFROMWKB - 776)) | (1L << (POINTN - 776)) | (1L << (POLYFROMTEXT - 776)) | (1L << (POLYFROMWKB - 776)) | (1L << (POLYGONFROMTEXT - 776)) | (1L << (POLYGONFROMWKB - 776)) | (1L << (POW - 776)) | (1L << (POWER - 776)) | (1L << (QUOTE - 776)))) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & ((1L << (RADIANS - 840)) | (1L << (RAND - 840)) | (1L << (RANDOM_BYTES - 840)) | (1L << (RELEASE_LOCK - 840)) | (1L << (REVERSE - 840)) | (1L << (ROUND - 840)) | (1L << (ROW_COUNT - 840)) | (1L << (RPAD - 840)) | (1L << (RTRIM - 840)) | (1L << (SEC_TO_TIME - 840)) | (1L << (SESSION_USER - 840)) | (1L << (SHA - 840)) | (1L << (SHA1 - 840)) | (1L << (SHA2 - 840)) | (1L << (SCHEMA_NAME - 840)) | (1L << (SIGN - 840)) | (1L << (SIN - 840)) | (1L << (SLEEP - 840)) | (1L << (SOUNDEX - 840)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 840)) | (1L << (SQRT - 840)) | (1L << (SRID - 840)) | (1L << (STARTPOINT - 840)) | (1L << (STRCMP - 840)) | (1L << (STR_TO_DATE - 840)) | (1L << (ST_AREA - 840)) | (1L << (ST_ASBINARY - 840)) | (1L << (ST_ASTEXT - 840)) | (1L << (ST_ASWKB - 840)) | (1L << (ST_ASWKT - 840)) | (1L << (ST_BUFFER - 840)) | (1L << (ST_CENTROID - 840)) | (1L << (ST_CONTAINS - 840)) | (1L << (ST_CROSSES - 840)) | (1L << (ST_DIFFERENCE - 840)) | (1L << (ST_DIMENSION - 840)) | (1L << (ST_DISJOINT - 840)) | (1L << (ST_DISTANCE - 840)) | (1L << (ST_ENDPOINT - 840)) | (1L << (ST_ENVELOPE - 840)) | (1L << (ST_EQUALS - 840)) | (1L << (ST_EXTERIORRING - 840)) | (1L << (ST_GEOMCOLLFROMTEXT - 840)) | (1L << (ST_GEOMCOLLFROMTXT - 840)) | (1L << (ST_GEOMCOLLFROMWKB - 840)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 840)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 840)) | (1L << (ST_GEOMETRYFROMTEXT - 840)) | (1L << (ST_GEOMETRYFROMWKB - 840)) | (1L << (ST_GEOMETRYN - 840)) | (1L << (ST_GEOMETRYTYPE - 840)) | (1L << (ST_GEOMFROMTEXT - 840)) | (1L << (ST_GEOMFROMWKB - 840)) | (1L << (ST_INTERIORRINGN - 840)) | (1L << (ST_INTERSECTION - 840)) | (1L << (ST_INTERSECTS - 840)) | (1L << (ST_ISCLOSED - 840)) | (1L << (ST_ISEMPTY - 840)) | (1L << (ST_ISSIMPLE - 840)) | (1L << (ST_LINEFROMTEXT - 840)) | (1L << (ST_LINEFROMWKB - 840)) | (1L << (ST_LINESTRINGFROMTEXT - 840)) | (1L << (ST_LINESTRINGFROMWKB - 840)) | (1L << (ST_NUMGEOMETRIES - 840)))) != 0) || ((((_la - 904)) & ~0x3f) == 0 && ((1L << (_la - 904)) & ((1L << (ST_NUMINTERIORRING - 904)) | (1L << (ST_NUMINTERIORRINGS - 904)) | (1L << (ST_NUMPOINTS - 904)) | (1L << (ST_OVERLAPS - 904)) | (1L << (ST_POINTFROMTEXT - 904)) | (1L << (ST_POINTFROMWKB - 904)) | (1L << (ST_POINTN - 904)) | (1L << (ST_POLYFROMTEXT - 904)) | (1L << (ST_POLYFROMWKB - 904)) | (1L << (ST_POLYGONFROMTEXT - 904)) | (1L << (ST_POLYGONFROMWKB - 904)) | (1L << (ST_SRID - 904)) | (1L << (ST_STARTPOINT - 904)) | (1L << (ST_SYMDIFFERENCE - 904)) | (1L << (ST_TOUCHES - 904)) | (1L << (ST_UNION - 904)) | (1L << (ST_WITHIN - 904)) | (1L << (ST_X - 904)) | (1L << (ST_Y - 904)) | (1L << (SUBDATE - 904)) | (1L << (SUBSTRING_INDEX - 904)) | (1L << (SUBTIME - 904)) | (1L << (SYSTEM_USER - 904)) | (1L << (TAN - 904)) | (1L << (TIMEDIFF - 904)) | (1L << (TIMESTAMPADD - 904)) | (1L << (TIMESTAMPDIFF - 904)) | (1L << (TIME_FORMAT - 904)) | (1L << (TIME_TO_SEC - 904)) | (1L << (TOUCHES - 904)) | (1L << (TO_BASE64 - 904)) | (1L << (TO_DAYS - 904)) | (1L << (TO_SECONDS - 904)) | (1L << (UCASE - 904)) | (1L << (UNCOMPRESS - 904)) | (1L << (UNCOMPRESSED_LENGTH - 904)) | (1L << (UNHEX - 904)) | (1L << (UNIX_TIMESTAMP - 904)) | (1L << (UPDATEXML - 904)) | (1L << (UPPER - 904)) | (1L << (UUID - 904)) | (1L << (UUID_SHORT - 904)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 904)) | (1L << (VERSION - 904)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 904)) | (1L << (WEEKDAY - 904)) | (1L << (WEEKOFYEAR - 904)) | (1L << (WEIGHT_STRING - 904)) | (1L << (WITHIN - 904)) | (1L << (YEARWEEK - 904)) | (1L << (Y_FUNCTION - 904)) | (1L << (X_FUNCTION - 904)))) != 0) || ((((_la - 968)) & ~0x3f) == 0 && ((1L << (_la - 968)) & ((1L << (PLUS - 968)) | (1L << (MINUS - 968)) | (1L << (EXCLAMATION_SYMBOL - 968)) | (1L << (BIT_NOT_OP - 968)) | (1L << (LR_BRACKET - 968)) | (1L << (ZERO_DECIMAL - 968)) | (1L << (ONE_DECIMAL - 968)) | (1L << (TWO_DECIMAL - 968)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 968)) | (1L << (START_NATIONAL_STRING_LITERAL - 968)) | (1L << (STRING_LITERAL - 968)) | (1L << (DECIMAL_LITERAL - 968)) | (1L << (HEXADECIMAL_LITERAL - 968)) | (1L << (REAL_LITERAL - 968)) | (1L << (NULL_SPEC_LITERAL - 968)) | (1L << (BIT_STRING - 968)) | (1L << (STRING_CHARSET_NAME - 968)) | (1L << (ID - 968)) | (1L << (REVERSE_QUOTE_ID - 968)) | (1L << (LOCAL_ID - 968)) | (1L << (GLOBAL_ID - 968)))) != 0)) {
					{
					setState(5787);
					functionArgs();
					}
				}

				setState(5790);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5792);
				fullId();
				setState(5793);
				match(LR_BRACKET);
				setState(5795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (IF - 69)) | (1L << (INSERT - 69)) | (1L << (INTERVAL - 69)) | (1L << (LEFT - 69)) | (1L << (NOT - 69)) | (1L << (NULL_LITERAL - 69)) | (1L << (NUMBER - 69)) | (1L << (REPLACE - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (RIGHT - 133)) | (1L << (STACKED - 133)) | (1L << (TRUE - 133)) | (1L << (VALUES - 133)) | (1L << (DATE - 133)) | (1L << (TIME - 133)) | (1L << (TIMESTAMP - 133)) | (1L << (DATETIME - 133)) | (1L << (YEAR - 133)) | (1L << (CHAR - 133)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (BINARY - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)) | (1L << (CURRENT_DATE - 200)) | (1L << (CURRENT_TIME - 200)) | (1L << (CURRENT_TIMESTAMP - 200)) | (1L << (LOCALTIME - 200)) | (1L << (CURDATE - 200)) | (1L << (CURTIME - 200)) | (1L << (DATE_ADD - 200)) | (1L << (DATE_SUB - 200)) | (1L << (EXTRACT - 200)) | (1L << (LOCALTIMESTAMP - 200)) | (1L << (NOW - 200)) | (1L << (POSITION - 200)) | (1L << (SUBSTR - 200)) | (1L << (SUBSTRING - 200)) | (1L << (SYSDATE - 200)) | (1L << (TRIM - 200)) | (1L << (UTC_DATE - 200)) | (1L << (UTC_TIME - 200)) | (1L << (UTC_TIMESTAMP - 200)) | (1L << (ACCOUNT - 200)) | (1L << (ACTION - 200)) | (1L << (AFTER - 200)) | (1L << (AGGREGATE - 200)) | (1L << (ALGORITHM - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)) | (1L << (CLASS_ORIGIN - 264)) | (1L << (CLIENT - 264)) | (1L << (CLOSE - 264)) | (1L << (COALESCE - 264)) | (1L << (CODE - 264)) | (1L << (COLUMNS - 264)) | (1L << (COLUMN_FORMAT - 264)) | (1L << (COLUMN_NAME - 264)) | (1L << (COMMENT - 264)) | (1L << (COMMIT - 264)) | (1L << (COMPACT - 264)) | (1L << (COMPLETION - 264)) | (1L << (COMPRESSED - 264)) | (1L << (COMPRESSION - 264)) | (1L << (CONCURRENT - 264)) | (1L << (CONNECTION - 264)) | (1L << (CONSISTENT - 264)) | (1L << (CONSTRAINT_CATALOG - 264)) | (1L << (CONSTRAINT_SCHEMA - 264)) | (1L << (CONSTRAINT_NAME - 264)) | (1L << (CONTAINS - 264)) | (1L << (CONTEXT - 264)) | (1L << (CONTRIBUTORS - 264)) | (1L << (COPY - 264)) | (1L << (CPU - 264)) | (1L << (CURSOR_NAME - 264)) | (1L << (DATA - 264)) | (1L << (DATAFILE - 264)) | (1L << (DEALLOCATE - 264)) | (1L << (DEFAULT_AUTH - 264)) | (1L << (DEFINER - 264)) | (1L << (DELAY_KEY_WRITE - 264)) | (1L << (DES_KEY_FILE - 264)) | (1L << (DIRECTORY - 264)) | (1L << (DISABLE - 264)) | (1L << (DISCARD - 264)) | (1L << (DISK - 264)) | (1L << (DO - 264)) | (1L << (DUMPFILE - 264)) | (1L << (DUPLICATE - 264)) | (1L << (DYNAMIC - 264)) | (1L << (ENABLE - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)) | (1L << (FILE_BLOCK_SIZE - 328)) | (1L << (FILTER - 328)) | (1L << (FIRST - 328)) | (1L << (FIXED - 328)) | (1L << (FLUSH - 328)) | (1L << (FOLLOWS - 328)) | (1L << (FOUND - 328)) | (1L << (FULL - 328)) | (1L << (FUNCTION - 328)) | (1L << (GENERAL - 328)) | (1L << (GLOBAL - 328)) | (1L << (GRANTS - 328)) | (1L << (GROUP_REPLICATION - 328)) | (1L << (HANDLER - 328)) | (1L << (HASH - 328)) | (1L << (HELP - 328)) | (1L << (HOST - 328)) | (1L << (HOSTS - 328)) | (1L << (IDENTIFIED - 328)) | (1L << (IGNORE_SERVER_IDS - 328)) | (1L << (IMPORT - 328)) | (1L << (INDEXES - 328)) | (1L << (INITIAL_SIZE - 328)) | (1L << (INPLACE - 328)) | (1L << (INSERT_METHOD - 328)) | (1L << (INSTALL - 328)) | (1L << (INSTANCE - 328)) | (1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (KEY_BLOCK_SIZE - 328)) | (1L << (LANGUAGE - 328)) | (1L << (LAST - 328)) | (1L << (LEAVES - 328)) | (1L << (LESS - 328)) | (1L << (LEVEL - 328)) | (1L << (LIST - 328)) | (1L << (LOCAL - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MID - 392)) | (1L << (MIGRATE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NCHAR - 392)) | (1L << (NEVER - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)) | (1L << (OFFLINE - 392)) | (1L << (OFFSET - 392)) | (1L << (OJ - 392)) | (1L << (OLD_PASSWORD - 392)) | (1L << (ONE - 392)) | (1L << (ONLINE - 392)) | (1L << (ONLY - 392)) | (1L << (OPEN - 392)) | (1L << (OPTIMIZER_COSTS - 392)) | (1L << (OPTIONS - 392)) | (1L << (OWNER - 392)) | (1L << (PACK_KEYS - 392)) | (1L << (PAGE - 392)) | (1L << (PARSER - 392)) | (1L << (PARTIAL - 392)) | (1L << (PARTITIONING - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)) | (1L << (RECOVER - 456)) | (1L << (REDO_BUFFER_SIZE - 456)) | (1L << (REDUNDANT - 456)) | (1L << (RELAY - 456)) | (1L << (RELAY_LOG_FILE - 456)) | (1L << (RELAY_LOG_POS - 456)) | (1L << (RELAYLOG - 456)) | (1L << (REMOVE - 456)) | (1L << (REORGANIZE - 456)) | (1L << (REPAIR - 456)) | (1L << (REPLICATE_DO_DB - 456)) | (1L << (REPLICATE_DO_TABLE - 456)) | (1L << (REPLICATE_IGNORE_DB - 456)) | (1L << (REPLICATE_IGNORE_TABLE - 456)) | (1L << (REPLICATE_REWRITE_DB - 456)) | (1L << (REPLICATE_WILD_DO_TABLE - 456)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 456)) | (1L << (REPLICATION - 456)) | (1L << (RESET - 456)) | (1L << (RESUME - 456)) | (1L << (RETURNED_SQLSTATE - 456)) | (1L << (RETURNS - 456)) | (1L << (ROLLBACK - 456)) | (1L << (ROLLUP - 456)) | (1L << (ROTATE - 456)) | (1L << (ROW - 456)) | (1L << (ROWS - 456)) | (1L << (ROW_FORMAT - 456)) | (1L << (SAVEPOINT - 456)) | (1L << (SCHEDULE - 456)) | (1L << (SECURITY - 456)) | (1L << (SERVER - 456)) | (1L << (SESSION - 456)) | (1L << (SHARE - 456)) | (1L << (SHARED - 456)) | (1L << (SIGNED - 456)) | (1L << (SIMPLE - 456)) | (1L << (SLAVE - 456)) | (1L << (SLOW - 456)) | (1L << (SNAPSHOT - 456)) | (1L << (SOCKET - 456)) | (1L << (SOME - 456)) | (1L << (SONAME - 456)) | (1L << (SOUNDS - 456)) | (1L << (SOURCE - 456)) | (1L << (SQL_AFTER_GTIDS - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)) | (1L << (SUBCLASS_ORIGIN - 520)) | (1L << (SUBJECT - 520)) | (1L << (SUBPARTITION - 520)) | (1L << (SUBPARTITIONS - 520)) | (1L << (SUSPEND - 520)) | (1L << (SWAPS - 520)) | (1L << (SWITCHES - 520)) | (1L << (TABLE_NAME - 520)) | (1L << (TABLESPACE - 520)) | (1L << (TEMPORARY - 520)) | (1L << (TEMPTABLE - 520)) | (1L << (THAN - 520)) | (1L << (TRADITIONAL - 520)) | (1L << (TRANSACTION - 520)) | (1L << (TRIGGERS - 520)) | (1L << (TRUNCATE - 520)) | (1L << (UNDEFINED - 520)) | (1L << (UNDOFILE - 520)) | (1L << (UNDO_BUFFER_SIZE - 520)) | (1L << (UNINSTALL - 520)) | (1L << (UNKNOWN - 520)) | (1L << (UNTIL - 520)) | (1L << (UPGRADE - 520)) | (1L << (USER - 520)) | (1L << (USE_FRM - 520)) | (1L << (USER_RESOURCES - 520)) | (1L << (VALIDATION - 520)) | (1L << (VALUE - 520)) | (1L << (VARIABLES - 520)) | (1L << (VIEW - 520)) | (1L << (VISIBLE - 520)) | (1L << (WAIT - 520)) | (1L << (WARNINGS - 520)) | (1L << (WITHOUT - 520)) | (1L << (WORK - 520)) | (1L << (WRAPPER - 520)) | (1L << (X509 - 520)) | (1L << (XA - 520)) | (1L << (XML - 520)) | (1L << (INTERNAL - 520)) | (1L << (QUARTER - 520)) | (1L << (MONTH - 520)) | (1L << (DAY - 520)))) != 0) || ((((_la - 584)) & ~0x3f) == 0 && ((1L << (_la - 584)) & ((1L << (HOUR - 584)) | (1L << (MINUTE - 584)) | (1L << (WEEK - 584)) | (1L << (SECOND - 584)) | (1L << (MICROSECOND - 584)) | (1L << (TABLES - 584)) | (1L << (ROUTINE - 584)) | (1L << (EXECUTE - 584)) | (1L << (FILE - 584)) | (1L << (PROCESS - 584)) | (1L << (RELOAD - 584)) | (1L << (SHUTDOWN - 584)) | (1L << (SUPER - 584)) | (1L << (PRIVILEGES - 584)) | (1L << (SESSION_VARIABLES_ADMIN - 584)) | (1L << (ARMSCII8 - 584)) | (1L << (ASCII - 584)) | (1L << (BIG5 - 584)) | (1L << (CP1250 - 584)) | (1L << (CP1251 - 584)) | (1L << (CP1256 - 584)) | (1L << (CP1257 - 584)) | (1L << (CP850 - 584)) | (1L << (CP852 - 584)) | (1L << (CP866 - 584)) | (1L << (CP932 - 584)) | (1L << (DEC8 - 584)) | (1L << (EUCJPMS - 584)) | (1L << (EUCKR - 584)) | (1L << (GB2312 - 584)) | (1L << (GBK - 584)) | (1L << (GEOSTD8 - 584)) | (1L << (GREEK - 584)) | (1L << (HEBREW - 584)) | (1L << (HP8 - 584)) | (1L << (KEYBCS2 - 584)) | (1L << (KOI8R - 584)) | (1L << (KOI8U - 584)) | (1L << (LATIN1 - 584)) | (1L << (LATIN2 - 584)) | (1L << (LATIN5 - 584)) | (1L << (LATIN7 - 584)) | (1L << (MACCE - 584)) | (1L << (MACROMAN - 584)) | (1L << (SJIS - 584)) | (1L << (SWE7 - 584)) | (1L << (TIS620 - 584)) | (1L << (UCS2 - 584)) | (1L << (UJIS - 584)) | (1L << (UTF16 - 584)) | (1L << (UTF16LE - 584)) | (1L << (UTF32 - 584)) | (1L << (UTF8 - 584)) | (1L << (UTF8MB3 - 584)) | (1L << (UTF8MB4 - 584)) | (1L << (ARCHIVE - 584)) | (1L << (BLACKHOLE - 584)) | (1L << (CSV - 584)) | (1L << (FEDERATED - 584)) | (1L << (INNODB - 584)) | (1L << (MEMORY - 584)) | (1L << (MRG_MYISAM - 584)) | (1L << (MYISAM - 584)) | (1L << (NDB - 584)))) != 0) || ((((_la - 648)) & ~0x3f) == 0 && ((1L << (_la - 648)) & ((1L << (NDBCLUSTER - 648)) | (1L << (PERFORMANCE_SCHEMA - 648)) | (1L << (TOKUDB - 648)) | (1L << (REPEATABLE - 648)) | (1L << (COMMITTED - 648)) | (1L << (UNCOMMITTED - 648)) | (1L << (SERIALIZABLE - 648)) | (1L << (GEOMETRYCOLLECTION - 648)) | (1L << (LINESTRING - 648)) | (1L << (MULTILINESTRING - 648)) | (1L << (MULTIPOINT - 648)) | (1L << (MULTIPOLYGON - 648)) | (1L << (POINT - 648)) | (1L << (POLYGON - 648)) | (1L << (ABS - 648)) | (1L << (ACOS - 648)) | (1L << (ADDDATE - 648)) | (1L << (ADDTIME - 648)) | (1L << (AES_DECRYPT - 648)) | (1L << (AES_ENCRYPT - 648)) | (1L << (AREA - 648)) | (1L << (ASBINARY - 648)) | (1L << (ASIN - 648)) | (1L << (ASTEXT - 648)) | (1L << (ASWKB - 648)) | (1L << (ASWKT - 648)) | (1L << (ASYMMETRIC_DECRYPT - 648)) | (1L << (ASYMMETRIC_DERIVE - 648)) | (1L << (ASYMMETRIC_ENCRYPT - 648)) | (1L << (ASYMMETRIC_SIGN - 648)) | (1L << (ASYMMETRIC_VERIFY - 648)) | (1L << (ATAN - 648)) | (1L << (ATAN2 - 648)) | (1L << (BENCHMARK - 648)) | (1L << (BIN - 648)) | (1L << (BIT_COUNT - 648)) | (1L << (BIT_LENGTH - 648)) | (1L << (BUFFER - 648)) | (1L << (CATALOG_NAME - 648)) | (1L << (CEIL - 648)) | (1L << (CEILING - 648)) | (1L << (CENTROID - 648)) | (1L << (CHARACTER_LENGTH - 648)) | (1L << (CHARSET - 648)) | (1L << (CHAR_LENGTH - 648)) | (1L << (COERCIBILITY - 648)) | (1L << (COLLATION - 648)) | (1L << (COMPRESS - 648)) | (1L << (CONCAT - 648)) | (1L << (CONCAT_WS - 648)) | (1L << (CONNECTION_ID - 648)) | (1L << (CONV - 648)) | (1L << (CONVERT_TZ - 648)) | (1L << (COS - 648)) | (1L << (COT - 648)) | (1L << (CRC32 - 648)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 648)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 648)) | (1L << (CREATE_DH_PARAMETERS - 648)) | (1L << (CREATE_DIGEST - 648)) | (1L << (CROSSES - 648)) | (1L << (DATEDIFF - 648)))) != 0) || ((((_la - 712)) & ~0x3f) == 0 && ((1L << (_la - 712)) & ((1L << (DATE_FORMAT - 712)) | (1L << (DAYNAME - 712)) | (1L << (DAYOFMONTH - 712)) | (1L << (DAYOFWEEK - 712)) | (1L << (DAYOFYEAR - 712)) | (1L << (DECODE - 712)) | (1L << (DEGREES - 712)) | (1L << (DES_DECRYPT - 712)) | (1L << (DES_ENCRYPT - 712)) | (1L << (DIMENSION - 712)) | (1L << (DISJOINT - 712)) | (1L << (ELT - 712)) | (1L << (ENCODE - 712)) | (1L << (ENCRYPT - 712)) | (1L << (ENDPOINT - 712)) | (1L << (ENVELOPE - 712)) | (1L << (EQUALS - 712)) | (1L << (EXP - 712)) | (1L << (EXPORT_SET - 712)) | (1L << (EXTERIORRING - 712)) | (1L << (EXTRACTVALUE - 712)) | (1L << (FIELD - 712)) | (1L << (FIND_IN_SET - 712)) | (1L << (FLOOR - 712)) | (1L << (FORMAT - 712)) | (1L << (FOUND_ROWS - 712)) | (1L << (FROM_BASE64 - 712)) | (1L << (FROM_DAYS - 712)) | (1L << (FROM_UNIXTIME - 712)) | (1L << (GEOMCOLLFROMTEXT - 712)) | (1L << (GEOMCOLLFROMWKB - 712)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 712)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 712)) | (1L << (GEOMETRYFROMTEXT - 712)) | (1L << (GEOMETRYFROMWKB - 712)) | (1L << (GEOMETRYN - 712)) | (1L << (GEOMETRYTYPE - 712)) | (1L << (GEOMFROMTEXT - 712)) | (1L << (GEOMFROMWKB - 712)) | (1L << (GET_FORMAT - 712)) | (1L << (GET_LOCK - 712)) | (1L << (GLENGTH - 712)) | (1L << (GREATEST - 712)) | (1L << (GTID_SUBSET - 712)) | (1L << (GTID_SUBTRACT - 712)) | (1L << (HEX - 712)) | (1L << (IFNULL - 712)) | (1L << (INET6_ATON - 712)) | (1L << (INET6_NTOA - 712)) | (1L << (INET_ATON - 712)) | (1L << (INET_NTOA - 712)) | (1L << (INSTR - 712)) | (1L << (INTERIORRINGN - 712)) | (1L << (INTERSECTS - 712)) | (1L << (ISCLOSED - 712)) | (1L << (ISEMPTY - 712)) | (1L << (ISNULL - 712)) | (1L << (ISSIMPLE - 712)) | (1L << (IS_FREE_LOCK - 712)) | (1L << (IS_IPV4 - 712)) | (1L << (IS_IPV4_COMPAT - 712)) | (1L << (IS_IPV4_MAPPED - 712)) | (1L << (IS_IPV6 - 712)) | (1L << (IS_USED_LOCK - 712)))) != 0) || ((((_la - 776)) & ~0x3f) == 0 && ((1L << (_la - 776)) & ((1L << (LAST_INSERT_ID - 776)) | (1L << (LCASE - 776)) | (1L << (LEAST - 776)) | (1L << (LENGTH - 776)) | (1L << (LINEFROMTEXT - 776)) | (1L << (LINEFROMWKB - 776)) | (1L << (LINESTRINGFROMTEXT - 776)) | (1L << (LINESTRINGFROMWKB - 776)) | (1L << (LN - 776)) | (1L << (LOAD_FILE - 776)) | (1L << (LOCATE - 776)) | (1L << (LOG - 776)) | (1L << (LOG10 - 776)) | (1L << (LOG2 - 776)) | (1L << (LOWER - 776)) | (1L << (LPAD - 776)) | (1L << (LTRIM - 776)) | (1L << (MAKEDATE - 776)) | (1L << (MAKETIME - 776)) | (1L << (MAKE_SET - 776)) | (1L << (MASTER_POS_WAIT - 776)) | (1L << (MBRCONTAINS - 776)) | (1L << (MBRDISJOINT - 776)) | (1L << (MBREQUAL - 776)) | (1L << (MBRINTERSECTS - 776)) | (1L << (MBROVERLAPS - 776)) | (1L << (MBRTOUCHES - 776)) | (1L << (MBRWITHIN - 776)) | (1L << (MD5 - 776)) | (1L << (MLINEFROMTEXT - 776)) | (1L << (MLINEFROMWKB - 776)) | (1L << (MONTHNAME - 776)) | (1L << (MPOINTFROMTEXT - 776)) | (1L << (MPOINTFROMWKB - 776)) | (1L << (MPOLYFROMTEXT - 776)) | (1L << (MPOLYFROMWKB - 776)) | (1L << (MULTILINESTRINGFROMTEXT - 776)) | (1L << (MULTILINESTRINGFROMWKB - 776)) | (1L << (MULTIPOINTFROMTEXT - 776)) | (1L << (MULTIPOINTFROMWKB - 776)) | (1L << (MULTIPOLYGONFROMTEXT - 776)) | (1L << (MULTIPOLYGONFROMWKB - 776)) | (1L << (NAME_CONST - 776)) | (1L << (NULLIF - 776)) | (1L << (NUMGEOMETRIES - 776)) | (1L << (NUMINTERIORRINGS - 776)) | (1L << (NUMPOINTS - 776)) | (1L << (OCT - 776)) | (1L << (OCTET_LENGTH - 776)) | (1L << (ORD - 776)) | (1L << (OVERLAPS - 776)) | (1L << (PERIOD_ADD - 776)) | (1L << (PERIOD_DIFF - 776)) | (1L << (PI - 776)) | (1L << (POINTFROMTEXT - 776)) | (1L << (POINTFROMWKB - 776)) | (1L << (POINTN - 776)) | (1L << (POLYFROMTEXT - 776)) | (1L << (POLYFROMWKB - 776)) | (1L << (POLYGONFROMTEXT - 776)) | (1L << (POLYGONFROMWKB - 776)) | (1L << (POW - 776)) | (1L << (POWER - 776)) | (1L << (QUOTE - 776)))) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & ((1L << (RADIANS - 840)) | (1L << (RAND - 840)) | (1L << (RANDOM_BYTES - 840)) | (1L << (RELEASE_LOCK - 840)) | (1L << (REVERSE - 840)) | (1L << (ROUND - 840)) | (1L << (ROW_COUNT - 840)) | (1L << (RPAD - 840)) | (1L << (RTRIM - 840)) | (1L << (SEC_TO_TIME - 840)) | (1L << (SESSION_USER - 840)) | (1L << (SHA - 840)) | (1L << (SHA1 - 840)) | (1L << (SHA2 - 840)) | (1L << (SCHEMA_NAME - 840)) | (1L << (SIGN - 840)) | (1L << (SIN - 840)) | (1L << (SLEEP - 840)) | (1L << (SOUNDEX - 840)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 840)) | (1L << (SQRT - 840)) | (1L << (SRID - 840)) | (1L << (STARTPOINT - 840)) | (1L << (STRCMP - 840)) | (1L << (STR_TO_DATE - 840)) | (1L << (ST_AREA - 840)) | (1L << (ST_ASBINARY - 840)) | (1L << (ST_ASTEXT - 840)) | (1L << (ST_ASWKB - 840)) | (1L << (ST_ASWKT - 840)) | (1L << (ST_BUFFER - 840)) | (1L << (ST_CENTROID - 840)) | (1L << (ST_CONTAINS - 840)) | (1L << (ST_CROSSES - 840)) | (1L << (ST_DIFFERENCE - 840)) | (1L << (ST_DIMENSION - 840)) | (1L << (ST_DISJOINT - 840)) | (1L << (ST_DISTANCE - 840)) | (1L << (ST_ENDPOINT - 840)) | (1L << (ST_ENVELOPE - 840)) | (1L << (ST_EQUALS - 840)) | (1L << (ST_EXTERIORRING - 840)) | (1L << (ST_GEOMCOLLFROMTEXT - 840)) | (1L << (ST_GEOMCOLLFROMTXT - 840)) | (1L << (ST_GEOMCOLLFROMWKB - 840)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 840)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 840)) | (1L << (ST_GEOMETRYFROMTEXT - 840)) | (1L << (ST_GEOMETRYFROMWKB - 840)) | (1L << (ST_GEOMETRYN - 840)) | (1L << (ST_GEOMETRYTYPE - 840)) | (1L << (ST_GEOMFROMTEXT - 840)) | (1L << (ST_GEOMFROMWKB - 840)) | (1L << (ST_INTERIORRINGN - 840)) | (1L << (ST_INTERSECTION - 840)) | (1L << (ST_INTERSECTS - 840)) | (1L << (ST_ISCLOSED - 840)) | (1L << (ST_ISEMPTY - 840)) | (1L << (ST_ISSIMPLE - 840)) | (1L << (ST_LINEFROMTEXT - 840)) | (1L << (ST_LINEFROMWKB - 840)) | (1L << (ST_LINESTRINGFROMTEXT - 840)) | (1L << (ST_LINESTRINGFROMWKB - 840)) | (1L << (ST_NUMGEOMETRIES - 840)))) != 0) || ((((_la - 904)) & ~0x3f) == 0 && ((1L << (_la - 904)) & ((1L << (ST_NUMINTERIORRING - 904)) | (1L << (ST_NUMINTERIORRINGS - 904)) | (1L << (ST_NUMPOINTS - 904)) | (1L << (ST_OVERLAPS - 904)) | (1L << (ST_POINTFROMTEXT - 904)) | (1L << (ST_POINTFROMWKB - 904)) | (1L << (ST_POINTN - 904)) | (1L << (ST_POLYFROMTEXT - 904)) | (1L << (ST_POLYFROMWKB - 904)) | (1L << (ST_POLYGONFROMTEXT - 904)) | (1L << (ST_POLYGONFROMWKB - 904)) | (1L << (ST_SRID - 904)) | (1L << (ST_STARTPOINT - 904)) | (1L << (ST_SYMDIFFERENCE - 904)) | (1L << (ST_TOUCHES - 904)) | (1L << (ST_UNION - 904)) | (1L << (ST_WITHIN - 904)) | (1L << (ST_X - 904)) | (1L << (ST_Y - 904)) | (1L << (SUBDATE - 904)) | (1L << (SUBSTRING_INDEX - 904)) | (1L << (SUBTIME - 904)) | (1L << (SYSTEM_USER - 904)) | (1L << (TAN - 904)) | (1L << (TIMEDIFF - 904)) | (1L << (TIMESTAMPADD - 904)) | (1L << (TIMESTAMPDIFF - 904)) | (1L << (TIME_FORMAT - 904)) | (1L << (TIME_TO_SEC - 904)) | (1L << (TOUCHES - 904)) | (1L << (TO_BASE64 - 904)) | (1L << (TO_DAYS - 904)) | (1L << (TO_SECONDS - 904)) | (1L << (UCASE - 904)) | (1L << (UNCOMPRESS - 904)) | (1L << (UNCOMPRESSED_LENGTH - 904)) | (1L << (UNHEX - 904)) | (1L << (UNIX_TIMESTAMP - 904)) | (1L << (UPDATEXML - 904)) | (1L << (UPPER - 904)) | (1L << (UUID - 904)) | (1L << (UUID_SHORT - 904)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 904)) | (1L << (VERSION - 904)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 904)) | (1L << (WEEKDAY - 904)) | (1L << (WEEKOFYEAR - 904)) | (1L << (WEIGHT_STRING - 904)) | (1L << (WITHIN - 904)) | (1L << (YEARWEEK - 904)) | (1L << (Y_FUNCTION - 904)) | (1L << (X_FUNCTION - 904)))) != 0) || ((((_la - 968)) & ~0x3f) == 0 && ((1L << (_la - 968)) & ((1L << (PLUS - 968)) | (1L << (MINUS - 968)) | (1L << (EXCLAMATION_SYMBOL - 968)) | (1L << (BIT_NOT_OP - 968)) | (1L << (LR_BRACKET - 968)) | (1L << (ZERO_DECIMAL - 968)) | (1L << (ONE_DECIMAL - 968)) | (1L << (TWO_DECIMAL - 968)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 968)) | (1L << (START_NATIONAL_STRING_LITERAL - 968)) | (1L << (STRING_LITERAL - 968)) | (1L << (DECIMAL_LITERAL - 968)) | (1L << (HEXADECIMAL_LITERAL - 968)) | (1L << (REAL_LITERAL - 968)) | (1L << (NULL_SPEC_LITERAL - 968)) | (1L << (BIT_STRING - 968)) | (1L << (STRING_CHARSET_NAME - 968)) | (1L << (ID - 968)) | (1L << (REVERSE_QUOTE_ID - 968)) | (1L << (LOCAL_ID - 968)) | (1L << (GLOBAL_ID - 968)))) != 0)) {
					{
					setState(5794);
					functionArgs();
					}
				}

				setState(5797);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new PasswordFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5799);
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPositionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPositionFunctionCall(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode BOTH() { return getToken(MySqlParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(MySqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(MySqlParser.TRAILING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTrimFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTrimFunctionCall(this);
		}
	}
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleFunctionCall(this);
		}
	}
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharFunctionCall(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWeightFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWeightFunctionCall(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGetFormatFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGetFormatFunctionCall(this);
		}
	}
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFunctionCall(this);
		}
	}
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(MySqlParser.EXTRACT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExtractFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExtractFunctionCall(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeFunctionCall(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterValuesFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitValuesFunctionCall(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubstrFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubstrFunctionCall(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_specificFunction);
		int _la;
		try {
			setState(5959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,881,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5802);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (CURRENT_DATE - 240)) | (1L << (CURRENT_TIME - 240)) | (1L << (CURRENT_TIMESTAMP - 240)) | (1L << (LOCALTIME - 240)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5803);
				match(CONVERT);
				setState(5804);
				match(LR_BRACKET);
				setState(5805);
				expression(0);
				setState(5806);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(5807);
				convertedDataType();
				setState(5808);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5810);
				match(CONVERT);
				setState(5811);
				match(LR_BRACKET);
				setState(5812);
				expression(0);
				setState(5813);
				match(USING);
				setState(5814);
				charsetName();
				setState(5815);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5817);
				match(CAST);
				setState(5818);
				match(LR_BRACKET);
				setState(5819);
				expression(0);
				setState(5820);
				match(AS);
				setState(5821);
				convertedDataType();
				setState(5822);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5824);
				match(VALUES);
				setState(5825);
				match(LR_BRACKET);
				setState(5826);
				fullColumnName();
				setState(5827);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5829);
				match(CASE);
				setState(5830);
				expression(0);
				setState(5832); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5831);
					caseFuncAlternative();
					}
					}
					setState(5834); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(5838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(5836);
					match(ELSE);
					setState(5837);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(5840);
				match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5842);
				match(CASE);
				setState(5844); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5843);
					caseFuncAlternative();
					}
					}
					setState(5846); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(5850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(5848);
					match(ELSE);
					setState(5849);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(5852);
				match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5854);
				match(CHAR);
				setState(5855);
				match(LR_BRACKET);
				setState(5856);
				functionArgs();
				setState(5859);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5857);
					match(USING);
					setState(5858);
					charsetName();
					}
				}

				setState(5861);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5863);
				match(POSITION);
				setState(5864);
				match(LR_BRACKET);
				setState(5867);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
				case 1:
					{
					setState(5865);
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5866);
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(5869);
				match(IN);
				setState(5872);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
				case 1:
					{
					setState(5870);
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5871);
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(5874);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5876);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5877);
				match(LR_BRACKET);
				setState(5880);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,869,_ctx) ) {
				case 1:
					{
					setState(5878);
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5879);
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5882);
				match(FROM);
				setState(5885);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
				case 1:
					{
					setState(5883);
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					setState(5884);
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(5892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5887);
					match(FOR);
					setState(5890);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,871,_ctx) ) {
					case 1:
						{
						setState(5888);
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						setState(5889);
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(5894);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5896);
				match(TRIM);
				setState(5897);
				match(LR_BRACKET);
				setState(5898);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5901);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
				case 1:
					{
					setState(5899);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5900);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5903);
				match(FROM);
				setState(5906);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,874,_ctx) ) {
				case 1:
					{
					setState(5904);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5905);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(5908);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5910);
				match(TRIM);
				setState(5911);
				match(LR_BRACKET);
				setState(5914);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,875,_ctx) ) {
				case 1:
					{
					setState(5912);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5913);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5916);
				match(FROM);
				setState(5919);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
				case 1:
					{
					setState(5917);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5918);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(5921);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5923);
				match(WEIGHT_STRING);
				setState(5924);
				match(LR_BRACKET);
				setState(5927);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,877,_ctx) ) {
				case 1:
					{
					setState(5925);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(5926);
					expression(0);
					}
					break;
				}
				setState(5935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5929);
					match(AS);
					setState(5930);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5931);
					match(LR_BRACKET);
					setState(5932);
					decimalLiteral();
					setState(5933);
					match(RR_BRACKET);
					}
				}

				setState(5938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(5937);
					levelsInWeightString();
					}
				}

				setState(5940);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5942);
				match(EXTRACT);
				setState(5943);
				match(LR_BRACKET);
				setState(5944);
				intervalType();
				setState(5945);
				match(FROM);
				setState(5948);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,880,_ctx) ) {
				case 1:
					{
					setState(5946);
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5947);
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5950);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5952);
				match(GET_FORMAT);
				setState(5953);
				match(LR_BRACKET);
				setState(5954);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (DATETIME - 191)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5955);
				match(COMMA);
				setState(5956);
				stringLiteral();
				setState(5957);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFuncAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFuncAlternative(this);
		}
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5961);
			match(WHEN);
			setState(5962);
			((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(5963);
			match(THEN);
			setState(5964);
			((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightRange(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightList(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_levelsInWeightString);
		int _la;
		try {
			setState(5980);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,883,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5966);
				match(LEVEL);
				setState(5967);
				levelInWeightListElement();
				setState(5972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5968);
					match(COMMA);
					setState(5969);
					levelInWeightListElement();
					}
					}
					setState(5974);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5975);
				match(LEVEL);
				setState(5976);
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(5977);
				match(MINUS);
				setState(5978);
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelInWeightListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelInWeightListElement(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5982);
			decimalLiteral();
			setState(5984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(5983);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(MySqlParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateWindowedFunction(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(6042);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,893,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5986);
				_la = _input.LA(1);
				if ( !(((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (AVG - 224)) | (1L << (MAX - 224)) | (1L << (MIN - 224)) | (1L << (SUM - 224)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5987);
				match(LR_BRACKET);
				setState(5989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(5988);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5991);
				functionArg();
				setState(5992);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5994);
				match(COUNT);
				setState(5995);
				match(LR_BRACKET);
				setState(6001);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(5996);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case ALL:
				case CASE:
				case CAST:
				case CONVERT:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DIAGNOSTICS:
				case EXISTS:
				case FALSE:
				case IF:
				case INSERT:
				case INTERVAL:
				case LEFT:
				case NOT:
				case NULL_LITERAL:
				case NUMBER:
				case REPLACE:
				case RIGHT:
				case STACKED:
				case TRUE:
				case VALUES:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case CHAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case EXTRACT:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case PLUS:
				case MINUS:
				case EXCLAMATION_SYMBOL:
				case BIT_NOT_OP:
				case LR_BRACKET:
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case CHARSET_REVERSE_QOUTE_STRING:
				case START_NATIONAL_STRING_LITERAL:
				case STRING_LITERAL:
				case DECIMAL_LITERAL:
				case HEXADECIMAL_LITERAL:
				case REAL_LITERAL:
				case NULL_SPEC_LITERAL:
				case BIT_STRING:
				case STRING_CHARSET_NAME:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					setState(5998);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL) {
						{
						setState(5997);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
					}

					setState(6000);
					functionArg();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6003);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6004);
				match(COUNT);
				setState(6005);
				match(LR_BRACKET);
				setState(6006);
				((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
				setState(6007);
				functionArgs();
				setState(6008);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6010);
				_la = _input.LA(1);
				if ( !(((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (BIT_AND - 225)) | (1L << (BIT_OR - 225)) | (1L << (BIT_XOR - 225)) | (1L << (STD - 225)) | (1L << (STDDEV - 225)) | (1L << (STDDEV_POP - 225)) | (1L << (STDDEV_SAMP - 225)) | (1L << (VAR_POP - 225)) | (1L << (VAR_SAMP - 225)) | (1L << (VARIANCE - 225)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6011);
				match(LR_BRACKET);
				setState(6013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(6012);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
				}

				setState(6015);
				functionArg();
				setState(6016);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6018);
				match(GROUP_CONCAT);
				setState(6019);
				match(LR_BRACKET);
				setState(6021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTINCT) {
					{
					setState(6020);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
				}

				setState(6023);
				functionArgs();
				setState(6034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6024);
					match(ORDER);
					setState(6025);
					match(BY);
					setState(6026);
					orderByExpression();
					setState(6031);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6027);
						match(COMMA);
						setState(6028);
						orderByExpression();
						}
						}
						setState(6033);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(6038);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(6036);
					match(SEPARATOR);
					setState(6037);
					((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(6040);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(MySqlParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(MySqlParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(MySqlParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(MySqlParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(MySqlParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(MySqlParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(MySqlParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionName(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_scalarFunctionName);
		try {
			setState(6067);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case COUNT:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6044);
				functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(6045);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6046);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6047);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(6048);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(6049);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(6050);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(6051);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(6052);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(6053);
				match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(6054);
				match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(6055);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(6056);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(6057);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(6058);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(6059);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(6060);
				match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(6061);
				match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(6062);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(6063);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 21);
				{
				setState(6064);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 22);
				{
				setState(6065);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 23);
				{
				setState(6066);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordFunctionClauseContext extends ParserRuleContext {
		public Token functionName;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordFunctionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPasswordFunctionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPasswordFunctionClause(this);
		}
	}

	public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_passwordFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6069);
			((PasswordFunctionClauseContext)_localctx).functionName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				((PasswordFunctionClauseContext)_localctx).functionName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6070);
			match(LR_BRACKET);
			setState(6071);
			functionArg();
			setState(6072);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArgs(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6078);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,895,_ctx) ) {
			case 1:
				{
				setState(6074);
				constant();
				}
				break;
			case 2:
				{
				setState(6075);
				fullColumnName();
				}
				break;
			case 3:
				{
				setState(6076);
				functionCall();
				}
				break;
			case 4:
				{
				setState(6077);
				expression(0);
				}
				break;
			}
			setState(6089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6080);
				match(COMMA);
				setState(6085);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,896,_ctx) ) {
				case 1:
					{
					setState(6081);
					constant();
					}
					break;
				case 2:
					{
					setState(6082);
					fullColumnName();
					}
					break;
				case 3:
					{
					setState(6083);
					functionCall();
					}
					break;
				case 4:
					{
					setState(6084);
					expression(0);
					}
					break;
				}
				}
				}
				setState(6091);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArg(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_functionArg);
		try {
			setState(6096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6092);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6093);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6094);
				functionCall();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6095);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsExpression(this);
		}
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNotExpression(this);
		}
	}
	public static class LogicalExpressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalExpression(this);
		}
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPredicateExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 600;
		enterRecursionRule(_localctx, 600, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,900,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6099);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6100);
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6101);
				predicate(0);
				setState(6102);
				match(IS);
				setState(6104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6103);
					match(NOT);
					}
				}

				setState(6106);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6108);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6117);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,901,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(6111);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(6112);
					logicalOperator();
					setState(6113);
					expression(4);
					}
					} 
				}
				setState(6119);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,901,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSoundsLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSoundsLikePredicate(this);
		}
	}
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionAtomPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionAtomPredicate(this);
		}
	}
	public static class InPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInPredicate(this);
		}
	}
	public static class SubqueryComparasionPredicateContext extends PredicateContext {
		public Token quantifier;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public SubqueryComparasionPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryComparasionPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryComparasionPredicate(this);
		}
	}
	public static class BetweenPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBetweenPredicate(this);
		}
	}
	public static class BinaryComparasionPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public BinaryComparasionPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryComparasionPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryComparasionPredicate(this);
		}
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsNullPredicate(this);
		}
	}
	public static class LikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLikePredicate(this);
		}
	}
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode REGEXP() { return getToken(MySqlParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(MySqlParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRegexpPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRegexpPredicate(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 602;
		enterRecursionRule(_localctx, 602, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(6123);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,902,_ctx) ) {
			case 1:
				{
				setState(6121);
				match(LOCAL_ID);
				setState(6122);
				match(VAR_ASSIGN);
				}
				break;
			}
			setState(6125);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(6184);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,910,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6182);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,909,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparasionPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6127);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(6128);
						comparisonOperator();
						setState(6129);
						((BinaryComparasionPredicateContext)_localctx).right = predicate(8);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6131);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6133);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6132);
							match(NOT);
							}
						}

						setState(6135);
						match(BETWEEN);
						setState(6136);
						predicate(0);
						setState(6137);
						match(AND);
						setState(6138);
						predicate(6);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6140);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6141);
						match(SOUNDS);
						setState(6142);
						match(LIKE);
						setState(6143);
						predicate(5);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6144);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6146);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6145);
							match(NOT);
							}
						}

						setState(6148);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6149);
						predicate(3);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6150);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(6152);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6151);
							match(NOT);
							}
						}

						setState(6154);
						match(IN);
						setState(6155);
						match(LR_BRACKET);
						setState(6158);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,906,_ctx) ) {
						case 1:
							{
							setState(6156);
							selectStatement();
							}
							break;
						case 2:
							{
							setState(6157);
							expressions();
							}
							break;
						}
						setState(6160);
						match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6162);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(6163);
						match(IS);
						setState(6164);
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6165);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(6166);
						comparisonOperator();
						setState(6167);
						((SubqueryComparasionPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparasionPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6168);
						match(LR_BRACKET);
						setState(6169);
						selectStatement();
						setState(6170);
						match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6172);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6174);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6173);
							match(NOT);
							}
						}

						setState(6176);
						match(LIKE);
						setState(6177);
						predicate(0);
						setState(6180);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,908,_ctx) ) {
						case 1:
							{
							setState(6178);
							match(ESCAPE);
							setState(6179);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				setState(6186);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,910,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryExpressionAtom(this);
		}
	}
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateExpressionAtom(this);
		}
	}
	public static class SubqueryExpessionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SubqueryExpessionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryExpessionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryExpessionAtom(this);
		}
	}
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariableExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariableExpressionAtom(this);
		}
	}
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedExpressionAtom(this);
		}
	}
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedRowExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedRowExpressionAtom(this);
		}
	}
	public static class MathExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathExpressionAtom(this);
		}
	}
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalExpressionAtom(this);
		}
	}
	public static class ExistsExpessionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ExistsExpessionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExistsExpessionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExistsExpessionAtom(this);
		}
	}
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstantExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstantExpressionAtom(this);
		}
	}
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionCallExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionCallExpressionAtom(this);
		}
	}
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryExpressionAtom(this);
		}
	}
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnNameExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnNameExpressionAtom(this);
		}
	}
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitExpressionAtom(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 604;
		enterRecursionRule(_localctx, 604, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,913,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6188);
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6189);
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6190);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6191);
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6192);
				unaryOperator();
				setState(6193);
				expressionAtom(9);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6195);
				match(BINARY);
				setState(6196);
				expressionAtom(8);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6197);
				match(LR_BRACKET);
				setState(6198);
				expression(0);
				setState(6203);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6199);
					match(COMMA);
					setState(6200);
					expression(0);
					}
					}
					setState(6205);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6206);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6208);
				match(ROW);
				setState(6209);
				match(LR_BRACKET);
				setState(6210);
				expression(0);
				setState(6213); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6211);
					match(COMMA);
					setState(6212);
					expression(0);
					}
					}
					setState(6215); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(6217);
				match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpessionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6219);
				match(EXISTS);
				setState(6220);
				match(LR_BRACKET);
				setState(6221);
				selectStatement();
				setState(6222);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpessionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6224);
				match(LR_BRACKET);
				setState(6225);
				selectStatement();
				setState(6226);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6228);
				match(INTERVAL);
				setState(6229);
				expression(0);
				setState(6230);
				intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6247);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,915,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6245);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6234);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6235);
						bitOperator();
						setState(6236);
						((BitExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6238);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6239);
						mathOperator();
						setState(6240);
						((MathExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 3:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6242);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(6243);
						match(COLLATE);
						setState(6244);
						collationName();
						}
						break;
					}
					} 
				}
				setState(6249);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,915,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(MySqlParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryOperator(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6250);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 968)) & ~0x3f) == 0 && ((1L << (_la - 968)) & ((1L << (PLUS - 968)) | (1L << (MINUS - 968)) | (1L << (EXCLAMATION_SYMBOL - 968)) | (1L << (BIT_NOT_OP - 968)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(MySqlParser.GREATER_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySqlParser.LESS_SYMBOL, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitComparisonOperator(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_comparisonOperator);
		try {
			setState(6266);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6252);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6253);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6254);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6255);
				match(LESS_SYMBOL);
				setState(6256);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6257);
				match(GREATER_SYMBOL);
				setState(6258);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6259);
				match(LESS_SYMBOL);
				setState(6260);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6261);
				match(EXCLAMATION_SYMBOL);
				setState(6262);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6263);
				match(LESS_SYMBOL);
				setState(6264);
				match(EQUAL_SYMBOL);
				setState(6265);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(MySqlParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(MySqlParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(MySqlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(MySqlParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(MySqlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalOperator(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_logicalOperator);
		try {
			setState(6275);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(6268);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(6269);
				match(BIT_AND_OP);
				setState(6270);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(6271);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(6272);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(6273);
				match(BIT_OR_OP);
				setState(6274);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public List<TerminalNode> LESS_SYMBOL() { return getTokens(MySqlParser.LESS_SYMBOL); }
		public TerminalNode LESS_SYMBOL(int i) {
			return getToken(MySqlParser.LESS_SYMBOL, i);
		}
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public TerminalNode BIT_AND_OP() { return getToken(MySqlParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(MySqlParser.BIT_XOR_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(MySqlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitOperator(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_bitOperator);
		try {
			setState(6284);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6277);
				match(LESS_SYMBOL);
				setState(6278);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6279);
				match(GREATER_SYMBOL);
				setState(6280);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(6281);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(6282);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(6283);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(MySqlParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(MySqlParser.MODULE, 0); }
		public TerminalNode DIV() { return getToken(MySqlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public TerminalNode MINUSMINUS() { return getToken(MySqlParser.MINUSMINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathOperator(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6286);
			_la = _input.LA(1);
			if ( !(((((_la - 965)) & ~0x3f) == 0 && ((1L << (_la - 965)) & ((1L << (STAR - 965)) | (1L << (DIVIDE - 965)) | (1L << (MODULE - 965)) | (1L << (PLUS - 965)) | (1L << (MINUSMINUS - 965)) | (1L << (MINUS - 965)) | (1L << (DIV - 965)) | (1L << (MOD - 965)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(MySqlParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(MySqlParser.BIG5, 0); }
		public TerminalNode CP1250() { return getToken(MySqlParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(MySqlParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(MySqlParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(MySqlParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(MySqlParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(MySqlParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(MySqlParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(MySqlParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(MySqlParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(MySqlParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(MySqlParser.EUCKR, 0); }
		public TerminalNode GB2312() { return getToken(MySqlParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(MySqlParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(MySqlParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(MySqlParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(MySqlParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(MySqlParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(MySqlParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(MySqlParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(MySqlParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(MySqlParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(MySqlParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(MySqlParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(MySqlParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(MySqlParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(MySqlParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(MySqlParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(MySqlParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(MySqlParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(MySqlParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(MySqlParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(MySqlParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(MySqlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(MySqlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(MySqlParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(MySqlParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(MySqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetNameBase(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6288);
			_la = _input.LA(1);
			if ( !(((((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & ((1L << (ARMSCII8 - 599)) | (1L << (ASCII - 599)) | (1L << (BIG5 - 599)) | (1L << (CP1250 - 599)) | (1L << (CP1251 - 599)) | (1L << (CP1256 - 599)) | (1L << (CP1257 - 599)) | (1L << (CP850 - 599)) | (1L << (CP852 - 599)) | (1L << (CP866 - 599)) | (1L << (CP932 - 599)) | (1L << (DEC8 - 599)) | (1L << (EUCJPMS - 599)) | (1L << (EUCKR - 599)) | (1L << (GB2312 - 599)) | (1L << (GBK - 599)) | (1L << (GEOSTD8 - 599)) | (1L << (GREEK - 599)) | (1L << (HEBREW - 599)) | (1L << (HP8 - 599)) | (1L << (KEYBCS2 - 599)) | (1L << (KOI8R - 599)) | (1L << (KOI8U - 599)) | (1L << (LATIN1 - 599)) | (1L << (LATIN2 - 599)) | (1L << (LATIN5 - 599)) | (1L << (LATIN7 - 599)) | (1L << (MACCE - 599)) | (1L << (MACROMAN - 599)) | (1L << (SJIS - 599)) | (1L << (SWE7 - 599)) | (1L << (TIS620 - 599)) | (1L << (UCS2 - 599)) | (1L << (UJIS - 599)) | (1L << (UTF16 - 599)) | (1L << (UTF16LE - 599)) | (1L << (UTF32 - 599)) | (1L << (UTF8 - 599)) | (1L << (UTF8MB3 - 599)) | (1L << (UTF8MB4 - 599)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionLevelBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionLevelBase(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6290);
			_la = _input.LA(1);
			if ( !(((((_la - 651)) & ~0x3f) == 0 && ((1L << (_la - 651)) & ((1L << (REPEATABLE - 651)) | (1L << (COMMITTED - 651)) | (1L << (UNCOMMITTED - 651)) | (1L << (SERIALIZABLE - 651)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilegesBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilegesBase(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6292);
			_la = _input.LA(1);
			if ( !(((((_la - 589)) & ~0x3f) == 0 && ((1L << (_la - 589)) & ((1L << (TABLES - 589)) | (1L << (ROUTINE - 589)) | (1L << (EXECUTE - 589)) | (1L << (FILE - 589)) | (1L << (PROCESS - 589)) | (1L << (RELOAD - 589)) | (1L << (SHUTDOWN - 589)) | (1L << (SUPER - 589)) | (1L << (PRIVILEGES - 589)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalTypeBase(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6294);
			_la = _input.LA(1);
			if ( !(((((_la - 581)) & ~0x3f) == 0 && ((1L << (_la - 581)) & ((1L << (QUARTER - 581)) | (1L << (MONTH - 581)) | (1L << (DAY - 581)) | (1L << (HOUR - 581)) | (1L << (MINUTE - 581)) | (1L << (WEEK - 581)) | (1L << (SECOND - 581)) | (1L << (MICROSECOND - 581)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeBase(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6296);
			_la = _input.LA(1);
			if ( !(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode EVEN() { return getToken(MySqlParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode INTERNAL() { return getToken(MySqlParser.INTERNAL, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode NUMBER() { return getToken(MySqlParser.NUMBER, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public TerminalNode OJ() { return getToken(MySqlParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKeywordsCanBeId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKeywordsCanBeId(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6298);
			_la = _input.LA(1);
			if ( !(_la==CURRENT || _la==DIAGNOSTICS || _la==NUMBER || _la==STACKED || ((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (SERIAL - 212)) | (1L << (ACCOUNT - 212)) | (1L << (ACTION - 212)) | (1L << (AFTER - 212)) | (1L << (AGGREGATE - 212)) | (1L << (ALGORITHM - 212)) | (1L << (ANY - 212)) | (1L << (AT - 212)) | (1L << (AUTHORS - 212)) | (1L << (AUTOCOMMIT - 212)) | (1L << (AUTOEXTEND_SIZE - 212)) | (1L << (AUTO_INCREMENT - 212)) | (1L << (AVG_ROW_LENGTH - 212)) | (1L << (BEGIN - 212)) | (1L << (BINLOG - 212)) | (1L << (BIT - 212)) | (1L << (BLOCK - 212)) | (1L << (BOOL - 212)))) != 0) || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (BOOLEAN - 276)) | (1L << (BTREE - 276)) | (1L << (CACHE - 276)) | (1L << (CASCADED - 276)) | (1L << (CHAIN - 276)) | (1L << (CHANGED - 276)) | (1L << (CHANNEL - 276)) | (1L << (CHECKSUM - 276)) | (1L << (PAGE_CHECKSUM - 276)) | (1L << (CIPHER - 276)) | (1L << (CLASS_ORIGIN - 276)) | (1L << (CLIENT - 276)) | (1L << (CLOSE - 276)) | (1L << (COALESCE - 276)) | (1L << (CODE - 276)) | (1L << (COLUMNS - 276)) | (1L << (COLUMN_FORMAT - 276)) | (1L << (COLUMN_NAME - 276)) | (1L << (COMMENT - 276)) | (1L << (COMMIT - 276)) | (1L << (COMPACT - 276)) | (1L << (COMPLETION - 276)) | (1L << (COMPRESSED - 276)) | (1L << (COMPRESSION - 276)) | (1L << (CONCURRENT - 276)) | (1L << (CONNECTION - 276)) | (1L << (CONSISTENT - 276)) | (1L << (CONSTRAINT_CATALOG - 276)) | (1L << (CONSTRAINT_SCHEMA - 276)) | (1L << (CONSTRAINT_NAME - 276)) | (1L << (CONTAINS - 276)) | (1L << (CONTEXT - 276)) | (1L << (CONTRIBUTORS - 276)) | (1L << (COPY - 276)) | (1L << (CPU - 276)) | (1L << (CURSOR_NAME - 276)) | (1L << (DATA - 276)) | (1L << (DATAFILE - 276)) | (1L << (DEALLOCATE - 276)) | (1L << (DEFAULT_AUTH - 276)) | (1L << (DEFINER - 276)) | (1L << (DELAY_KEY_WRITE - 276)) | (1L << (DES_KEY_FILE - 276)) | (1L << (DIRECTORY - 276)) | (1L << (DISABLE - 276)) | (1L << (DISCARD - 276)) | (1L << (DISK - 276)) | (1L << (DO - 276)) | (1L << (DUMPFILE - 276)) | (1L << (DUPLICATE - 276)) | (1L << (DYNAMIC - 276)) | (1L << (ENABLE - 276)) | (1L << (ENCRYPTION - 276)) | (1L << (END - 276)) | (1L << (ENDS - 276)) | (1L << (ENGINE - 276)) | (1L << (ENGINES - 276)) | (1L << (ERROR - 276)) | (1L << (ERRORS - 276)) | (1L << (ESCAPE - 276)) | (1L << (EVEN - 276)) | (1L << (EVENT - 276)) | (1L << (EVENTS - 276)) | (1L << (EVERY - 276)))) != 0) || ((((_la - 340)) & ~0x3f) == 0 && ((1L << (_la - 340)) & ((1L << (EXCHANGE - 340)) | (1L << (EXCLUSIVE - 340)) | (1L << (EXPIRE - 340)) | (1L << (EXPORT - 340)) | (1L << (EXTENDED - 340)) | (1L << (EXTENT_SIZE - 340)) | (1L << (FAST - 340)) | (1L << (FAULTS - 340)) | (1L << (FIELDS - 340)) | (1L << (FILE_BLOCK_SIZE - 340)) | (1L << (FILTER - 340)) | (1L << (FIRST - 340)) | (1L << (FIXED - 340)) | (1L << (FLUSH - 340)) | (1L << (FOLLOWS - 340)) | (1L << (FOUND - 340)) | (1L << (FULL - 340)) | (1L << (FUNCTION - 340)) | (1L << (GENERAL - 340)) | (1L << (GLOBAL - 340)) | (1L << (GRANTS - 340)) | (1L << (GROUP_REPLICATION - 340)) | (1L << (HANDLER - 340)) | (1L << (HASH - 340)) | (1L << (HELP - 340)) | (1L << (HOST - 340)) | (1L << (HOSTS - 340)) | (1L << (IDENTIFIED - 340)) | (1L << (IGNORE_SERVER_IDS - 340)) | (1L << (IMPORT - 340)) | (1L << (INDEXES - 340)) | (1L << (INITIAL_SIZE - 340)) | (1L << (INPLACE - 340)) | (1L << (INSERT_METHOD - 340)) | (1L << (INSTALL - 340)) | (1L << (INSTANCE - 340)) | (1L << (INVOKER - 340)) | (1L << (IO - 340)) | (1L << (IO_THREAD - 340)) | (1L << (IPC - 340)) | (1L << (ISOLATION - 340)) | (1L << (ISSUER - 340)) | (1L << (JSON - 340)) | (1L << (KEY_BLOCK_SIZE - 340)) | (1L << (LANGUAGE - 340)) | (1L << (LAST - 340)) | (1L << (LEAVES - 340)) | (1L << (LESS - 340)) | (1L << (LEVEL - 340)) | (1L << (LIST - 340)) | (1L << (LOCAL - 340)) | (1L << (LOGFILE - 340)) | (1L << (LOGS - 340)) | (1L << (MASTER - 340)) | (1L << (MASTER_AUTO_POSITION - 340)) | (1L << (MASTER_CONNECT_RETRY - 340)) | (1L << (MASTER_DELAY - 340)) | (1L << (MASTER_HEARTBEAT_PERIOD - 340)) | (1L << (MASTER_HOST - 340)) | (1L << (MASTER_LOG_FILE - 340)) | (1L << (MASTER_LOG_POS - 340)) | (1L << (MASTER_PASSWORD - 340)) | (1L << (MASTER_PORT - 340)))) != 0) || ((((_la - 404)) & ~0x3f) == 0 && ((1L << (_la - 404)) & ((1L << (MASTER_RETRY_COUNT - 404)) | (1L << (MASTER_SSL - 404)) | (1L << (MASTER_SSL_CA - 404)) | (1L << (MASTER_SSL_CAPATH - 404)) | (1L << (MASTER_SSL_CERT - 404)) | (1L << (MASTER_SSL_CIPHER - 404)) | (1L << (MASTER_SSL_CRL - 404)) | (1L << (MASTER_SSL_CRLPATH - 404)) | (1L << (MASTER_SSL_KEY - 404)) | (1L << (MASTER_TLS_VERSION - 404)) | (1L << (MASTER_USER - 404)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 404)) | (1L << (MAX_QUERIES_PER_HOUR - 404)) | (1L << (MAX_ROWS - 404)) | (1L << (MAX_SIZE - 404)) | (1L << (MAX_UPDATES_PER_HOUR - 404)) | (1L << (MAX_USER_CONNECTIONS - 404)) | (1L << (MEDIUM - 404)) | (1L << (MERGE - 404)) | (1L << (MESSAGE_TEXT - 404)) | (1L << (MID - 404)) | (1L << (MIGRATE - 404)) | (1L << (MIN_ROWS - 404)) | (1L << (MODE - 404)) | (1L << (MODIFY - 404)) | (1L << (MUTEX - 404)) | (1L << (MYSQL - 404)) | (1L << (MYSQL_ERRNO - 404)) | (1L << (NAME - 404)) | (1L << (NAMES - 404)) | (1L << (NCHAR - 404)) | (1L << (NEVER - 404)) | (1L << (NEXT - 404)) | (1L << (NO - 404)) | (1L << (NODEGROUP - 404)) | (1L << (NONE - 404)) | (1L << (OFFLINE - 404)) | (1L << (OFFSET - 404)) | (1L << (OJ - 404)) | (1L << (OLD_PASSWORD - 404)) | (1L << (ONE - 404)) | (1L << (ONLINE - 404)) | (1L << (ONLY - 404)) | (1L << (OPEN - 404)) | (1L << (OPTIMIZER_COSTS - 404)) | (1L << (OPTIONS - 404)) | (1L << (OWNER - 404)) | (1L << (PACK_KEYS - 404)) | (1L << (PAGE - 404)) | (1L << (PARSER - 404)) | (1L << (PARTIAL - 404)) | (1L << (PARTITIONING - 404)) | (1L << (PARTITIONS - 404)) | (1L << (PASSWORD - 404)) | (1L << (PHASE - 404)) | (1L << (PLUGIN - 404)) | (1L << (PLUGIN_DIR - 404)) | (1L << (PLUGINS - 404)) | (1L << (PORT - 404)) | (1L << (PRECEDES - 404)) | (1L << (PREPARE - 404)) | (1L << (PRESERVE - 404)) | (1L << (PREV - 404)) | (1L << (PROCESSLIST - 404)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (PROFILE - 468)) | (1L << (PROFILES - 468)) | (1L << (PROXY - 468)) | (1L << (QUERY - 468)) | (1L << (QUICK - 468)) | (1L << (REBUILD - 468)) | (1L << (RECOVER - 468)) | (1L << (REDO_BUFFER_SIZE - 468)) | (1L << (REDUNDANT - 468)) | (1L << (RELAY - 468)) | (1L << (RELAY_LOG_FILE - 468)) | (1L << (RELAY_LOG_POS - 468)) | (1L << (RELAYLOG - 468)) | (1L << (REMOVE - 468)) | (1L << (REORGANIZE - 468)) | (1L << (REPAIR - 468)) | (1L << (REPLICATE_DO_DB - 468)) | (1L << (REPLICATE_DO_TABLE - 468)) | (1L << (REPLICATE_IGNORE_DB - 468)) | (1L << (REPLICATE_IGNORE_TABLE - 468)) | (1L << (REPLICATE_REWRITE_DB - 468)) | (1L << (REPLICATE_WILD_DO_TABLE - 468)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 468)) | (1L << (REPLICATION - 468)) | (1L << (RESET - 468)) | (1L << (RESUME - 468)) | (1L << (RETURNED_SQLSTATE - 468)) | (1L << (RETURNS - 468)) | (1L << (ROLLBACK - 468)) | (1L << (ROLLUP - 468)) | (1L << (ROTATE - 468)) | (1L << (ROW - 468)) | (1L << (ROWS - 468)) | (1L << (ROW_FORMAT - 468)) | (1L << (SAVEPOINT - 468)) | (1L << (SCHEDULE - 468)) | (1L << (SECURITY - 468)) | (1L << (SERVER - 468)) | (1L << (SESSION - 468)) | (1L << (SHARE - 468)) | (1L << (SHARED - 468)) | (1L << (SIGNED - 468)) | (1L << (SIMPLE - 468)) | (1L << (SLAVE - 468)) | (1L << (SLOW - 468)) | (1L << (SNAPSHOT - 468)) | (1L << (SOCKET - 468)) | (1L << (SOME - 468)) | (1L << (SONAME - 468)) | (1L << (SOUNDS - 468)) | (1L << (SOURCE - 468)) | (1L << (SQL_AFTER_GTIDS - 468)) | (1L << (SQL_AFTER_MTS_GAPS - 468)) | (1L << (SQL_BEFORE_GTIDS - 468)) | (1L << (SQL_BUFFER_RESULT - 468)) | (1L << (SQL_CACHE - 468)) | (1L << (SQL_NO_CACHE - 468)) | (1L << (SQL_THREAD - 468)) | (1L << (START - 468)) | (1L << (STARTS - 468)) | (1L << (STATS_AUTO_RECALC - 468)) | (1L << (STATS_PERSISTENT - 468)) | (1L << (STATS_SAMPLE_PAGES - 468)) | (1L << (STATUS - 468)))) != 0) || ((((_la - 532)) & ~0x3f) == 0 && ((1L << (_la - 532)) & ((1L << (STOP - 532)) | (1L << (STORAGE - 532)) | (1L << (STRING - 532)) | (1L << (SUBCLASS_ORIGIN - 532)) | (1L << (SUBJECT - 532)) | (1L << (SUBPARTITION - 532)) | (1L << (SUBPARTITIONS - 532)) | (1L << (SUSPEND - 532)) | (1L << (SWAPS - 532)) | (1L << (SWITCHES - 532)) | (1L << (TABLE_NAME - 532)) | (1L << (TABLESPACE - 532)) | (1L << (TEMPORARY - 532)) | (1L << (TEMPTABLE - 532)) | (1L << (THAN - 532)) | (1L << (TRADITIONAL - 532)) | (1L << (TRANSACTION - 532)) | (1L << (TRIGGERS - 532)) | (1L << (TRUNCATE - 532)) | (1L << (UNDEFINED - 532)) | (1L << (UNDOFILE - 532)) | (1L << (UNDO_BUFFER_SIZE - 532)) | (1L << (UNINSTALL - 532)) | (1L << (UNKNOWN - 532)) | (1L << (UNTIL - 532)) | (1L << (UPGRADE - 532)) | (1L << (USER - 532)) | (1L << (USE_FRM - 532)) | (1L << (USER_RESOURCES - 532)) | (1L << (VALIDATION - 532)) | (1L << (VALUE - 532)) | (1L << (VARIABLES - 532)) | (1L << (VIEW - 532)) | (1L << (WAIT - 532)) | (1L << (WARNINGS - 532)) | (1L << (WITHOUT - 532)) | (1L << (WORK - 532)) | (1L << (WRAPPER - 532)) | (1L << (X509 - 532)) | (1L << (XA - 532)) | (1L << (XML - 532)) | (1L << (INTERNAL - 532)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(MySqlParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(MySqlParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(MySqlParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(MySqlParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(MySqlParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(MySqlParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(MySqlParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(MySqlParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(MySqlParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(MySqlParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(MySqlParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(MySqlParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(MySqlParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(MySqlParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(MySqlParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(MySqlParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(MySqlParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(MySqlParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(MySqlParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(MySqlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(MySqlParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(MySqlParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(MySqlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(MySqlParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(MySqlParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(MySqlParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(MySqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(MySqlParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(MySqlParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(MySqlParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(MySqlParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(MySqlParser.COS, 0); }
		public TerminalNode COT() { return getToken(MySqlParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(MySqlParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(MySqlParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(MySqlParser.CROSSES, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(MySqlParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(MySqlParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(MySqlParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(MySqlParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(MySqlParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(MySqlParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(MySqlParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(MySqlParser.DEGREES, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(MySqlParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(MySqlParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(MySqlParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(MySqlParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(MySqlParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(MySqlParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(MySqlParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(MySqlParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(MySqlParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(MySqlParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(MySqlParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(MySqlParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(MySqlParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(MySqlParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(MySqlParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(MySqlParser.FIND_IN_SET, 0); }
		public TerminalNode FLOOR() { return getToken(MySqlParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(MySqlParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(MySqlParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(MySqlParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(MySqlParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(MySqlParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(MySqlParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(MySqlParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(MySqlParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(MySqlParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(MySqlParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(MySqlParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(MySqlParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(MySqlParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(MySqlParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(MySqlParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(MySqlParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(MySqlParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(MySqlParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(MySqlParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(MySqlParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(MySqlParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(MySqlParser.INTERSECTS, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode ISCLOSED() { return getToken(MySqlParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(MySqlParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(MySqlParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(MySqlParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(MySqlParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(MySqlParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(MySqlParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(MySqlParser.IS_USED_LOCK, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(MySqlParser.LAST_INSERT_ID, 0); }
		public TerminalNode LCASE() { return getToken(MySqlParser.LCASE, 0); }
		public TerminalNode LEAST() { return getToken(MySqlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(MySqlParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(MySqlParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(MySqlParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(MySqlParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(MySqlParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(MySqlParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(MySqlParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(MySqlParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(MySqlParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(MySqlParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(MySqlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(MySqlParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(MySqlParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(MySqlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(MySqlParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(MySqlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(MySqlParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(MySqlParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(MySqlParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(MySqlParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(MySqlParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(MySqlParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(MySqlParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(MySqlParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(MySqlParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(MySqlParser.MLINEFROMWKB, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(MySqlParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(MySqlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(MySqlParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(MySqlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(MySqlParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(MySqlParser.NAME_CONST, 0); }
		public TerminalNode NULLIF() { return getToken(MySqlParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(MySqlParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(MySqlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(MySqlParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(MySqlParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(MySqlParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(MySqlParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(MySqlParser.OVERLAPS, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(MySqlParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(MySqlParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(MySqlParser.PI, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(MySqlParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(MySqlParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(MySqlParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(MySqlParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(MySqlParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(MySqlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(MySqlParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(MySqlParser.POW, 0); }
		public TerminalNode POWER() { return getToken(MySqlParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(MySqlParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(MySqlParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(MySqlParser.RAND, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(MySqlParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(MySqlParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(MySqlParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(MySqlParser.ROW_COUNT, 0); }
		public TerminalNode RPAD() { return getToken(MySqlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(MySqlParser.RTRIM, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(MySqlParser.SEC_TO_TIME, 0); }
		public TerminalNode SESSION_USER() { return getToken(MySqlParser.SESSION_USER, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SHA() { return getToken(MySqlParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(MySqlParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(MySqlParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(MySqlParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(MySqlParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(MySqlParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(MySqlParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(MySqlParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(MySqlParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(MySqlParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(MySqlParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(MySqlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(MySqlParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(MySqlParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(MySqlParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(MySqlParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(MySqlParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(MySqlParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(MySqlParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(MySqlParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(MySqlParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(MySqlParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(MySqlParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(MySqlParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(MySqlParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(MySqlParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(MySqlParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(MySqlParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(MySqlParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(MySqlParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(MySqlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(MySqlParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(MySqlParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(MySqlParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(MySqlParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(MySqlParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(MySqlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(MySqlParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(MySqlParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(MySqlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(MySqlParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(MySqlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(MySqlParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(MySqlParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(MySqlParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(MySqlParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(MySqlParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(MySqlParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(MySqlParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(MySqlParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(MySqlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(MySqlParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(MySqlParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(MySqlParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(MySqlParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(MySqlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(MySqlParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(MySqlParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(MySqlParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(MySqlParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(MySqlParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(MySqlParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(MySqlParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(MySqlParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(MySqlParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(MySqlParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(MySqlParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(MySqlParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(MySqlParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(MySqlParser.VERSION, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(MySqlParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(MySqlParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(MySqlParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(MySqlParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(MySqlParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(MySqlParser.X_FUNCTION, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionNameBase(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6300);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (YEAR - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || _la==INVISIBLE || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (VISIBLE - 567)) | (1L << (QUARTER - 567)) | (1L << (MONTH - 567)) | (1L << (DAY - 567)) | (1L << (HOUR - 567)) | (1L << (MINUTE - 567)) | (1L << (WEEK - 567)) | (1L << (SECOND - 567)) | (1L << (MICROSECOND - 567)) | (1L << (SESSION_VARIABLES_ADMIN - 567)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (GEOMETRYCOLLECTION - 655)) | (1L << (LINESTRING - 655)) | (1L << (MULTILINESTRING - 655)) | (1L << (MULTIPOINT - 655)) | (1L << (MULTIPOLYGON - 655)) | (1L << (POINT - 655)) | (1L << (POLYGON - 655)) | (1L << (ABS - 655)) | (1L << (ACOS - 655)) | (1L << (ADDDATE - 655)) | (1L << (ADDTIME - 655)) | (1L << (AES_DECRYPT - 655)) | (1L << (AES_ENCRYPT - 655)) | (1L << (AREA - 655)) | (1L << (ASBINARY - 655)) | (1L << (ASIN - 655)) | (1L << (ASTEXT - 655)) | (1L << (ASWKB - 655)) | (1L << (ASWKT - 655)) | (1L << (ASYMMETRIC_DECRYPT - 655)) | (1L << (ASYMMETRIC_DERIVE - 655)) | (1L << (ASYMMETRIC_ENCRYPT - 655)) | (1L << (ASYMMETRIC_SIGN - 655)) | (1L << (ASYMMETRIC_VERIFY - 655)) | (1L << (ATAN - 655)) | (1L << (ATAN2 - 655)) | (1L << (BENCHMARK - 655)) | (1L << (BIN - 655)) | (1L << (BIT_COUNT - 655)) | (1L << (BIT_LENGTH - 655)) | (1L << (BUFFER - 655)) | (1L << (CEIL - 655)) | (1L << (CEILING - 655)) | (1L << (CENTROID - 655)) | (1L << (CHARACTER_LENGTH - 655)) | (1L << (CHARSET - 655)) | (1L << (CHAR_LENGTH - 655)) | (1L << (COERCIBILITY - 655)) | (1L << (COLLATION - 655)) | (1L << (COMPRESS - 655)) | (1L << (CONCAT - 655)) | (1L << (CONCAT_WS - 655)) | (1L << (CONNECTION_ID - 655)) | (1L << (CONV - 655)) | (1L << (CONVERT_TZ - 655)) | (1L << (COS - 655)) | (1L << (COT - 655)) | (1L << (CRC32 - 655)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 655)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 655)) | (1L << (CREATE_DH_PARAMETERS - 655)) | (1L << (CREATE_DIGEST - 655)) | (1L << (CROSSES - 655)) | (1L << (DATEDIFF - 655)) | (1L << (DATE_FORMAT - 655)) | (1L << (DAYNAME - 655)) | (1L << (DAYOFMONTH - 655)) | (1L << (DAYOFWEEK - 655)) | (1L << (DAYOFYEAR - 655)) | (1L << (DECODE - 655)) | (1L << (DEGREES - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (DES_DECRYPT - 719)) | (1L << (DES_ENCRYPT - 719)) | (1L << (DIMENSION - 719)) | (1L << (DISJOINT - 719)) | (1L << (ELT - 719)) | (1L << (ENCODE - 719)) | (1L << (ENCRYPT - 719)) | (1L << (ENDPOINT - 719)) | (1L << (ENVELOPE - 719)) | (1L << (EQUALS - 719)) | (1L << (EXP - 719)) | (1L << (EXPORT_SET - 719)) | (1L << (EXTERIORRING - 719)) | (1L << (EXTRACTVALUE - 719)) | (1L << (FIELD - 719)) | (1L << (FIND_IN_SET - 719)) | (1L << (FLOOR - 719)) | (1L << (FORMAT - 719)) | (1L << (FOUND_ROWS - 719)) | (1L << (FROM_BASE64 - 719)) | (1L << (FROM_DAYS - 719)) | (1L << (FROM_UNIXTIME - 719)) | (1L << (GEOMCOLLFROMTEXT - 719)) | (1L << (GEOMCOLLFROMWKB - 719)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 719)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 719)) | (1L << (GEOMETRYFROMTEXT - 719)) | (1L << (GEOMETRYFROMWKB - 719)) | (1L << (GEOMETRYN - 719)) | (1L << (GEOMETRYTYPE - 719)) | (1L << (GEOMFROMTEXT - 719)) | (1L << (GEOMFROMWKB - 719)) | (1L << (GET_FORMAT - 719)) | (1L << (GET_LOCK - 719)) | (1L << (GLENGTH - 719)) | (1L << (GREATEST - 719)) | (1L << (GTID_SUBSET - 719)) | (1L << (GTID_SUBTRACT - 719)) | (1L << (HEX - 719)) | (1L << (IFNULL - 719)) | (1L << (INET6_ATON - 719)) | (1L << (INET6_NTOA - 719)) | (1L << (INET_ATON - 719)) | (1L << (INET_NTOA - 719)) | (1L << (INSTR - 719)) | (1L << (INTERIORRINGN - 719)) | (1L << (INTERSECTS - 719)) | (1L << (ISCLOSED - 719)) | (1L << (ISEMPTY - 719)) | (1L << (ISNULL - 719)) | (1L << (ISSIMPLE - 719)) | (1L << (IS_FREE_LOCK - 719)) | (1L << (IS_IPV4 - 719)) | (1L << (IS_IPV4_COMPAT - 719)) | (1L << (IS_IPV4_MAPPED - 719)) | (1L << (IS_IPV6 - 719)) | (1L << (IS_USED_LOCK - 719)) | (1L << (LAST_INSERT_ID - 719)) | (1L << (LCASE - 719)) | (1L << (LEAST - 719)) | (1L << (LENGTH - 719)) | (1L << (LINEFROMTEXT - 719)) | (1L << (LINEFROMWKB - 719)) | (1L << (LINESTRINGFROMTEXT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (LINESTRINGFROMWKB - 783)) | (1L << (LN - 783)) | (1L << (LOAD_FILE - 783)) | (1L << (LOCATE - 783)) | (1L << (LOG - 783)) | (1L << (LOG10 - 783)) | (1L << (LOG2 - 783)) | (1L << (LOWER - 783)) | (1L << (LPAD - 783)) | (1L << (LTRIM - 783)) | (1L << (MAKEDATE - 783)) | (1L << (MAKETIME - 783)) | (1L << (MAKE_SET - 783)) | (1L << (MASTER_POS_WAIT - 783)) | (1L << (MBRCONTAINS - 783)) | (1L << (MBRDISJOINT - 783)) | (1L << (MBREQUAL - 783)) | (1L << (MBRINTERSECTS - 783)) | (1L << (MBROVERLAPS - 783)) | (1L << (MBRTOUCHES - 783)) | (1L << (MBRWITHIN - 783)) | (1L << (MD5 - 783)) | (1L << (MLINEFROMTEXT - 783)) | (1L << (MLINEFROMWKB - 783)) | (1L << (MONTHNAME - 783)) | (1L << (MPOINTFROMTEXT - 783)) | (1L << (MPOINTFROMWKB - 783)) | (1L << (MPOLYFROMTEXT - 783)) | (1L << (MPOLYFROMWKB - 783)) | (1L << (MULTILINESTRINGFROMTEXT - 783)) | (1L << (MULTILINESTRINGFROMWKB - 783)) | (1L << (MULTIPOINTFROMTEXT - 783)) | (1L << (MULTIPOINTFROMWKB - 783)) | (1L << (MULTIPOLYGONFROMTEXT - 783)) | (1L << (MULTIPOLYGONFROMWKB - 783)) | (1L << (NAME_CONST - 783)) | (1L << (NULLIF - 783)) | (1L << (NUMGEOMETRIES - 783)) | (1L << (NUMINTERIORRINGS - 783)) | (1L << (NUMPOINTS - 783)) | (1L << (OCT - 783)) | (1L << (OCTET_LENGTH - 783)) | (1L << (ORD - 783)) | (1L << (OVERLAPS - 783)) | (1L << (PERIOD_ADD - 783)) | (1L << (PERIOD_DIFF - 783)) | (1L << (PI - 783)) | (1L << (POINTFROMTEXT - 783)) | (1L << (POINTFROMWKB - 783)) | (1L << (POINTN - 783)) | (1L << (POLYFROMTEXT - 783)) | (1L << (POLYFROMWKB - 783)) | (1L << (POLYGONFROMTEXT - 783)) | (1L << (POLYGONFROMWKB - 783)) | (1L << (POW - 783)) | (1L << (POWER - 783)) | (1L << (QUOTE - 783)) | (1L << (RADIANS - 783)) | (1L << (RAND - 783)) | (1L << (RANDOM_BYTES - 783)) | (1L << (RELEASE_LOCK - 783)) | (1L << (REVERSE - 783)) | (1L << (ROUND - 783)) | (1L << (ROW_COUNT - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (RPAD - 847)) | (1L << (RTRIM - 847)) | (1L << (SEC_TO_TIME - 847)) | (1L << (SESSION_USER - 847)) | (1L << (SHA - 847)) | (1L << (SHA1 - 847)) | (1L << (SHA2 - 847)) | (1L << (SIGN - 847)) | (1L << (SIN - 847)) | (1L << (SLEEP - 847)) | (1L << (SOUNDEX - 847)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 847)) | (1L << (SQRT - 847)) | (1L << (SRID - 847)) | (1L << (STARTPOINT - 847)) | (1L << (STRCMP - 847)) | (1L << (STR_TO_DATE - 847)) | (1L << (ST_AREA - 847)) | (1L << (ST_ASBINARY - 847)) | (1L << (ST_ASTEXT - 847)) | (1L << (ST_ASWKB - 847)) | (1L << (ST_ASWKT - 847)) | (1L << (ST_BUFFER - 847)) | (1L << (ST_CENTROID - 847)) | (1L << (ST_CONTAINS - 847)) | (1L << (ST_CROSSES - 847)) | (1L << (ST_DIFFERENCE - 847)) | (1L << (ST_DIMENSION - 847)) | (1L << (ST_DISJOINT - 847)) | (1L << (ST_DISTANCE - 847)) | (1L << (ST_ENDPOINT - 847)) | (1L << (ST_ENVELOPE - 847)) | (1L << (ST_EQUALS - 847)) | (1L << (ST_EXTERIORRING - 847)) | (1L << (ST_GEOMCOLLFROMTEXT - 847)) | (1L << (ST_GEOMCOLLFROMTXT - 847)) | (1L << (ST_GEOMCOLLFROMWKB - 847)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (ST_GEOMETRYFROMTEXT - 847)) | (1L << (ST_GEOMETRYFROMWKB - 847)) | (1L << (ST_GEOMETRYN - 847)) | (1L << (ST_GEOMETRYTYPE - 847)) | (1L << (ST_GEOMFROMTEXT - 847)) | (1L << (ST_GEOMFROMWKB - 847)) | (1L << (ST_INTERIORRINGN - 847)) | (1L << (ST_INTERSECTION - 847)) | (1L << (ST_INTERSECTS - 847)) | (1L << (ST_ISCLOSED - 847)) | (1L << (ST_ISEMPTY - 847)) | (1L << (ST_ISSIMPLE - 847)) | (1L << (ST_LINEFROMTEXT - 847)) | (1L << (ST_LINEFROMWKB - 847)) | (1L << (ST_LINESTRINGFROMTEXT - 847)) | (1L << (ST_LINESTRINGFROMWKB - 847)) | (1L << (ST_NUMGEOMETRIES - 847)) | (1L << (ST_NUMINTERIORRING - 847)) | (1L << (ST_NUMINTERIORRINGS - 847)) | (1L << (ST_NUMPOINTS - 847)) | (1L << (ST_OVERLAPS - 847)) | (1L << (ST_POINTFROMTEXT - 847)) | (1L << (ST_POINTFROMWKB - 847)) | (1L << (ST_POINTN - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (ST_POLYFROMTEXT - 911)) | (1L << (ST_POLYFROMWKB - 911)) | (1L << (ST_POLYGONFROMTEXT - 911)) | (1L << (ST_POLYGONFROMWKB - 911)) | (1L << (ST_SRID - 911)) | (1L << (ST_STARTPOINT - 911)) | (1L << (ST_SYMDIFFERENCE - 911)) | (1L << (ST_TOUCHES - 911)) | (1L << (ST_UNION - 911)) | (1L << (ST_WITHIN - 911)) | (1L << (ST_X - 911)) | (1L << (ST_Y - 911)) | (1L << (SUBDATE - 911)) | (1L << (SUBSTRING_INDEX - 911)) | (1L << (SUBTIME - 911)) | (1L << (SYSTEM_USER - 911)) | (1L << (TAN - 911)) | (1L << (TIMEDIFF - 911)) | (1L << (TIMESTAMPADD - 911)) | (1L << (TIMESTAMPDIFF - 911)) | (1L << (TIME_FORMAT - 911)) | (1L << (TIME_TO_SEC - 911)) | (1L << (TOUCHES - 911)) | (1L << (TO_BASE64 - 911)) | (1L << (TO_DAYS - 911)) | (1L << (TO_SECONDS - 911)) | (1L << (UCASE - 911)) | (1L << (UNCOMPRESS - 911)) | (1L << (UNCOMPRESSED_LENGTH - 911)) | (1L << (UNHEX - 911)) | (1L << (UNIX_TIMESTAMP - 911)) | (1L << (UPDATEXML - 911)) | (1L << (UPPER - 911)) | (1L << (UUID - 911)) | (1L << (UUID_SHORT - 911)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 911)) | (1L << (VERSION - 911)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 911)) | (1L << (WEEKDAY - 911)) | (1L << (WEEKOFYEAR - 911)) | (1L << (WEIGHT_STRING - 911)) | (1L << (WITHIN - 911)) | (1L << (YEARWEEK - 911)) | (1L << (Y_FUNCTION - 911)) | (1L << (X_FUNCTION - 911)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 300:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 301:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 302:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 7);
		case 2:
			return precpred(_ctx, 5);
		case 3:
			return precpred(_ctx, 4);
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return precpred(_ctx, 9);
		case 6:
			return precpred(_ctx, 8);
		case 7:
			return precpred(_ctx, 6);
		case 8:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 2);
		case 10:
			return precpred(_ctx, 1);
		case 11:
			return precpred(_ctx, 11);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u03f4\u18a1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\3\2\5\2\u027a"+
		"\n\2\3\2\5\2\u027d\n\2\3\2\3\2\3\3\3\3\5\3\u0283\n\3\3\3\5\3\u0286\n\3"+
		"\3\3\7\3\u0289\n\3\f\3\16\3\u028c\13\3\3\3\3\3\5\3\u0290\n\3\3\3\5\3\u0293"+
		"\n\3\3\3\5\3\u0296\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u029f\n\4\3\5\3"+
		"\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\5\6\u02c6\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u02d2\n\7"+
		"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u02dd\n\b\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u02ee\n\t\3\n\3\n\3\n\5\n"+
		"\u02f3\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u02ff"+
		"\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u031a\n\f\3\r\3\r\3\r\3\r\3\r"+
		"\3\r\3\r\5\r\u0323\n\r\3\16\3\16\3\16\5\16\u0328\n\16\3\16\3\16\7\16\u032c"+
		"\n\16\f\16\16\16\u032f\13\16\3\17\3\17\5\17\u0333\n\17\3\17\3\17\5\17"+
		"\u0337\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0340\n\17\3\17\5"+
		"\17\u0343\n\17\3\17\5\17\u0346\n\17\3\17\3\17\5\17\u034a\n\17\3\17\3\17"+
		"\3\17\3\20\3\20\5\20\u0351\n\20\3\20\5\20\u0354\n\20\3\20\3\20\3\20\5"+
		"\20\u0359\n\20\3\20\3\20\3\20\3\20\7\20\u035f\n\20\f\20\16\20\u0362\13"+
		"\20\3\20\3\20\5\20\u0366\n\20\3\20\3\20\3\20\5\20\u036b\n\20\3\20\7\20"+
		"\u036e\n\20\f\20\16\20\u0371\13\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21"+
		"\3\21\3\21\5\21\u037c\n\21\3\21\5\21\u037f\n\21\3\21\3\21\5\21\u0383\n"+
		"\21\3\21\5\21\u0386\n\21\3\21\3\21\5\21\u038a\n\21\3\21\5\21\u038d\n\21"+
		"\3\21\3\21\5\21\u0391\n\21\3\21\5\21\u0394\n\21\3\21\5\21\u0397\n\21\3"+
		"\21\3\21\5\21\u039b\n\21\3\21\5\21\u039e\n\21\3\21\3\21\5\21\u03a2\n\21"+
		"\3\21\3\21\3\22\3\22\5\22\u03a8\n\22\3\22\3\22\3\22\3\22\5\22\u03ae\n"+
		"\22\3\22\3\22\7\22\u03b2\n\22\f\22\16\22\u03b5\13\22\3\22\3\22\7\22\u03b9"+
		"\n\22\f\22\16\22\u03bc\13\22\3\22\3\22\3\23\3\23\5\23\u03c2\n\23\3\23"+
		"\3\23\3\23\3\23\5\23\u03c8\n\23\3\23\3\23\7\23\u03cc\n\23\f\23\16\23\u03cf"+
		"\13\23\3\23\3\23\3\23\3\23\7\23\u03d5\n\23\f\23\16\23\u03d8\13\23\3\23"+
		"\3\23\5\23\u03dc\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\7\24\u03ea\n\24\f\24\16\24\u03ed\13\24\3\24\3\24\3\25\3\25"+
		"\5\25\u03f3\n\25\3\25\3\25\5\25\u03f7\n\25\3\25\3\25\3\25\3\25\3\25\3"+
		"\25\3\25\3\25\5\25\u0401\n\25\3\25\3\25\5\25\u0405\n\25\3\25\3\25\5\25"+
		"\u0409\n\25\3\25\3\25\5\25\u040d\n\25\3\25\3\25\5\25\u0411\n\25\3\25\7"+
		"\25\u0414\n\25\f\25\16\25\u0417\13\25\5\25\u0419\n\25\3\25\5\25\u041c"+
		"\n\25\3\25\5\25\u041f\n\25\3\25\5\25\u0422\n\25\3\25\3\25\3\25\3\25\5"+
		"\25\u0428\n\25\3\25\3\25\5\25\u042c\n\25\3\25\3\25\3\25\3\25\5\25\u0432"+
		"\n\25\3\25\7\25\u0435\n\25\f\25\16\25\u0438\13\25\5\25\u043a\n\25\3\25"+
		"\5\25\u043d\n\25\5\25\u043f\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3"+
		"\26\3\26\5\26\u044a\n\26\3\26\3\26\5\26\u044e\n\26\3\26\5\26\u0451\n\26"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u045f"+
		"\n\27\3\27\5\27\u0462\n\27\3\27\3\27\5\27\u0466\n\27\3\27\5\27\u0469\n"+
		"\27\3\27\3\27\5\27\u046d\n\27\3\27\5\27\u0470\n\27\3\27\3\27\5\27\u0474"+
		"\n\27\3\27\5\27\u0477\n\27\3\27\3\27\5\27\u047b\n\27\3\27\5\27\u047e\n"+
		"\27\3\27\5\27\u0481\n\27\3\27\3\27\5\27\u0485\n\27\3\27\5\27\u0488\n\27"+
		"\3\27\3\27\5\27\u048c\n\27\3\27\3\27\3\30\3\30\5\30\u0492\n\30\3\30\3"+
		"\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u049f\n\30\3\30"+
		"\3\30\3\31\3\31\3\31\5\31\u04a6\n\31\3\31\3\31\3\31\5\31\u04ab\n\31\3"+
		"\31\5\31\u04ae\n\31\3\31\3\31\3\31\5\31\u04b3\n\31\3\31\3\31\3\31\3\31"+
		"\3\31\3\31\5\31\u04bb\n\31\3\31\3\31\3\31\3\31\5\31\u04c1\n\31\3\31\3"+
		"\31\5\31\u04c5\n\31\3\32\5\32\u04c8\n\32\3\32\3\32\3\32\5\32\u04cd\n\32"+
		"\3\32\5\32\u04d0\n\32\3\32\3\32\5\32\u04d4\n\32\3\32\5\32\u04d7\n\32\3"+
		"\32\3\32\5\32\u04db\n\32\3\32\5\32\u04de\n\32\3\33\3\33\3\33\3\33\3\33"+
		"\3\33\5\33\u04e6\n\33\5\33\u04e8\n\33\3\34\3\34\3\34\7\34\u04ed\n\34\f"+
		"\34\16\34\u04f0\13\34\3\34\3\34\3\34\5\34\u04f5\n\34\3\34\3\34\3\34\3"+
		"\34\7\34\u04fb\n\34\f\34\16\34\u04fe\13\34\5\34\u0500\n\34\3\34\3\34\3"+
		"\34\7\34\u0505\n\34\f\34\16\34\u0508\13\34\5\34\u050a\n\34\5\34\u050c"+
		"\n\34\3\35\3\35\3\35\3\35\5\35\u0512\n\35\3\36\3\36\3\36\3\36\5\36\u0518"+
		"\n\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\5\37\u0529\n\37\3 \3 \3 \3 \3 \5 \u0530\n \3!\3!\3!\3\"\3\""+
		"\5\"\u0537\n\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0542\n\"\3#\5"+
		"#\u0545\n#\3#\3#\3#\3$\3$\3$\3%\3%\3%\3%\3%\5%\u0552\n%\3%\3%\3%\3%\3"+
		"%\3%\3%\3%\3%\3%\3%\5%\u055f\n%\3%\3%\3%\5%\u0564\n%\3&\3&\3&\3&\3&\3"+
		"&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0574\n&\3\'\3\'\3\'\3\'\7\'\u057a\n\'\f"+
		"\'\16\'\u057d\13\'\3\'\3\'\3(\3(\3(\3(\3(\5(\u0586\n(\3)\3)\7)\u058a\n"+
		")\f)\16)\u058d\13)\3*\3*\3*\3*\3*\3*\3*\5*\u0596\n*\3*\5*\u0599\n*\3*"+
		"\3*\3*\5*\u059e\n*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u05ab\n*\3*\3*"+
		"\3*\3*\3*\5*\u05b2\n*\3*\3*\3*\5*\u05b7\n*\3+\3+\5+\u05bb\n+\5+\u05bd"+
		"\n+\3+\3+\3+\5+\u05c2\n+\3+\5+\u05c5\n+\3+\3+\7+\u05c9\n+\f+\16+\u05cc"+
		"\13+\3+\3+\5+\u05d0\n+\5+\u05d2\n+\3+\3+\5+\u05d6\n+\3+\5+\u05d9\n+\3"+
		"+\5+\u05dc\n+\3+\3+\7+\u05e0\n+\f+\16+\u05e3\13+\3+\3+\5+\u05e7\n+\5+"+
		"\u05e9\n+\3+\3+\3+\5+\u05ee\n+\3+\3+\3+\3+\3+\5+\u05f5\n+\5+\u05f7\n+"+
		"\3+\3+\3+\3+\3+\5+\u05fe\n+\3,\3,\3,\5,\u0603\n,\3,\3,\5,\u0607\n,\3,"+
		"\5,\u060a\n,\3-\3-\3-\3-\3-\3-\5-\u0612\n-\3-\3-\3-\3-\3-\3-\5-\u061a"+
		"\n-\5-\u061c\n-\3.\3.\3.\3.\3.\3.\5.\u0624\n.\3/\3/\5/\u0628\n/\3/\5/"+
		"\u062b\n/\3/\3/\7/\u062f\n/\f/\16/\u0632\13/\3/\3/\5/\u0636\n/\3/\5/\u0639"+
		"\n/\3/\3/\7/\u063d\n/\f/\16/\u0640\13/\5/\u0642\n/\3\60\3\60\5\60\u0646"+
		"\n\60\3\60\3\60\3\60\5\60\u064b\n\60\3\60\3\60\3\60\5\60\u0650\n\60\3"+
		"\60\3\60\5\60\u0654\n\60\3\60\3\60\3\60\5\60\u0659\n\60\3\60\5\60\u065c"+
		"\n\60\3\60\3\60\5\60\u0660\n\60\3\60\3\60\5\60\u0664\n\60\3\60\3\60\5"+
		"\60\u0668\n\60\3\60\3\60\5\60\u066c\n\60\3\60\3\60\3\60\5\60\u0671\n\60"+
		"\3\60\3\60\3\60\5\60\u0676\n\60\3\60\3\60\3\60\5\60\u067b\n\60\3\60\3"+
		"\60\3\60\3\60\5\60\u0681\n\60\3\60\3\60\3\60\5\60\u0686\n\60\3\60\3\60"+
		"\3\60\5\60\u068b\n\60\3\60\3\60\3\60\3\60\5\60\u0691\n\60\3\60\3\60\3"+
		"\60\5\60\u0696\n\60\3\60\3\60\3\60\5\60\u069b\n\60\3\60\3\60\3\60\5\60"+
		"\u06a0\n\60\3\60\3\60\3\60\5\60\u06a5\n\60\3\60\3\60\3\60\5\60\u06aa\n"+
		"\60\3\60\3\60\3\60\5\60\u06af\n\60\3\60\3\60\3\60\5\60\u06b4\n\60\3\60"+
		"\3\60\3\60\5\60\u06b9\n\60\3\60\3\60\3\60\5\60\u06be\n\60\3\60\3\60\3"+
		"\60\5\60\u06c3\n\60\3\60\3\60\3\60\3\60\5\60\u06c9\n\60\3\60\3\60\3\60"+
		"\5\60\u06ce\n\60\3\60\3\60\3\60\3\60\5\60\u06d4\n\60\3\61\3\61\3\61\3"+
		"\62\3\62\3\62\3\62\3\62\5\62\u06de\n\62\3\62\3\62\3\62\3\62\3\62\5\62"+
		"\u06e5\n\62\5\62\u06e7\n\62\3\62\3\62\3\62\3\62\7\62\u06ed\n\62\f\62\16"+
		"\62\u06f0\13\62\3\62\3\62\5\62\u06f4\n\62\3\63\5\63\u06f7\n\63\3\63\3"+
		"\63\3\63\3\63\3\63\3\63\5\63\u06ff\n\63\3\63\3\63\3\63\3\63\5\63\u0705"+
		"\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\3\63\5\63\u0715\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\5\63\u0721\n\63\5\63\u0723\n\63\3\64\5\64\u0726\n\64\3\64\3\64\3\64\3"+
		"\64\3\64\3\64\5\64\u072e\n\64\3\64\3\64\3\64\3\64\5\64\u0734\n\64\3\64"+
		"\3\64\3\64\3\64\5\64\u073a\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65"+
		"\3\65\7\65\u0745\n\65\f\65\16\65\u0748\13\65\3\65\3\65\7\65\u074c\n\65"+
		"\f\65\16\65\u074f\13\65\3\65\3\65\3\65\7\65\u0754\n\65\f\65\16\65\u0757"+
		"\13\65\5\65\u0759\n\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u0762\n"+
		"\65\f\65\16\65\u0765\13\65\3\65\3\65\3\65\7\65\u076a\n\65\f\65\16\65\u076d"+
		"\13\65\5\65\u076f\n\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u0779"+
		"\n\65\f\65\16\65\u077c\13\65\3\65\3\65\7\65\u0780\n\65\f\65\16\65\u0783"+
		"\13\65\3\65\3\65\3\65\7\65\u0788\n\65\f\65\16\65\u078b\13\65\5\65\u078d"+
		"\n\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u0797\n\65\f\65\16"+
		"\65\u079a\13\65\3\65\3\65\7\65\u079e\n\65\f\65\16\65\u07a1\13\65\3\65"+
		"\3\65\3\65\7\65\u07a6\n\65\f\65\16\65\u07a9\13\65\5\65\u07ab\n\65\3\65"+
		"\3\65\3\65\7\65\u07b0\n\65\f\65\16\65\u07b3\13\65\3\65\3\65\3\65\7\65"+
		"\u07b8\n\65\f\65\16\65\u07bb\13\65\5\65\u07bd\n\65\5\65\u07bf\n\65\3\66"+
		"\3\66\3\66\5\66\u07c4\n\66\3\67\3\67\3\67\3\67\6\67\u07ca\n\67\r\67\16"+
		"\67\u07cb\3\67\3\67\38\38\38\78\u07d3\n8\f8\168\u07d6\138\39\59\u07d9"+
		"\n9\39\39\59\u07dd\n9\39\39\39\59\u07e2\n9\39\39\39\39\59\u07e8\n9\39"+
		"\39\39\39\59\u07ee\n9\39\39\39\59\u07f3\n9\39\39\39\59\u07f8\n9\39\39"+
		"\39\59\u07fd\n9\39\39\39\59\u0802\n9\39\59\u0805\n9\3:\3:\3:\5:\u080a"+
		"\n:\3:\6:\u080d\n:\r:\16:\u080e\3:\3:\3:\3:\3:\3:\3:\3:\5:\u0819\n:\3"+
		";\3;\5;\u081d\n;\3;\3;\3;\3;\3;\5;\u0824\n;\3;\3;\3;\5;\u0829\n;\3;\5"+
		";\u082c\n;\3;\3;\3;\5;\u0831\n;\3;\5;\u0834\n;\3;\3;\5;\u0838\n;\3;\3"+
		";\5;\u083c\n;\3<\3<\3<\3<\7<\u0842\n<\f<\16<\u0845\13<\3=\3=\3=\3=\3="+
		"\3=\3=\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u0857\n>\3>\5>\u085a\n>\3>\5>\u085d"+
		"\n>\3>\3>\5>\u0861\n>\3>\3>\3?\3?\3?\3?\7?\u0869\n?\f?\16?\u086c\13?\3"+
		"@\3@\3@\3@\3@\3@\3@\3@\7@\u0876\n@\f@\16@\u0879\13@\3@\3@\3A\3A\5A\u087f"+
		"\nA\3A\5A\u0882\nA\3A\3A\3A\3A\3A\7A\u0889\nA\fA\16A\u088c\13A\5A\u088e"+
		"\nA\3A\5A\u0891\nA\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u089c\nB\3B\5B\u089f"+
		"\nB\3B\3B\5B\u08a3\nB\3B\3B\3C\3C\3C\3C\5C\u08ab\nC\3C\5C\u08ae\nC\3C"+
		"\3C\3C\5C\u08b3\nC\3C\3C\3C\3C\3C\3C\5C\u08bb\nC\3C\3C\3C\3C\5C\u08c1"+
		"\nC\3C\3C\5C\u08c5\nC\3D\3D\5D\u08c9\nD\3D\7D\u08cc\nD\fD\16D\u08cf\13"+
		"D\3D\3D\5D\u08d3\nD\3D\3D\3D\3D\3D\5D\u08da\nD\3D\3D\5D\u08de\nD\3D\3"+
		"D\3D\3D\3D\3D\3D\7D\u08e7\nD\fD\16D\u08ea\13D\3D\3D\3D\3D\3D\5D\u08f1"+
		"\nD\3D\5D\u08f4\nD\3D\3D\7D\u08f8\nD\fD\16D\u08fb\13D\3D\3D\3D\5D\u0900"+
		"\nD\5D\u0902\nD\3D\3D\3D\5D\u0907\nD\3D\5D\u090a\nD\3D\3D\7D\u090e\nD"+
		"\fD\16D\u0911\13D\3D\3D\3D\5D\u0916\nD\5D\u0918\nD\3D\3D\5D\u091c\nD\3"+
		"D\5D\u091f\nD\3D\5D\u0922\nD\3D\3D\7D\u0926\nD\fD\16D\u0929\13D\3D\3D"+
		"\3D\5D\u092e\nD\3D\5D\u0931\nD\3D\3D\7D\u0935\nD\fD\16D\u0938\13D\3D\3"+
		"D\3D\5D\u093d\nD\5D\u093f\nD\3D\3D\3D\5D\u0944\nD\3D\3D\3D\3D\3D\3D\5"+
		"D\u094c\nD\5D\u094e\nD\3D\3D\3D\3D\3D\3D\3D\5D\u0957\nD\3D\3D\3D\5D\u095c"+
		"\nD\3D\3D\3D\3D\3D\3D\5D\u0964\nD\3D\3D\5D\u0968\nD\3D\3D\3D\3D\3D\3D"+
		"\5D\u0970\nD\3D\3D\3D\3D\3D\3D\3D\3D\5D\u097a\nD\3D\3D\3D\5D\u097f\nD"+
		"\3D\3D\3D\3D\3D\5D\u0986\nD\3D\3D\5D\u098a\nD\3D\3D\5D\u098e\nD\3D\3D"+
		"\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u09a6"+
		"\nD\3D\3D\5D\u09aa\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u09b6\nD\3D\5D"+
		"\u09b9\nD\3D\3D\3D\3D\3D\3D\3D\5D\u09c2\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D"+
		"\3D\3D\3D\3D\7D\u09d1\nD\fD\16D\u09d4\13D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5"+
		"D\u09df\nD\3D\3D\3D\3D\3D\5D\u09e6\nD\3D\3D\3D\3D\3D\5D\u09ed\nD\3D\3"+
		"D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u09fa\nD\fD\16D\u09fd\13D\3D\3D\3D\3D"+
		"\3D\3D\3D\3D\3D\3D\5D\u0a09\nD\3D\3D\3D\3D\5D\u0a0f\nD\3D\3D\3D\3D\5D"+
		"\u0a15\nD\3D\3D\3D\3D\5D\u0a1b\nD\3D\3D\3D\3D\5D\u0a21\nD\3D\3D\3D\3D"+
		"\5D\u0a27\nD\3D\3D\3D\3D\5D\u0a2d\nD\3E\3E\3E\5E\u0a32\nE\3E\3E\3F\3F"+
		"\3F\5F\u0a39\nF\3F\3F\3G\3G\3G\5G\u0a40\nG\3G\3G\3G\3G\3G\5G\u0a47\nG"+
		"\3G\3G\3G\5G\u0a4c\nG\3G\7G\u0a4f\nG\fG\16G\u0a52\13G\3H\3H\3H\3H\3H\3"+
		"H\3H\3H\3I\3I\3I\5I\u0a5f\nI\3I\3I\3J\3J\3J\5J\u0a66\nJ\3J\3J\3K\3K\3"+
		"K\5K\u0a6d\nK\3K\3K\3L\3L\5L\u0a73\nL\3L\3L\5L\u0a77\nL\3L\3L\5L\u0a7b"+
		"\nL\3M\3M\3M\3M\3M\5M\u0a82\nM\3M\5M\u0a85\nM\3N\3N\3N\5N\u0a8a\nN\3N"+
		"\3N\3O\3O\3O\5O\u0a91\nO\3O\3O\3O\7O\u0a96\nO\fO\16O\u0a99\13O\3O\5O\u0a9c"+
		"\nO\3P\3P\3P\3P\3P\7P\u0aa3\nP\fP\16P\u0aa6\13P\3Q\3Q\3Q\3Q\3R\3R\5R\u0aae"+
		"\nR\3R\3R\3S\3S\3S\3S\3S\5S\u0ab7\nS\3S\5S\u0aba\nS\3T\3T\5T\u0abe\nT"+
		"\3U\3U\3U\3V\3V\3V\3V\5V\u0ac7\nV\3W\3W\5W\u0acb\nW\3W\5W\u0ace\nW\3W"+
		"\5W\u0ad1\nW\3W\3W\3W\3W\5W\u0ad7\nW\3W\5W\u0ada\nW\3W\3W\3W\3W\5W\u0ae0"+
		"\nW\3W\3W\3W\3W\3W\7W\u0ae7\nW\fW\16W\u0aea\13W\5W\u0aec\nW\3W\3W\3W\3"+
		"W\3W\3W\3W\7W\u0af5\nW\fW\16W\u0af8\13W\5W\u0afa\nW\3X\3X\3X\5X\u0aff"+
		"\nX\3X\5X\u0b02\nX\3X\3X\3X\5X\u0b07\nX\3X\3X\3X\3X\3X\3X\3X\3X\5X\u0b11"+
		"\nX\3X\3X\3X\5X\u0b16\nX\3X\3X\6X\u0b1a\nX\rX\16X\u0b1b\5X\u0b1e\nX\3"+
		"X\3X\6X\u0b22\nX\rX\16X\u0b23\5X\u0b26\nX\3X\3X\3X\3X\5X\u0b2c\nX\3X\3"+
		"X\3X\3X\7X\u0b32\nX\fX\16X\u0b35\13X\3X\3X\5X\u0b39\nX\3X\3X\3X\3X\7X"+
		"\u0b3f\nX\fX\16X\u0b42\13X\5X\u0b44\nX\3Y\3Y\3Y\5Y\u0b49\nY\3Y\5Y\u0b4c"+
		"\nY\3Y\3Y\3Y\5Y\u0b51\nY\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0b59\nY\3Y\3Y\3Y\3Y\3Y"+
		"\3Y\5Y\u0b61\nY\3Y\3Y\3Y\3Y\5Y\u0b67\nY\3Y\3Y\3Y\3Y\7Y\u0b6d\nY\fY\16"+
		"Y\u0b70\13Y\3Y\3Y\5Y\u0b74\nY\3Y\3Y\3Y\3Y\7Y\u0b7a\nY\fY\16Y\u0b7d\13"+
		"Y\5Y\u0b7f\nY\3Z\3Z\5Z\u0b83\nZ\3Z\5Z\u0b86\nZ\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0b8e"+
		"\nZ\3Z\3Z\3Z\3Z\5Z\u0b94\nZ\3Z\3Z\3Z\3Z\3Z\7Z\u0b9b\nZ\fZ\16Z\u0b9e\13"+
		"Z\5Z\u0ba0\nZ\3[\3[\5[\u0ba4\n[\3[\3[\5[\u0ba8\n[\3[\3[\6[\u0bac\n[\r"+
		"[\16[\u0bad\3[\3[\5[\u0bb2\n[\3[\3[\5[\u0bb6\n[\5[\u0bb8\n[\3[\5[\u0bbb"+
		"\n[\3[\5[\u0bbe\n[\3[\5[\u0bc1\n[\3[\3[\6[\u0bc5\n[\r[\16[\u0bc6\3[\3"+
		"[\5[\u0bcb\n[\3[\5[\u0bce\n[\3[\5[\u0bd1\n[\3[\5[\u0bd4\n[\3[\5[\u0bd7"+
		"\n[\5[\u0bd9\n[\3\\\3\\\5\\\u0bdd\n\\\3]\3]\3]\3]\5]\u0be3\n]\3]\3]\3"+
		"]\3]\5]\u0be9\n]\3]\7]\u0bec\n]\f]\16]\u0bef\13]\5]\u0bf1\n]\3^\3^\3^"+
		"\3^\5^\u0bf7\n^\3_\3_\5_\u0bfb\n_\3`\3`\3`\3`\3`\3`\5`\u0c03\n`\3a\3a"+
		"\5a\u0c07\na\3a\5a\u0c0a\na\3a\5a\u0c0d\na\3a\3a\3a\3a\3a\3a\3a\5a\u0c16"+
		"\na\3a\3a\5a\u0c1a\na\3a\5a\u0c1d\na\3a\3a\5a\u0c21\na\3b\3b\5b\u0c25"+
		"\nb\3b\5b\u0c28\nb\3b\5b\u0c2b\nb\3b\3b\3b\5b\u0c30\nb\3b\3b\3b\3b\5b"+
		"\u0c36\nb\7b\u0c38\nb\fb\16b\u0c3b\13b\3b\3b\3b\3b\3b\3b\3b\5b\u0c44\n"+
		"b\3b\3b\3b\3b\5b\u0c4a\nb\7b\u0c4c\nb\fb\16b\u0c4f\13b\3b\3b\3b\5b\u0c54"+
		"\nb\3b\3b\5b\u0c58\nb\3c\3c\3c\3c\5c\u0c5e\nc\3c\5c\u0c61\nc\3d\3d\3d"+
		"\3d\3d\3d\3d\3d\3d\3d\5d\u0c6d\nd\3d\3d\5d\u0c71\nd\3d\3d\5d\u0c75\nd"+
		"\3e\3e\3e\3e\3e\3e\5e\u0c7d\ne\3e\3e\5e\u0c81\ne\3f\3f\3f\3f\3g\3g\5g"+
		"\u0c89\ng\3g\5g\u0c8c\ng\3g\3g\5g\u0c90\ng\3g\5g\u0c93\ng\3g\3g\3g\3g"+
		"\7g\u0c99\ng\fg\16g\u0c9c\13g\3g\3g\5g\u0ca0\ng\3g\5g\u0ca3\ng\3g\5g\u0ca6"+
		"\ng\3h\3h\5h\u0caa\nh\3h\5h\u0cad\nh\3h\3h\3h\3h\3h\7h\u0cb4\nh\fh\16"+
		"h\u0cb7\13h\3h\3h\5h\u0cbb\nh\3i\3i\3i\3i\3i\7i\u0cc2\ni\fi\16i\u0cc5"+
		"\13i\3j\3j\5j\u0cc9\nj\3k\3k\3k\7k\u0cce\nk\fk\16k\u0cd1\13k\3l\3l\7l"+
		"\u0cd5\nl\fl\16l\u0cd8\13l\3l\3l\3l\7l\u0cdd\nl\fl\16l\u0ce0\13l\3l\3"+
		"l\5l\u0ce4\nl\3m\3m\3m\3m\3m\3m\5m\u0cec\nm\3m\5m\u0cef\nm\3m\5m\u0cf2"+
		"\nm\3m\3m\3m\7m\u0cf7\nm\fm\16m\u0cfa\13m\5m\u0cfc\nm\3m\3m\3m\3m\3m\5"+
		"m\u0d03\nm\3m\5m\u0d06\nm\3m\3m\3m\3m\3m\3m\5m\u0d0e\nm\3n\3n\3n\3n\5"+
		"n\u0d14\nn\3n\3n\3n\3n\3o\3o\3o\3o\3o\5o\u0d1f\no\3p\5p\u0d22\np\3p\3"+
		"p\3p\3p\3p\3p\3p\3p\3p\5p\u0d2d\np\3p\3p\3p\3p\5p\u0d33\np\3p\3p\5p\u0d37"+
		"\np\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0d42\np\3p\3p\3p\5p\u0d47\np\5p\u0d49"+
		"\np\3p\3p\5p\u0d4d\np\3q\3q\3q\3q\3q\3q\3q\3q\5q\u0d57\nq\3r\3r\3r\3r"+
		"\3r\3r\3r\3r\5r\u0d61\nr\3s\3s\7s\u0d65\ns\fs\16s\u0d68\13s\3s\3s\5s\u0d6c"+
		"\ns\3s\5s\u0d6f\ns\3s\5s\u0d72\ns\3s\5s\u0d75\ns\3s\3s\7s\u0d79\ns\fs"+
		"\16s\u0d7c\13s\3s\3s\5s\u0d80\ns\3s\5s\u0d83\ns\3s\5s\u0d86\ns\3s\5s\u0d89"+
		"\ns\5s\u0d8b\ns\3t\3t\7t\u0d8f\nt\ft\16t\u0d92\13t\3t\3t\5t\u0d96\nt\3"+
		"t\5t\u0d99\nt\3t\5t\u0d9c\nt\3u\3u\5u\u0da0\nu\3u\3u\3v\3v\5v\u0da6\n"+
		"v\3v\3v\5v\u0daa\nv\3w\3w\3w\3w\3w\3w\3w\3w\5w\u0db4\nw\3x\3x\5x\u0db8"+
		"\nx\3x\3x\7x\u0dbc\nx\fx\16x\u0dbf\13x\3y\3y\3y\3y\3y\3y\5y\u0dc7\ny\3"+
		"y\5y\u0dca\ny\3y\3y\5y\u0dce\ny\3y\5y\u0dd1\ny\3y\3y\5y\u0dd5\ny\3y\3"+
		"y\5y\u0dd9\ny\3y\5y\u0ddc\ny\5y\u0dde\ny\3z\3z\3z\3z\7z\u0de4\nz\fz\16"+
		"z\u0de7\13z\3z\3z\3z\3z\3z\3z\3z\3z\3z\5z\u0df2\nz\3z\3z\6z\u0df6\nz\r"+
		"z\16z\u0df7\5z\u0dfa\nz\3z\3z\6z\u0dfe\nz\rz\16z\u0dff\5z\u0e02\nz\5z"+
		"\u0e04\nz\3{\3{\3{\3{\5{\u0e0a\n{\3{\3{\3{\3{\3{\3{\5{\u0e12\n{\3|\3|"+
		"\3|\3|\3|\3|\5|\u0e1a\n|\3}\3}\3}\3}\5}\u0e20\n}\3}\3}\3}\3}\3}\7}\u0e27"+
		"\n}\f}\16}\u0e2a\13}\3}\3}\5}\u0e2e\n}\5}\u0e30\n}\3}\3}\5}\u0e34\n}\3"+
		"~\3~\5~\u0e38\n~\3\177\3\177\3\177\3\177\5\177\u0e3e\n\177\3\177\3\177"+
		"\3\177\3\177\3\177\5\177\u0e45\n\177\3\u0080\3\u0080\5\u0080\u0e49\n\u0080"+
		"\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\7\u0081\u0e50\n\u0081\f\u0081"+
		"\16\u0081\u0e53\13\u0081\5\u0081\u0e55\n\u0081\3\u0082\3\u0082\5\u0082"+
		"\u0e59\n\u0082\3\u0083\3\u0083\5\u0083\u0e5d\n\u0083\3\u0083\3\u0083\5"+
		"\u0083\u0e61\n\u0083\3\u0083\5\u0083\u0e64\n\u0083\3\u0083\5\u0083\u0e67"+
		"\n\u0083\3\u0083\5\u0083\u0e6a\n\u0083\3\u0084\3\u0084\5\u0084\u0e6e\n"+
		"\u0084\3\u0084\3\u0084\5\u0084\u0e72\n\u0084\3\u0084\5\u0084\u0e75\n\u0084"+
		"\3\u0084\5\u0084\u0e78\n\u0084\3\u0084\5\u0084\u0e7b\n\u0084\3\u0085\3"+
		"\u0085\3\u0085\3\u0086\3\u0086\5\u0086\u0e82\n\u0086\3\u0086\3\u0086\5"+
		"\u0086\u0e86\n\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3"+
		"\u0088\3\u0088\3\u0088\3\u0088\3\u0088\7\u0088\u0e93\n\u0088\f\u0088\16"+
		"\u0088\u0e96\13\u0088\3\u0089\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008b\3\u008b\5\u008b\u0ea2\n\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\7\u008b\u0ea8\n\u008b\f\u008b\16\u008b\u0eab\13\u008b"+
		"\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0eb4"+
		"\n\u008c\3\u008d\3\u008d\5\u008d\u0eb8\n\u008d\3\u008d\5\u008d\u0ebb\n"+
		"\u008d\3\u008d\3\u008d\3\u008e\3\u008e\5\u008e\u0ec1\n\u008e\3\u008e\5"+
		"\u008e\u0ec4\n\u008e\3\u008e\5\u008e\u0ec7\n\u008e\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0ed0\n\u008f\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0ed9\n\u0090\3\u0091"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u0ee1\n\u0091\f\u0091"+
		"\16\u0091\u0ee4\13\u0091\3\u0091\5\u0091\u0ee7\n\u0091\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\7\u0092\u0eef\n\u0092\f\u0092\16\u0092"+
		"\u0ef2\13\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\5\u0093\u0efb\n\u0093\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095"+
		"\5\u0095\u0f03\n\u0095\3\u0095\5\u0095\u0f06\n\u0095\3\u0096\3\u0096\3"+
		"\u0096\3\u0096\3\u0096\7\u0096\u0f0d\n\u0096\f\u0096\16\u0096\u0f10\13"+
		"\u0096\5\u0096\u0f12\n\u0096\3\u0096\3\u0096\5\u0096\u0f16\n\u0096\3\u0096"+
		"\7\u0096\u0f19\n\u0096\f\u0096\16\u0096\u0f1c\13\u0096\3\u0096\5\u0096"+
		"\u0f1f\n\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\7\u0097\u0f26\n"+
		"\u0097\f\u0097\16\u0097\u0f29\13\u0097\5\u0097\u0f2b\n\u0097\3\u0098\3"+
		"\u0098\3\u0098\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\7\u009a"+
		"\u0f48\n\u009a\f\u009a\16\u009a\u0f4b\13\u009a\5\u009a\u0f4d\n\u009a\3"+
		"\u009a\5\u009a\u0f50\n\u009a\3\u009b\3\u009b\3\u009c\3\u009c\3\u009d\3"+
		"\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\7\u009f\u0f86\n\u009f\f\u009f\16\u009f\u0f89\13\u009f"+
		"\3\u009f\3\u009f\5\u009f\u0f8d\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0fa9\n\u00a2\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\5\u00a3\u0fb7\n\u00a3\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0fbc\n"+
		"\u00a4\f\u00a4\16\u00a4\u0fbf\13\u00a4\3\u00a4\5\u00a4\u0fc2\n\u00a4\3"+
		"\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0fc8\n\u00a5\3\u00a6\3\u00a6\3"+
		"\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0fd0\n\u00a6\5\u00a6\u0fd2\n\u00a6"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\5\u00a8\u0fdd\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\5\u00aa\u0fe7\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\5\u00ab\u0fee\n\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac"+
		"\u0ff4\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\5\u00ae"+
		"\u0ffc\n\u00ae\3\u00af\3\u00af\3\u00af\5\u00af\u1001\n\u00af\3\u00af\3"+
		"\u00af\3\u00af\3\u00af\7\u00af\u1007\n\u00af\f\u00af\16\u00af\u100a\13"+
		"\u00af\3\u00af\3\u00af\3\u00af\7\u00af\u100f\n\u00af\f\u00af\16\u00af"+
		"\u1012\13\u00af\3\u00af\3\u00af\3\u00af\7\u00af\u1017\n\u00af\f\u00af"+
		"\16\u00af\u101a\13\u00af\3\u00af\3\u00af\3\u00af\7\u00af\u101f\n\u00af"+
		"\f\u00af\16\u00af\u1022\13\u00af\3\u00af\7\u00af\u1025\n\u00af\f\u00af"+
		"\16\u00af\u1028\13\u00af\5\u00af\u102a\n\u00af\3\u00af\3\u00af\5\u00af"+
		"\u102e\n\u00af\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u1033\n\u00b0\3\u00b0\6"+
		"\u00b0\u1036\n\u00b0\r\u00b0\16\u00b0\u1037\3\u00b0\3\u00b0\6\u00b0\u103c"+
		"\n\u00b0\r\u00b0\16\u00b0\u103d\5\u00b0\u1040\n\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\6\u00b1\u1049\n\u00b1\r\u00b1"+
		"\16\u00b1\u104a\3\u00b1\7\u00b1\u104e\n\u00b1\f\u00b1\16\u00b1\u1051\13"+
		"\u00b1\3\u00b1\3\u00b1\6\u00b1\u1055\n\u00b1\r\u00b1\16\u00b1\u1056\5"+
		"\u00b1\u1059\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3"+
		"\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1067\n\u00b4\3"+
		"\u00b4\3\u00b4\6\u00b4\u106b\n\u00b4\r\u00b4\16\u00b4\u106c\3\u00b4\3"+
		"\u00b4\3\u00b4\5\u00b4\u1072\n\u00b4\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u1077"+
		"\n\u00b5\3\u00b5\3\u00b5\6\u00b5\u107b\n\u00b5\r\u00b5\16\u00b5\u107c"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u1084\n\u00b5\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u108c\n\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\6\u00b7\u1092\n\u00b7\r\u00b7\16\u00b7\u1093"+
		"\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u1099\n\u00b7\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\5\u00b8\u109f\n\u00b8\3\u00b8\5\u00b8\u10a2\n\u00b8\3\u00b8\3"+
		"\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u10aa\n\u00b8\3\u00b9\3"+
		"\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u10b1\n\u00b9\3\u00ba\3\u00ba\3"+
		"\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u10ba\n\u00ba\3\u00ba\5"+
		"\u00ba\u10bd\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3"+
		"\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u10cc\n"+
		"\u00bc\f\u00bc\16\u00bc\u10cf\13\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd"+
		"\3\u00bd\5\u00bd\u10d6\n\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\5\u00bd\u10de\n\u00bd\3\u00be\3\u00be\5\u00be\u10e2\n\u00be\3"+
		"\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u10e9\n\u00bf\3\u00bf\3"+
		"\u00bf\6\u00bf\u10ed\n\u00bf\r\u00bf\16\u00bf\u10ee\3\u00c0\3\u00c0\3"+
		"\u00c0\3\u00c0\6\u00c0\u10f5\n\u00c0\r\u00c0\16\u00c0\u10f6\3\u00c1\3"+
		"\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u10fe\n\u00c1\f\u00c1\16\u00c1"+
		"\u1101\13\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u1106\n\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\7\u00c1\u110b\n\u00c1\f\u00c1\16\u00c1\u110e\13\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u1114\n\u00c1\3\u00c1\7\u00c1"+
		"\u1117\n\u00c1\f\u00c1\16\u00c1\u111a\13\u00c1\5\u00c1\u111c\n\u00c1\5"+
		"\u00c1\u111e\n\u00c1\3\u00c1\3\u00c1\6\u00c1\u1122\n\u00c1\r\u00c1\16"+
		"\u00c1\u1123\5\u00c1\u1126\n\u00c1\3\u00c1\3\u00c1\7\u00c1\u112a\n\u00c1"+
		"\f\u00c1\16\u00c1\u112d\13\u00c1\5\u00c1\u112f\n\u00c1\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u1136\n\u00c2\f\u00c2\16\u00c2\u1139"+
		"\13\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u113e\n\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\7\u00c2\u1143\n\u00c2\f\u00c2\16\u00c2\u1146\13\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u114c\n\u00c2\3\u00c2\7\u00c2\u114f\n"+
		"\u00c2\f\u00c2\16\u00c2\u1152\13\u00c2\5\u00c2\u1154\n\u00c2\5\u00c2\u1156"+
		"\n\u00c2\3\u00c2\3\u00c2\6\u00c2\u115a\n\u00c2\r\u00c2\16\u00c2\u115b"+
		"\5\u00c2\u115e\n\u00c2\3\u00c2\3\u00c2\7\u00c2\u1162\n\u00c2\f\u00c2\16"+
		"\u00c2\u1165\13\u00c2\5\u00c2\u1167\n\u00c2\3\u00c3\3\u00c3\3\u00c3\5"+
		"\u00c3\u116c\n\u00c3\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u1171\n\u00c3\f\u00c3"+
		"\16\u00c3\u1174\13\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u117a"+
		"\n\u00c4\f\u00c4\16\u00c4\u117d\13\u00c4\3\u00c4\3\u00c4\5\u00c4\u1181"+
		"\n\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u1188\n\u00c4"+
		"\f\u00c4\16\u00c4\u118b\13\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4"+
		"\u1191\n\u00c4\3\u00c4\7\u00c4\u1194\n\u00c4\f\u00c4\16\u00c4\u1197\13"+
		"\u00c4\5\u00c4\u1199\n\u00c4\5\u00c4\u119b\n\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\7\u00c4\u11a1\n\u00c4\f\u00c4\16\u00c4\u11a4\13\u00c4\5\u00c4"+
		"\u11a6\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\7\u00c5\u11b0\n\u00c5\f\u00c5\16\u00c5\u11b3\13\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\5\u00c5\u11b8\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\7\u00c6\u11bf\n\u00c6\f\u00c6\16\u00c6\u11c2\13\u00c6\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u11c8\n\u00c7\f\u00c7\16\u00c7\u11cb"+
		"\13\u00c7\3\u00c7\3\u00c7\5\u00c7\u11cf\n\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\7\u00c7\u11d6\n\u00c7\f\u00c7\16\u00c7\u11d9\13\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u11de\n\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u11e7\n\u00c7\f\u00c7\16\u00c7"+
		"\u11ea\13\u00c7\5\u00c7\u11ec\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u11f6\n\u00c8\f\u00c8\16\u00c8"+
		"\u11f9\13\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u11ff\n\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1204\n\u00c9\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\5\u00cb\u1213\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u121e\n\u00cb\3\u00cb\5\u00cb"+
		"\u1221\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\5\u00cc\u122b\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1235\n\u00cd\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u123f\n\u00ce\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u1249"+
		"\n\u00d0\3\u00d1\3\u00d1\5\u00d1\u124d\n\u00d1\3\u00d1\3\u00d1\5\u00d1"+
		"\u1251\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\5\u00d1\u125a\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\5\u00d1\u1276\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u1288\n\u00d2\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d4\3\u00d4\5\u00d4\u1290\n\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d5\3\u00d5\3\u00d5\3\u00d5\7\u00d5\u1299\n\u00d5\f\u00d5\16\u00d5"+
		"\u129c\13\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u12a2\n\u00d6"+
		"\3\u00d7\3\u00d7\5\u00d7\u12a6\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d8"+
		"\3\u00d8\5\u00d8\u12ad\n\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u12b2\n"+
		"\u00d8\3\u00d8\5\u00d8\u12b5\n\u00d8\3\u00d8\5\u00d8\u12b8\n\u00d8\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u12c1\n\u00d9"+
		"\3\u00da\3\u00da\5\u00da\u12c5\n\u00da\3\u00da\3\u00da\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\3\u00da\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\7\u00dd\u12e1\n\u00dd\f\u00dd\16\u00dd"+
		"\u12e4\13\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u12ea\n\u00dd"+
		"\3\u00dd\3\u00dd\5\u00dd\u12ee\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\5\u00dd\u12f5\n\u00dd\3\u00dd\5\u00dd\u12f8\n\u00dd\3\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u1302\n"+
		"\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\5\u00de\u130c\n\u00de\3\u00de\3\u00de\5\u00de\u1310\n\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\5\u00de\u1316\n\u00de\3\u00de\5\u00de\u1319\n\u00de"+
		"\3\u00de\3\u00de\3\u00de\5\u00de\u131e\n\u00de\3\u00de\3\u00de\5\u00de"+
		"\u1322\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1329\n"+
		"\u00de\3\u00de\5\u00de\u132c\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5"+
		"\u00de\u1332\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u134a"+
		"\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\5\u00de\u1357\n\u00de\3\u00de\5\u00de\u135a\n"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\5\u00de\u1364\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\5\u00de\u136c\n\u00de\3\u00de\3\u00de\5\u00de\u1370\n\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1377\n\u00de\3\u00de\5\u00de\u137a"+
		"\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\7\u00de\u1381\n\u00de"+
		"\f\u00de\16\u00de\u1384\13\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1389"+
		"\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u138f\n\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1399"+
		"\n\u00de\5\u00de\u139b\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df"+
		"\u13a1\n\u00df\3\u00df\5\u00df\u13a4\n\u00df\3\u00df\5\u00df\u13a7\n\u00df"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\5\u00e0\u13b3\n\u00e0\3\u00e0\5\u00e0\u13b6\n\u00e0\3\u00e1\3"+
		"\u00e1\3\u00e1\3\u00e1\5\u00e1\u13bc\n\u00e1\3\u00e2\5\u00e2\u13bf\n\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u13c7\n\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u13cf\n\u00e2"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u13d5\n\u00e3\3\u00e3\3\u00e3"+
		"\5\u00e3\u13d9\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u13e7\n\u00e4"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6"+
		"\u13f1\n\u00e6\f\u00e6\16\u00e6\u13f4\13\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\5\u00e6\u13fa\n\u00e6\3\u00e6\5\u00e6\u13fd\n\u00e6\3\u00e6\3"+
		"\u00e6\3\u00e6\3\u00e7\3\u00e7\5\u00e7\u1404\n\u00e7\3\u00e7\3\u00e7\3"+
		"\u00e7\7\u00e7\u1409\n\u00e7\f\u00e7\16\u00e7\u140c\13\u00e7\3\u00e8\3"+
		"\u00e8\5\u00e8\u1410\n\u00e8\3\u00e8\6\u00e8\u1413\n\u00e8\r\u00e8\16"+
		"\u00e8\u1414\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\7"+
		"\u00e9\u141e\n\u00e9\f\u00e9\16\u00e9\u1421\13\u00e9\3\u00ea\3\u00ea\3"+
		"\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00ec\3\u00ec\5\u00ec\u142b\n\u00ec\3"+
		"\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u1431\n\u00ec\3\u00ed\3\u00ed\3"+
		"\u00ed\5\u00ed\u1436\n\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3"+
		"\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u1443\n\u00ed\5"+
		"\u00ed\u1445\n\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u144a\n\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\5\u00ed\u144f\n\u00ed\5\u00ed\u1451\n\u00ed\3\u00ee\3"+
		"\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u1458\n\u00ee\3\u00ef\3\u00ef\3"+
		"\u00ef\3\u00ef\3\u00ef\5\u00ef\u145f\n\u00ef\3\u00ef\5\u00ef\u1462\n\u00ef"+
		"\3\u00ef\5\u00ef\u1465\n\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef"+
		"\u146b\n\u00ef\3\u00ef\3\u00ef\5\u00ef\u146f\n\u00ef\3\u00f0\3\u00f0\3"+
		"\u00f0\3\u00f0\5\u00f0\u1475\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5"+
		"\u00f1\u147b\n\u00f1\3\u00f1\3\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3"+
		"\u00f3\3\u00f3\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u1488\n\u00f4\3\u00f4\3"+
		"\u00f4\3\u00f4\5\u00f4\u148d\n\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\7"+
		"\u00f4\u1493\n\u00f4\f\u00f4\16\u00f4\u1496\13\u00f4\5\u00f4\u1498\n\u00f4"+
		"\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u149d\n\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\5\u00f5\u14a2\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\7\u00f5\u14a8\n"+
		"\u00f5\f\u00f5\16\u00f5\u14ab\13\u00f5\5\u00f5\u14ad\n\u00f5\3\u00f6\3"+
		"\u00f6\3\u00f6\3\u00f6\5\u00f6\u14b3\n\u00f6\3\u00f7\3\u00f7\5\u00f7\u14b7"+
		"\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\7\u00f7\u14c2\n\u00f7\f\u00f7\16\u00f7\u14c5\13\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\5\u00f7\u14ca\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\7\u00f7\u14d4\n\u00f7\f\u00f7\16\u00f7"+
		"\u14d7\13\u00f7\5\u00f7\u14d9\n\u00f7\3\u00f8\3\u00f8\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u14e2\n\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\5\u00f9\u14e7\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u14ed\n"+
		"\u00fa\3\u00fb\3\u00fb\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u14f4\n\u00fc\5"+
		"\u00fc\u14f6\n\u00fc\3\u00fd\3\u00fd\5\u00fd\u14fa\n\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\5\u00fd\u1500\n\u00fd\3\u00fd\5\u00fd\u1503\n\u00fd\3"+
		"\u00fe\3\u00fe\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100"+
		"\u150d\n\u0100\3\u0101\3\u0101\5\u0101\u1511\n\u0101\3\u0102\3\u0102\3"+
		"\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\6\u0103\u1523\n\u0103\r\u0103"+
		"\16\u0103\u1524\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u152c"+
		"\n\u0104\5\u0104\u152e\n\u0104\3\u0105\3\u0105\3\u0105\6\u0105\u1533\n"+
		"\u0105\r\u0105\16\u0105\u1534\5\u0105\u1537\n\u0105\3\u0106\3\u0106\5"+
		"\u0106\u153b\n\u0106\3\u0107\3\u0107\3\u0107\5\u0107\u1540\n\u0107\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108"+
		"\u154b\n\u0108\3\u0109\3\u0109\3\u0109\5\u0109\u1550\n\u0109\3\u010a\3"+
		"\u010a\3\u010b\3\u010b\5\u010b\u1556\n\u010b\3\u010c\5\u010c\u1559\n\u010c"+
		"\3\u010c\3\u010c\5\u010c\u155d\n\u010c\3\u010c\6\u010c\u1560\n\u010c\r"+
		"\u010c\16\u010c\u1561\3\u010c\5\u010c\u1565\n\u010c\3\u010c\3\u010c\5"+
		"\u010c\u1569\n\u010c\3\u010c\3\u010c\5\u010c\u156d\n\u010c\5\u010c\u156f"+
		"\n\u010c\3\u010d\3\u010d\3\u010e\5\u010e\u1574\n\u010e\3\u010e\3\u010e"+
		"\3\u010f\5\u010f\u1579\n\u010f\3\u010f\3\u010f\3\u0110\3\u0110\3\u0110"+
		"\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u1586\n\u0110"+
		"\3\u0110\5\u0110\u1589\n\u0110\3\u0111\3\u0111\5\u0111\u158d\n\u0111\3"+
		"\u0111\5\u0111\u1590\n\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u1595\n\u0111"+
		"\3\u0111\5\u0111\u1598\n\u0111\3\u0111\3\u0111\5\u0111\u159c\n\u0111\3"+
		"\u0111\3\u0111\3\u0111\5\u0111\u15a1\n\u0111\3\u0111\5\u0111\u15a4\n\u0111"+
		"\3\u0111\3\u0111\3\u0111\5\u0111\u15a9\n\u0111\3\u0111\5\u0111\u15ac\n"+
		"\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u15b2\n\u0111\3\u0111\5"+
		"\u0111\u15b5\n\u0111\3\u0111\3\u0111\5\u0111\u15b9\n\u0111\3\u0111\5\u0111"+
		"\u15bc\n\u0111\3\u0111\5\u0111\u15bf\n\u0111\3\u0111\3\u0111\5\u0111\u15c3"+
		"\n\u0111\3\u0111\5\u0111\u15c6\n\u0111\3\u0111\5\u0111\u15c9\n\u0111\3"+
		"\u0111\3\u0111\5\u0111\u15cd\n\u0111\3\u0111\5\u0111\u15d0\n\u0111\3\u0111"+
		"\5\u0111\u15d3\n\u0111\3\u0111\5\u0111\u15d6\n\u0111\3\u0111\3\u0111\5"+
		"\u0111\u15da\n\u0111\3\u0111\5\u0111\u15dd\n\u0111\3\u0111\5\u0111\u15e0"+
		"\n\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u15e5\n\u0111\3\u0111\3\u0111"+
		"\3\u0111\5\u0111\u15ea\n\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u15ef\n"+
		"\u0111\3\u0111\5\u0111\u15f2\n\u0111\3\u0111\5\u0111\u15f5\n\u0111\3\u0112"+
		"\3\u0112\3\u0112\3\u0112\7\u0112\u15fb\n\u0112\f\u0112\16\u0112\u15fe"+
		"\13\u0112\3\u0112\3\u0112\3\u0113\3\u0113\5\u0113\u1604\n\u0113\3\u0113"+
		"\3\u0113\5\u0113\u1608\n\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u160d\n"+
		"\u0113\3\u0113\5\u0113\u1610\n\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u1615"+
		"\n\u0113\3\u0113\3\u0113\5\u0113\u1619\n\u0113\5\u0113\u161b\n\u0113\3"+
		"\u0114\3\u0114\3\u0114\3\u0114\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u162b\n\u0116\3\u0116"+
		"\3\u0116\3\u0117\3\u0117\3\u0117\7\u0117\u1632\n\u0117\f\u0117\16\u0117"+
		"\u1635\13\u0117\3\u0118\3\u0118\3\u0118\7\u0118\u163a\n\u0118\f\u0118"+
		"\16\u0118\u163d\13\u0118\3\u0119\3\u0119\3\u0119\3\u0119\7\u0119\u1643"+
		"\n\u0119\f\u0119\16\u0119\u1646\13\u0119\3\u0119\3\u0119\3\u011a\3\u011a"+
		"\3\u011a\7\u011a\u164d\n\u011a\f\u011a\16\u011a\u1650\13\u011a\3\u011b"+
		"\3\u011b\3\u011b\7\u011b\u1655\n\u011b\f\u011b\16\u011b\u1658\13\u011b"+
		"\3\u011c\3\u011c\3\u011c\7\u011c\u165d\n\u011c\f\u011c\16\u011c\u1660"+
		"\13\u011c\3\u011d\3\u011d\3\u011d\7\u011d\u1665\n\u011d\f\u011d\16\u011d"+
		"\u1668\13\u011d\3\u011e\3\u011e\3\u011e\7\u011e\u166d\n\u011e\f\u011e"+
		"\16\u011e\u1670\13\u011e\3\u011f\3\u011f\5\u011f\u1674\n\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u167b\n\u011f\5\u011f\u167d\n"+
		"\u011f\3\u0120\3\u0120\3\u0120\5\u0120\u1682\n\u0120\3\u0120\5\u0120\u1685"+
		"\n\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u168a\n\u0120\3\u0120\5\u0120"+
		"\u168d\n\u0120\3\u0121\3\u0121\5\u0121\u1691\n\u0121\3\u0122\3\u0122\3"+
		"\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\5\u0124\u169f\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\5\u0124\u16a6\n\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u16ab\n\u0124\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\6\u0125\u16cb\n\u0125\r\u0125\16\u0125\u16cc"+
		"\3\u0125\3\u0125\5\u0125\u16d1\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\6\u0125\u16d7\n\u0125\r\u0125\16\u0125\u16d8\3\u0125\3\u0125\5\u0125"+
		"\u16dd\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\5\u0125\u16e6\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\5\u0125\u16ee\n\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u16f3\n\u0125\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u16fb\n\u0125\3"+
		"\u0125\3\u0125\3\u0125\5\u0125\u1700\n\u0125\3\u0125\3\u0125\3\u0125\5"+
		"\u0125\u1705\n\u0125\5\u0125\u1707\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\5\u0125\u1710\n\u0125\3\u0125\3\u0125\3\u0125"+
		"\5\u0125\u1715\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\5\u0125\u171d\n\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1722\n\u0125\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u172a\n\u0125\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1732\n\u0125\3"+
		"\u0125\5\u0125\u1735\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\5\u0125\u173f\n\u0125\3\u0125\3\u0125\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u174a\n\u0125\3"+
		"\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\7\u0127\u1755\n\u0127\f\u0127\16\u0127\u1758\13\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\5\u0127\u175f\n\u0127\3\u0128\3\u0128\5\u0128"+
		"\u1763\n\u0128\3\u0129\3\u0129\3\u0129\5\u0129\u1768\n\u0129\3\u0129\3"+
		"\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1771\n\u0129\3"+
		"\u0129\5\u0129\u1774\n\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3"+
		"\u0129\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1780\n\u0129\3\u0129\3"+
		"\u0129\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1788\n\u0129\3\u0129\3"+
		"\u0129\3\u0129\3\u0129\3\u0129\3\u0129\7\u0129\u1790\n\u0129\f\u0129\16"+
		"\u0129\u1793\13\u0129\5\u0129\u1795\n\u0129\3\u0129\3\u0129\5\u0129\u1799"+
		"\n\u0129\3\u0129\3\u0129\5\u0129\u179d\n\u0129\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\5\u012a\u17b6\n\u012a\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u17c1\n\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u17c8\n\u012c\7\u012c\u17ca\n"+
		"\u012c\f\u012c\16\u012c\u17cd\13\u012c\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\5\u012d\u17d3\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\5\u012e\u17db\n\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u17e0\n\u012e\3"+
		"\u012e\3\u012e\3\u012e\3\u012e\7\u012e\u17e6\n\u012e\f\u012e\16\u012e"+
		"\u17e9\13\u012e\3\u012f\3\u012f\3\u012f\5\u012f\u17ee\n\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u17f8"+
		"\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\5\u012f\u1805\n\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\5\u012f\u180b\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f"+
		"\u1811\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1821"+
		"\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1827\n\u012f\7\u012f"+
		"\u1829\n\u012f\f\u012f\16\u012f\u182c\13\u012f\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\7\u0130\u183c\n\u0130\f\u0130\16\u0130\u183f\13\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\6\u0130\u1848"+
		"\n\u0130\r\u0130\16\u0130\u1849\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\5\u0130\u185b\n\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\7\u0130\u1868\n\u0130"+
		"\f\u0130\16\u0130\u186b\13\u0130\3\u0131\3\u0131\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\5\u0132\u187d\n\u0132\3\u0133\3\u0133\3\u0133\3\u0133"+
		"\3\u0133\3\u0133\3\u0133\5\u0133\u1886\n\u0133\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u188f\n\u0134\3\u0135\3\u0135"+
		"\3\u0136\3\u0136\3\u0137\3\u0137\3\u0138\3\u0138\3\u0139\3\u0139\3\u013a"+
		"\3\u013a\3\u013b\3\u013b\3\u013c\3\u013c\3\u013c\2\5\u025a\u025c\u025e"+
		"\u013d\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<"+
		">@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a"+
		"\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2"+
		"\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba"+
		"\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2"+
		"\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea"+
		"\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102"+
		"\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a"+
		"\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132"+
		"\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a"+
		"\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162"+
		"\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a"+
		"\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192"+
		"\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa"+
		"\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2"+
		"\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da"+
		"\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2"+
		"\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a"+
		"\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222"+
		"\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a"+
		"\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252"+
		"\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a"+
		"\u026c\u026e\u0270\u0272\u0274\u0276\2\177\4\2%%\u0089\u0089\4\2\u01ba"+
		"\u01ba\u01bf\u01bf\5\2@@\u0090\u0090\u00a5\u00a5\5\2((\u0137\u0137\u0176"+
		"\u0176\6\2((\u0157\u0157\u01b9\u01b9\u01fe\u01fe\4\2\u01b0\u01b0\u03e7"+
		"\u03e7\4\2HH\u0081\u0081\4\2\17\17\u0107\u0107\5\2**NN\u00a8\u00a8\4\2"+
		"\u0164\u0164\u01d1\u01d1\5\2\u01a8\u01a8\u0224\u0224\u022a\u022a\4\2\u013e"+
		"\u013e\u017b\u017b\4\2\u0119\u0119\u0189\u0189\4\2\u0117\u0117\u016d\u016d"+
		"\5\2IIMMrr\5\2((\u0148\u0148\u0162\u0162\5\2((\u0144\u0144\u0286\u0286"+
		"\4\2\u0218\u0218\u0238\u0238\4\2JJTT\5\2\u0166\u0166\u01c8\u01c8\u0200"+
		"\u0200\4\2@@\u0090\u0090\3\2\u011d\u011e\3\2\u03dd\u03de\4\2\u03e7\u03e7"+
		"\u03ef\u03ef\5\2\u0161\u0161\u0184\u0184\u01b7\u01b7\4\2((\u03dd\u03de"+
		"\b\2((\u012a\u012a\u012c\u012c\u0148\u0148\u0162\u0162\u01de\u01de\3\2"+
		"\u03de\u03df\4\2\7\7\61\61\4\2\r\r\u009f\u009f\4\2\u00b0\u00b0\u023c\u023c"+
		"\4\2\24\24\u0084\u0084\5\2))FFaa\4\2aa\u012e\u012e\4\2\u0125\u0125\u015e"+
		"\u015e\4\2]]\u01f6\u01f6\4\2))aa\4\2\b\b//\4\2\u00ac\u00ac\u0235\u0235"+
		"\6\2\u0161\u0161\u0184\u0184\u01b6\u01b6\u01d4\u01d4\4\2\u0161\u0161\u01b6"+
		"\u01b6\4\2\16\16++\5\2==HH\u00aa\u00aa\4\2!!LL\4\2YY\u0087\u0087\4\2\b"+
		"\b/\60\3\2\u020d\u020e\4\2\u0169\u0169\u01fc\u01fc\4\2\u00ca\u00ca\u018c"+
		"\u018c\7\2bb\u0191\u0192\u0194\u0194\u0198\u01a0\u01e0\u01e0\6\2\u018e"+
		"\u018f\u0193\u0193\u0195\u0196\u01e1\u01e1\5\2cc\u018d\u018d\u0197\u0197"+
		"\4\2\u017d\u017d\u020f\u020f\4\2\u0209\u0209\u020b\u020b\4\2\u0111\u0111"+
		"\u0210\u0210\4\2SS\u01ef\u01ef\4\2\61\61\u013c\u013c\5\2\36\3688\u00a3"+
		"\u00a3\5\2ww\u009c\u009c\u0167\u0167\4\2__\u00a6\u00a6\4\2\u0121\u0121"+
		"\u0201\u0201\4\2&&\u0237\u0237\4\2ii\u0189\u0189\4\2\u015a\u015a\u01da"+
		"\u01da\6\2\u00b8\u00b8\u00ba\u00ba\u00be\u00be\u0219\u0219\4\2\u03be\u03be"+
		"\u03cf\u03cf\4\2\u0112\u0112\u01e2\u01e2\4\2??II\b\2ww\u009c\u009c\u00a1"+
		"\u00a1\u0153\u0153\u0167\u0167\u0237\u0237\4\2\u01af\u01af\u0215\u0215"+
		"\4\2\u0150\u0150\u023b\u023b\4\2ww\u0167\u0167\5\2JJUU\u0174\u0174\5\2"+
		"\u0169\u0169\u0189\u0189\u01fc\u01fc\4\2\u0215\u0215\u0236\u0236\4\2\u012f"+
		"\u012f\u01d9\u01d9\b\2\u00ca\u00ca\u014d\u014d\u014f\u014f\u0168\u0168"+
		"\u01df\u01df\u0202\u0202\4\2+,99\5\2\u015a\u015a\u01ca\u01ca\u02e2\u02e2"+
		"\4\2\u0181\u0181\u0226\u0226\f\2\u0120\u0120\u0127\u0127\u0131\u0133\u0139"+
		"\u0139\u01a9\u01a9\u01b1\u01b1\u021a\u021a\u0221\u0221\u02b2\u02b2\u0358"+
		"\u0358\4\2\"\"\u0099\u0099\4\2kk\u0350\u0350\r\2\u0120\u0120\u0127\u0127"+
		"\u0131\u0133\u0139\u0139\u01a9\u01a9\u01b1\u01b1\u01f0\u01f0\u021a\u021a"+
		"\u0221\u0221\u02b2\u02b2\u0358\u0358\5\2\u03e7\u03e7\u03ef\u03ef\u03f1"+
		"\u03f1\3\2\u03f2\u03f3\5\2\u0281\u028c\u03e7\u03e7\u03ef\u03f0\4\2\u03dd"+
		"\u03df\u03e8\u03e8\4\2::\u00a2\u00a2\4\2jj\u03eb\u03eb\5\2\u00c6\u00c8"+
		"\u00d0\u00d3\u01b4\u01b4\4\2\30\30\u00c7\u00c7\4\2\30\30\u00c6\u00c6\3"+
		"\2\u00b4\u00b9\4\2\u00a7\u00a7\u01ff\u01ff\4\2\u00bd\u00c0\u0162\u0162"+
		"\6\2\u00c1\u00c1\u00cc\u00cf\u00d6\u00d6\u0115\u0116\5\2\u00c2\u00c5\u00ca"+
		"\u00cb\u0113\u0113\4\2\u008c\u008c\u00d4\u00d4\4\2\u0181\u0181\u0291\u0299"+
		"\4\2\u00ca\u00ca\u01b4\u01b4\5\2\u00c1\u00c2\u00c4\u00c4\u0181\u0181\4"+
		"\2\u00f4\u00f5\u00fb\u00fb\4\2##\u00f2\u00f5\3\2\u00fe\u00ff\5\2\21\21"+
		"WW\u00a0\u00a0\4\2\u00c6\u00c6\u00ca\u00ca\4\2\u00c1\u00c2\u00c4\u00c4"+
		"\5\2\16\16++\u034e\u034e\5\2\u00e2\u00e2\u00e8\u00e9\u00ee\u00ee\5\2\u00e3"+
		"\u00e5\u00ea\u00ed\u00ef\u00f1\4\2\u01bd\u01bd\u01cb\u01cb\4\2hh\u03d2"+
		"\u03d2\5\2::\u00a2\u00a2\u022e\u022e\4\2}}\u0088\u0088\5\2\b\b\u010a\u010a"+
		"\u0205\u0205\6\2hh\u03ca\u03ca\u03cc\u03cc\u03d2\u03d3\3\2\u03c7\u03ce"+
		"\3\2\u0259\u0280\3\2\u028d\u0290\3\2\u024f\u0257\3\2\u0247\u024e\5\2\u00c1"+
		"\u00c5\u00d1\u00d1\u00d4\u00d4\17\2\"\"..kk\u0099\u0099\u00d6\u00d6\u0105"+
		"\u0179\u017b\u0217\u0219\u0237\u023a\u0241\u0246\u0246\u0286\u0286\u02b2"+
		"\u02b2\u0358\u0358\21\2%%YY\u0087\u0087\u00c1\u00c3\u00c5\u00c5\u00e6"+
		"\u00e6\u00fd\u00fd\u017a\u017a\u0239\u0239\u0247\u024e\u0258\u0258\u0291"+
		"\u0291\u0294\u02b1\u02b3\u0357\u0359\u03bd\2\u1cdd\2\u0279\3\2\2\2\4\u028a"+
		"\3\2\2\2\6\u029e\3\2\2\2\b\u02a0\3\2\2\2\n\u02c5\3\2\2\2\f\u02d1\3\2\2"+
		"\2\16\u02dc\3\2\2\2\20\u02ed\3\2\2\2\22\u02f2\3\2\2\2\24\u02fe\3\2\2\2"+
		"\26\u0319\3\2\2\2\30\u0322\3\2\2\2\32\u0324\3\2\2\2\34\u0330\3\2\2\2\36"+
		"\u034e\3\2\2\2 \u0372\3\2\2\2\"\u03a5\3\2\2\2$\u03bf\3\2\2\2&\u03dd\3"+
		"\2\2\2(\u043e\3\2\2\2*\u0440\3\2\2\2,\u0452\3\2\2\2.\u048f\3\2\2\2\60"+
		"\u04a2\3\2\2\2\62\u04dd\3\2\2\2\64\u04df\3\2\2\2\66\u050b\3\2\2\28\u0511"+
		"\3\2\2\2:\u0513\3\2\2\2<\u0528\3\2\2\2>\u052f\3\2\2\2@\u0531\3\2\2\2B"+
		"\u0541\3\2\2\2D\u0544\3\2\2\2F\u0549\3\2\2\2H\u0563\3\2\2\2J\u0573\3\2"+
		"\2\2L\u0575\3\2\2\2N\u0585\3\2\2\2P\u0587\3\2\2\2R\u05b6\3\2\2\2T\u05fd"+
		"\3\2\2\2V\u05ff\3\2\2\2X\u061b\3\2\2\2Z\u0623\3\2\2\2\\\u0641\3\2\2\2"+
		"^\u06d3\3\2\2\2`\u06d5\3\2\2\2b\u06d8\3\2\2\2d\u0722\3\2\2\2f\u0739\3"+
		"\2\2\2h\u07be\3\2\2\2j\u07c3\3\2\2\2l\u07c5\3\2\2\2n\u07cf\3\2\2\2p\u0804"+
		"\3\2\2\2r\u0818\3\2\2\2t\u081a\3\2\2\2v\u083d\3\2\2\2x\u0846\3\2\2\2z"+
		"\u084d\3\2\2\2|\u0864\3\2\2\2~\u086d\3\2\2\2\u0080\u087c\3\2\2\2\u0082"+
		"\u0892\3\2\2\2\u0084\u08a6\3\2\2\2\u0086\u0a2c\3\2\2\2\u0088\u0a2e\3\2"+
		"\2\2\u008a\u0a35\3\2\2\2\u008c\u0a3c\3\2\2\2\u008e\u0a53\3\2\2\2\u0090"+
		"\u0a5b\3\2\2\2\u0092\u0a62\3\2\2\2\u0094\u0a69\3\2\2\2\u0096\u0a70\3\2"+
		"\2\2\u0098\u0a7c\3\2\2\2\u009a\u0a86\3\2\2\2\u009c\u0a8d\3\2\2\2\u009e"+
		"\u0a9d\3\2\2\2\u00a0\u0aa7\3\2\2\2\u00a2\u0aab\3\2\2\2\u00a4\u0ab1\3\2"+
		"\2\2\u00a6\u0abd\3\2\2\2\u00a8\u0abf\3\2\2\2\u00aa\u0ac6\3\2\2\2\u00ac"+
		"\u0ac8\3\2\2\2\u00ae\u0afb\3\2\2\2\u00b0\u0b45\3\2\2\2\u00b2\u0b80\3\2"+
		"\2\2\u00b4\u0bd8\3\2\2\2\u00b6\u0bdc\3\2\2\2\u00b8\u0bf0\3\2\2\2\u00ba"+
		"\u0bf2\3\2\2\2\u00bc\u0bfa\3\2\2\2\u00be\u0c02\3\2\2\2\u00c0\u0c04\3\2"+
		"\2\2\u00c2\u0c22\3\2\2\2\u00c4\u0c59\3\2\2\2\u00c6\u0c62\3\2\2\2\u00c8"+
		"\u0c76\3\2\2\2\u00ca\u0c82\3\2\2\2\u00cc\u0c86\3\2\2\2\u00ce\u0ca7\3\2"+
		"\2\2\u00d0\u0cbc\3\2\2\2\u00d2\u0cc6\3\2\2\2\u00d4\u0cca\3\2\2\2\u00d6"+
		"\u0ce3\3\2\2\2\u00d8\u0d0d\3\2\2\2\u00da\u0d0f\3\2\2\2\u00dc\u0d1e\3\2"+
		"\2\2\u00de\u0d4c\3\2\2\2\u00e0\u0d56\3\2\2\2\u00e2\u0d60\3\2\2\2\u00e4"+
		"\u0d8a\3\2\2\2\u00e6\u0d8c\3\2\2\2\u00e8\u0d9d\3\2\2\2\u00ea\u0da3\3\2"+
		"\2\2\u00ec\u0db3\3\2\2\2\u00ee\u0db7\3\2\2\2\u00f0\u0ddd\3\2\2\2\u00f2"+
		"\u0e03\3\2\2\2\u00f4\u0e11\3\2\2\2\u00f6\u0e19\3\2\2\2\u00f8\u0e1b\3\2"+
		"\2\2\u00fa\u0e35\3\2\2\2\u00fc\u0e39\3\2\2\2\u00fe\u0e48\3\2\2\2\u0100"+
		"\u0e4a\3\2\2\2\u0102\u0e56\3\2\2\2\u0104\u0e5a\3\2\2\2\u0106\u0e6b\3\2"+
		"\2\2\u0108\u0e7c\3\2\2\2\u010a\u0e7f\3\2\2\2\u010c\u0e89\3\2\2\2\u010e"+
		"\u0e8d\3\2\2\2\u0110\u0e97\3\2\2\2\u0112\u0e9a\3\2\2\2\u0114\u0e9f\3\2"+
		"\2\2\u0116\u0eb3\3\2\2\2\u0118\u0eb5\3\2\2\2\u011a\u0ec6\3\2\2\2\u011c"+
		"\u0ecf\3\2\2\2\u011e\u0ed8\3\2\2\2\u0120\u0eda\3\2\2\2\u0122\u0ee8\3\2"+
		"\2\2\u0124\u0ef3\3\2\2\2\u0126\u0efc\3\2\2\2\u0128\u0eff\3\2\2\2\u012a"+
		"\u0f07\3\2\2\2\u012c\u0f20\3\2\2\2\u012e\u0f2c\3\2\2\2\u0130\u0f2f\3\2"+
		"\2\2\u0132\u0f4f\3\2\2\2\u0134\u0f51\3\2\2\2\u0136\u0f53\3\2\2\2\u0138"+
		"\u0f55\3\2\2\2\u013a\u0f57\3\2\2\2\u013c\u0f8c\3\2\2\2\u013e\u0f8e\3\2"+
		"\2\2\u0140\u0f94\3\2\2\2\u0142\u0fa8\3\2\2\2\u0144\u0fb6\3\2\2\2\u0146"+
		"\u0fc1\3\2\2\2\u0148\u0fc3\3\2\2\2\u014a\u0fc9\3\2\2\2\u014c\u0fd3\3\2"+
		"\2\2\u014e\u0fd7\3\2\2\2\u0150\u0fde\3\2\2\2\u0152\u0fe2\3\2\2\2\u0154"+
		"\u0fe8\3\2\2\2\u0156\u0fef\3\2\2\2\u0158\u0ff5\3\2\2\2\u015a\u0ffb\3\2"+
		"\2\2\u015c\u1000\3\2\2\2\u015e\u102f\3\2\2\2\u0160\u1044\3\2\2\2\u0162"+
		"\u105d\3\2\2\2\u0164\u1060\3\2\2\2\u0166\u1066\3\2\2\2\u0168\u1076\3\2"+
		"\2\2\u016a\u1085\3\2\2\2\u016c\u108b\3\2\2\2\u016e\u10a9\3\2\2\2\u0170"+
		"\u10ab\3\2\2\2\u0172\u10b2\3\2\2\2\u0174\u10be\3\2\2\2\u0176\u10c4\3\2"+
		"\2\2\u0178\u10dd\3\2\2\2\u017a\u10e1\3\2\2\2\u017c\u10e5\3\2\2\2\u017e"+
		"\u10f0\3\2\2\2\u0180\u112e\3\2\2\2\u0182\u1166\3\2\2\2\u0184\u1168\3\2"+
		"\2\2\u0186\u1175\3\2\2\2\u0188\u11a7\3\2\2\2\u018a\u11b9\3\2\2\2\u018c"+
		"\u11eb\3\2\2\2\u018e\u11ed\3\2\2\2\u0190\u11fa\3\2\2\2\u0192\u1205\3\2"+
		"\2\2\u0194\u1220\3\2\2\2\u0196\u122a\3\2\2\2\u0198\u1234\3\2\2\2\u019a"+
		"\u1236\3\2\2\2\u019c\u1240\3\2\2\2\u019e\u1243\3\2\2\2\u01a0\u1275\3\2"+
		"\2\2\u01a2\u1287\3\2\2\2\u01a4\u1289\3\2\2\2\u01a6\u128d\3\2\2\2\u01a8"+
		"\u1294\3\2\2\2\u01aa\u129d\3\2\2\2\u01ac\u12a3\3\2\2\2\u01ae\u12aa\3\2"+
		"\2\2\u01b0\u12c0\3\2\2\2\u01b2\u12c2\3\2\2\2\u01b4\u12cd\3\2\2\2\u01b6"+
		"\u12d3\3\2\2\2\u01b8\u1301\3\2\2\2\u01ba\u139a\3\2\2\2\u01bc\u13a6\3\2"+
		"\2\2\u01be\u13b5\3\2\2\2\u01c0\u13bb\3\2\2\2\u01c2\u13ce\3\2\2\2\u01c4"+
		"\u13d8\3\2\2\2\u01c6\u13e6\3\2\2\2\u01c8\u13e8\3\2\2\2\u01ca\u13eb\3\2"+
		"\2\2\u01cc\u1401\3\2\2\2\u01ce\u140d\3\2\2\2\u01d0\u1416\3\2\2\2\u01d2"+
		"\u1422\3\2\2\2\u01d4\u1426\3\2\2\2\u01d6\u1428\3\2\2\2\u01d8\u1450\3\2"+
		"\2\2\u01da\u1457\3\2\2\2\u01dc\u1459\3\2\2\2\u01de\u1470\3\2\2\2\u01e0"+
		"\u1476\3\2\2\2\u01e2\u147e\3\2\2\2\u01e4\u1481\3\2\2\2\u01e6\u1484\3\2"+
		"\2\2\u01e8\u1499\3\2\2\2\u01ea\u14ae\3\2\2\2\u01ec\u14b4\3\2\2\2\u01ee"+
		"\u14da\3\2\2\2\u01f0\u14e6\3\2\2\2\u01f2\u14e8\3\2\2\2\u01f4\u14ee\3\2"+
		"\2\2\u01f6\u14f0\3\2\2\2\u01f8\u14f9\3\2\2\2\u01fa\u1504\3\2\2\2\u01fc"+
		"\u1506\3\2\2\2\u01fe\u150c\3\2\2\2\u0200\u1510\3\2\2\2\u0202\u1512\3\2"+
		"\2\2\u0204\u1514\3\2\2\2\u0206\u1526\3\2\2\2\u0208\u1536\3\2\2\2\u020a"+
		"\u153a\3\2\2\2\u020c\u153f\3\2\2\2\u020e\u154a\3\2\2\2\u0210\u154f\3\2"+
		"\2\2\u0212\u1551\3\2\2\2\u0214\u1555\3\2\2\2\u0216\u156e\3\2\2\2\u0218"+
		"\u1570\3\2\2\2\u021a\u1573\3\2\2\2\u021c\u1578\3\2\2\2\u021e\u1588\3\2"+
		"\2\2\u0220\u15f4\3\2\2\2\u0222\u15f6\3\2\2\2\u0224\u161a\3\2\2\2\u0226"+
		"\u161c\3\2\2\2\u0228\u1620\3\2\2\2\u022a\u1626\3\2\2\2\u022c\u162e\3\2"+
		"\2\2\u022e\u1636\3\2\2\2\u0230\u163e\3\2\2\2\u0232\u1649\3\2\2\2\u0234"+
		"\u1651\3\2\2\2\u0236\u1659\3\2\2\2\u0238\u1661\3\2\2\2\u023a\u1669\3\2"+
		"\2\2\u023c\u167c\3\2\2\2\u023e\u168c\3\2\2\2\u0240\u1690\3\2\2\2\u0242"+
		"\u1692\3\2\2\2\u0244\u1695\3\2\2\2\u0246\u16aa\3\2\2\2\u0248\u1749\3\2"+
		"\2\2\u024a\u174b\3\2\2\2\u024c\u175e\3\2\2\2\u024e\u1760\3\2\2\2\u0250"+
		"\u179c\3\2\2\2\u0252\u17b5\3\2\2\2\u0254\u17b7\3\2\2\2\u0256\u17c0\3\2"+
		"\2\2\u0258\u17d2\3\2\2\2\u025a\u17df\3\2\2\2\u025c\u17ea\3\2\2\2\u025e"+
		"\u185a\3\2\2\2\u0260\u186c\3\2\2\2\u0262\u187c\3\2\2\2\u0264\u1885\3\2"+
		"\2\2\u0266\u188e\3\2\2\2\u0268\u1890\3\2\2\2\u026a\u1892\3\2\2\2\u026c"+
		"\u1894\3\2\2\2\u026e\u1896\3\2\2\2\u0270\u1898\3\2\2\2\u0272\u189a\3\2"+
		"\2\2\u0274\u189c\3\2\2\2\u0276\u189e\3\2\2\2\u0278\u027a\5\4\3\2\u0279"+
		"\u0278\3\2\2\2\u0279\u027a\3\2\2\2\u027a\u027c\3\2\2\2\u027b\u027d\7\u03cb"+
		"\2\2\u027c\u027b\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u027e\3\2\2\2\u027e"+
		"\u027f\7\2\2\3\u027f\3\3\2\2\2\u0280\u0282\5\6\4\2\u0281\u0283\7\u03cb"+
		"\2\2\u0282\u0281\3\2\2\2\u0282\u0283\3\2\2\2\u0283\u0285\3\2\2\2\u0284"+
		"\u0286\7\u03db\2\2\u0285\u0284\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u0289"+
		"\3\2\2\2\u0287\u0289\5\b\5\2\u0288\u0280\3\2\2\2\u0288\u0287\3\2\2\2\u0289"+
		"\u028c\3\2\2\2\u028a\u0288\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u0295\3\2"+
		"\2\2\u028c\u028a\3\2\2\2\u028d\u0292\5\6\4\2\u028e\u0290\7\u03cb\2\2\u028f"+
		"\u028e\3\2\2\2\u028f\u0290\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0293\7\u03db"+
		"\2\2\u0292\u028f\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0296\3\2\2\2\u0294"+
		"\u0296\5\b\5\2\u0295\u028d\3\2\2\2\u0295\u0294\3\2\2\2\u0296\5\3\2\2\2"+
		"\u0297\u029f\5\n\6\2\u0298\u029f\5\f\7\2\u0299\u029f\5\16\b\2\u029a\u029f"+
		"\5\20\t\2\u029b\u029f\5\22\n\2\u029c\u029f\5\26\f\2\u029d\u029f\5\30\r"+
		"\2\u029e\u0297\3\2\2\2\u029e\u0298\3\2\2\2\u029e\u0299\3\2\2\2\u029e\u029a"+
		"\3\2\2\2\u029e\u029b\3\2\2\2\u029e\u029c\3\2\2\2\u029e\u029d\3\2\2\2\u029f"+
		"\7\3\2\2\2\u02a0\u02a1\7\u03db\2\2\u02a1\t\3\2\2\2\u02a2\u02c6\5\32\16"+
		"\2\u02a3\u02c6\5\34\17\2\u02a4\u02c6\5\36\20\2\u02a5\u02c6\5 \21\2\u02a6"+
		"\u02c6\5\"\22\2\u02a7\u02c6\5$\23\2\u02a8\u02c6\5&\24\2\u02a9\u02c6\5"+
		"(\25\2\u02aa\u02c6\5*\26\2\u02ab\u02c6\5,\27\2\u02ac\u02c6\5.\30\2\u02ad"+
		"\u02c6\5\60\31\2\u02ae\u02c6\5r:\2\u02af\u02c6\5t;\2\u02b0\u02c6\5v<\2"+
		"\u02b1\u02c6\5x=\2\u02b2\u02c6\5z>\2\u02b3\u02c6\5|?\2\u02b4\u02c6\5~"+
		"@\2\u02b5\u02c6\5\u0080A\2\u02b6\u02c6\5\u0082B\2\u02b7\u02c6\5\u0084"+
		"C\2\u02b8\u02c6\5\u0088E\2\u02b9\u02c6\5\u008aF\2\u02ba\u02c6\5\u008c"+
		"G\2\u02bb\u02c6\5\u008eH\2\u02bc\u02c6\5\u0090I\2\u02bd\u02c6\5\u0092"+
		"J\2\u02be\u02c6\5\u0094K\2\u02bf\u02c6\5\u0096L\2\u02c0\u02c6\5\u0098"+
		"M\2\u02c1\u02c6\5\u009aN\2\u02c2\u02c6\5\u009cO\2\u02c3\u02c6\5\u009e"+
		"P\2\u02c4\u02c6\5\u00a2R\2\u02c5\u02a2\3\2\2\2\u02c5\u02a3\3\2\2\2\u02c5"+
		"\u02a4\3\2\2\2\u02c5\u02a5\3\2\2\2\u02c5\u02a6\3\2\2\2\u02c5\u02a7\3\2"+
		"\2\2\u02c5\u02a8\3\2\2\2\u02c5\u02a9\3\2\2\2\u02c5\u02aa\3\2\2\2\u02c5"+
		"\u02ab\3\2\2\2\u02c5\u02ac\3\2\2\2\u02c5\u02ad\3\2\2\2\u02c5\u02ae\3\2"+
		"\2\2\u02c5\u02af\3\2\2\2\u02c5\u02b0\3\2\2\2\u02c5\u02b1\3\2\2\2\u02c5"+
		"\u02b2\3\2\2\2\u02c5\u02b3\3\2\2\2\u02c5\u02b4\3\2\2\2\u02c5\u02b5\3\2"+
		"\2\2\u02c5\u02b6\3\2\2\2\u02c5\u02b7\3\2\2\2\u02c5\u02b8\3\2\2\2\u02c5"+
		"\u02b9\3\2\2\2\u02c5\u02ba\3\2\2\2\u02c5\u02bb\3\2\2\2\u02c5\u02bc\3\2"+
		"\2\2\u02c5\u02bd\3\2\2\2\u02c5\u02be\3\2\2\2\u02c5\u02bf\3\2\2\2\u02c5"+
		"\u02c0\3\2\2\2\u02c5\u02c1\3\2\2\2\u02c5\u02c2\3\2\2\2\u02c5\u02c3\3\2"+
		"\2\2\u02c5\u02c4\3\2\2\2\u02c6\13\3\2\2\2\u02c7\u02d2\5\u00b4[\2\u02c8"+
		"\u02d2\5\u00acW\2\u02c9\u02d2\5\u00b6\\\2\u02ca\u02d2\5\u00a6T\2\u02cb"+
		"\u02d2\5\u00b2Z\2\u02cc\u02d2\5\u00a4S\2\u02cd\u02d2\5\u00aeX\2\u02ce"+
		"\u02d2\5\u00b0Y\2\u02cf\u02d2\5\u00a8U\2\u02d0\u02d2\5\u00aaV\2\u02d1"+
		"\u02c7\3\2\2\2\u02d1\u02c8\3\2\2\2\u02d1\u02c9\3\2\2\2\u02d1\u02ca\3\2"+
		"\2\2\u02d1\u02cb\3\2\2\2\u02d1\u02cc\3\2\2\2\u02d1\u02cd\3\2\2\2\u02d1"+
		"\u02ce\3\2\2\2\u02d1\u02cf\3\2\2\2\u02d1\u02d0\3\2\2\2\u02d2\r\3\2\2\2"+
		"\u02d3\u02dd\5\u0100\u0081\2\u02d4\u02dd\5\u0102\u0082\2\u02d5\u02dd\5"+
		"\u0104\u0083\2\u02d6\u02dd\5\u0106\u0084\2\u02d7\u02dd\5\u0108\u0085\2"+
		"\u02d8\u02dd\5\u010a\u0086\2\u02d9\u02dd\5\u010c\u0087\2\u02da\u02dd\5"+
		"\u010e\u0088\2\u02db\u02dd\5\u0110\u0089\2\u02dc\u02d3\3\2\2\2\u02dc\u02d4"+
		"\3\2\2\2\u02dc\u02d5\3\2\2\2\u02dc\u02d6\3\2\2\2\u02dc\u02d7\3\2\2\2\u02dc"+
		"\u02d8\3\2\2\2\u02dc\u02d9\3\2\2\2\u02dc\u02da\3\2\2\2\u02dc\u02db\3\2"+
		"\2\2\u02dd\17\3\2\2\2\u02de\u02ee\5\u0120\u0091\2\u02df\u02ee\5\u0122"+
		"\u0092\2\u02e0\u02ee\5\u0124\u0093\2\u02e1\u02ee\5\u0126\u0094\2\u02e2"+
		"\u02ee\5\u0128\u0095\2\u02e3\u02ee\5\u012a\u0096\2\u02e4\u02ee\5\u012c"+
		"\u0097\2\u02e5\u02ee\5\u012e\u0098\2\u02e6\u02ee\5\u0130\u0099\2\u02e7"+
		"\u02ee\5\u0148\u00a5\2\u02e8\u02ee\5\u014a\u00a6\2\u02e9\u02ee\5\u014c"+
		"\u00a7\2\u02ea\u02ee\5\u014e\u00a8\2\u02eb\u02ee\5\u0150\u00a9\2\u02ec"+
		"\u02ee\5\u0152\u00aa\2\u02ed\u02de\3\2\2\2\u02ed\u02df\3\2\2\2\u02ed\u02e0"+
		"\3\2\2\2\u02ed\u02e1\3\2\2\2\u02ed\u02e2\3\2\2\2\u02ed\u02e3\3\2\2\2\u02ed"+
		"\u02e4\3\2\2\2\u02ed\u02e5\3\2\2\2\u02ed\u02e6\3\2\2\2\u02ed\u02e7\3\2"+
		"\2\2\u02ed\u02e8\3\2\2\2\u02ed\u02e9\3\2\2\2\u02ed\u02ea\3\2\2\2\u02ed"+
		"\u02eb\3\2\2\2\u02ed\u02ec\3\2\2\2\u02ee\21\3\2\2\2\u02ef\u02f3\5\u0154"+
		"\u00ab\2\u02f0\u02f3\5\u0156\u00ac\2\u02f1\u02f3\5\u0158\u00ad\2\u02f2"+
		"\u02ef\3\2\2\2\u02f2\u02f0\3\2\2\2\u02f2\u02f1\3\2\2\2\u02f3\23\3\2\2"+
		"\2\u02f4\u02ff\5\u015c\u00af\2\u02f5\u02ff\5\u015e\u00b0\2\u02f6\u02ff"+
		"\5\u0160\u00b1\2\u02f7\u02ff\5\u0164\u00b3\2\u02f8\u02ff\5\u0166\u00b4"+
		"\2\u02f9\u02ff\5\u0168\u00b5\2\u02fa\u02ff\5\u016c\u00b7\2\u02fb\u02ff"+
		"\5\u0162\u00b2\2\u02fc\u02ff\5\u016a\u00b6\2\u02fd\u02ff\5\u016e\u00b8"+
		"\2\u02fe\u02f4\3\2\2\2\u02fe\u02f5\3\2\2\2\u02fe\u02f6\3\2\2\2\u02fe\u02f7"+
		"\3\2\2\2\u02fe\u02f8\3\2\2\2\u02fe\u02f9\3\2\2\2\u02fe\u02fa\3\2\2\2\u02fe"+
		"\u02fb\3\2\2\2\u02fe\u02fc\3\2\2\2\u02fe\u02fd\3\2\2\2\u02ff\25\3\2\2"+
		"\2\u0300\u031a\5\u0180\u00c1\2\u0301\u031a\5\u0182\u00c2\2\u0302\u031a"+
		"\5\u0184\u00c3\2\u0303\u031a\5\u0186\u00c4\2\u0304\u031a\5\u0188\u00c5"+
		"\2\u0305\u031a\5\u018a\u00c6\2\u0306\u031a\5\u018c\u00c7\2\u0307\u031a"+
		"\5\u018e\u00c8\2\u0308\u031a\5\u01a6\u00d4\2\u0309\u031a\5\u01a8\u00d5"+
		"\2\u030a\u031a\5\u01aa\u00d6\2\u030b\u031a\5\u01ac\u00d7\2\u030c\u031a"+
		"\5\u01ae\u00d8\2\u030d\u031a\5\u01b2\u00da\2\u030e\u031a\5\u01b4\u00db"+
		"\2\u030f\u031a\5\u01b6\u00dc\2\u0310\u031a\5\u01b8\u00dd\2\u0311\u031a"+
		"\5\u01ba\u00de\2\u0312\u031a\5\u01c8\u00e5\2\u0313\u031a\5\u01ca\u00e6"+
		"\2\u0314\u031a\5\u01cc\u00e7\2\u0315\u031a\5\u01ce\u00e8\2\u0316\u031a"+
		"\5\u01d0\u00e9\2\u0317\u031a\5\u01d2\u00ea\2\u0318\u031a\5\u01d4\u00eb"+
		"\2\u0319\u0300\3\2\2\2\u0319\u0301\3\2\2\2\u0319\u0302\3\2\2\2\u0319\u0303"+
		"\3\2\2\2\u0319\u0304\3\2\2\2\u0319\u0305\3\2\2\2\u0319\u0306\3\2\2\2\u0319"+
		"\u0307\3\2\2\2\u0319\u0308\3\2\2\2\u0319\u0309\3\2\2\2\u0319\u030a\3\2"+
		"\2\2\u0319\u030b\3\2\2\2\u0319\u030c\3\2\2\2\u0319\u030d\3\2\2\2\u0319"+
		"\u030e\3\2\2\2\u0319\u030f\3\2\2\2\u0319\u0310\3\2\2\2\u0319\u0311\3\2"+
		"\2\2\u0319\u0312\3\2\2\2\u0319\u0313\3\2\2\2\u0319\u0314\3\2\2\2\u0319"+
		"\u0315\3\2\2\2\u0319\u0316\3\2\2\2\u0319\u0317\3\2\2\2\u0319\u0318\3\2"+
		"\2\2\u031a\27\3\2\2\2\u031b\u0323\5\u01de\u00f0\2\u031c\u0323\5\u01e0"+
		"\u00f1\2\u031d\u0323\5\u01e2\u00f2\2\u031e\u0323\5\u01e4\u00f3\2\u031f"+
		"\u0323\5\u01e6\u00f4\2\u0320\u0323\5\u01e8\u00f5\2\u0321\u0323\5\u01ec"+
		"\u00f7\2\u0322\u031b\3\2\2\2\u0322\u031c\3\2\2\2\u0322\u031d\3\2\2\2\u0322"+
		"\u031e\3\2\2\2\u0322\u031f\3\2\2\2\u0322\u0320\3\2\2\2\u0322\u0321\3\2"+
		"\2\2\u0323\31\3\2\2\2\u0324\u0325\7 \2\2\u0325\u0327\t\2\2\2\u0326\u0328"+
		"\5\u0244\u0123\2\u0327\u0326\3\2\2\2\u0327\u0328\3\2\2\2\u0328\u0329\3"+
		"\2\2\2\u0329\u032d\5\u020c\u0107\2\u032a\u032c\5\62\32\2\u032b\u032a\3"+
		"\2\2\2\u032c\u032f\3\2\2\2\u032d\u032b\3\2\2\2\u032d\u032e\3\2\2\2\u032e"+
		"\33\3\2\2\2\u032f\u032d\3\2\2\2\u0330\u0332\7 \2\2\u0331\u0333\5\64\33"+
		"\2\u0332\u0331\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0336"+
		"\7\u0153\2\2\u0335\u0337\5\u0244\u0123\2\u0336\u0335\3\2\2\2\u0336\u0337"+
		"\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u0339\5\u01f2\u00fa\2\u0339\u033a\7"+
		"l\2\2\u033a\u033b\7\u01f9\2\2\u033b\u0342\5\66\34\2\u033c\u033d\7l\2\2"+
		"\u033d\u033f\7\u012b\2\2\u033e\u0340\7h\2\2\u033f\u033e\3\2\2\2\u033f"+
		"\u0340\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0343\7\u01d3\2\2\u0342\u033c"+
		"\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0345\3\2\2\2\u0344\u0346\5> \2\u0345"+
		"\u0344\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u0349\3\2\2\2\u0347\u0348\7\u0128"+
		"\2\2\u0348\u034a\7\u03e7\2\2\u0349\u0347\3\2\2\2\u0349\u034a\3\2\2\2\u034a"+
		"\u034b\3\2\2\2\u034b\u034c\7\u0145\2\2\u034c\u034d\5\u015a\u00ae\2\u034d"+
		"\35\3\2\2\2\u034e\u0350\7 \2\2\u034f\u0351\t\3\2\2\u0350\u034f\3\2\2\2"+
		"\u0350\u0351\3\2\2\2\u0351\u0353\3\2\2\2\u0352\u0354\t\4\2\2\u0353\u0352"+
		"\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0356\7J\2\2\u0356"+
		"\u0358\5\u020c\u0107\2\u0357\u0359\5@!\2\u0358\u0357\3\2\2\2\u0358\u0359"+
		"\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035b\7l\2\2\u035b\u035c\5\u01f4\u00fb"+
		"\2\u035c\u0360\5\u0230\u0119\2\u035d\u035f\5B\"\2\u035e\u035d\3\2\2\2"+
		"\u035f\u0362\3\2\2\2\u0360\u035e\3\2\2\2\u0360\u0361\3\2\2\2\u0361\u036f"+
		"\3\2\2\2\u0362\u0360\3\2\2\2\u0363\u0365\7\u0109\2\2\u0364\u0366\7\u03cf"+
		"\2\2\u0365\u0364\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0367\3\2\2\2\u0367"+
		"\u036e\t\5\2\2\u0368\u036a\7_\2\2\u0369\u036b\7\u03cf\2\2\u036a\u0369"+
		"\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u036e\t\6\2\2\u036d"+
		"\u0363\3\2\2\2\u036d\u0368\3\2\2\2\u036e\u0371\3\2\2\2\u036f\u036d\3\2"+
		"\2\2\u036f\u0370\3\2\2\2\u0370\37\3\2\2\2\u0371\u036f\3\2\2\2\u0372\u0373"+
		"\7 \2\2\u0373\u0374\7\u018a\2\2\u0374\u0375\7D\2\2\u0375\u0376\5\u020c"+
		"\u0107\2\u0376\u0377\7\7\2\2\u0377\u0378\7\u022b\2\2\u0378\u037e\7\u03e7"+
		"\2\2\u0379\u037b\7\u0175\2\2\u037a\u037c\7\u03cf\2\2\u037b\u037a\3\2\2"+
		"\2\u037b\u037c\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u037f\5\u0214\u010b\2"+
		"\u037e\u0379\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0385\3\2\2\2\u0380\u0382"+
		"\7\u022c\2\2\u0381\u0383\7\u03cf\2\2\u0382\u0381\3\2\2\2\u0382\u0383\3"+
		"\2\2\2\u0383\u0384\3\2\2\2\u0384\u0386\5\u0214\u010b\2\u0385\u0380\3\2"+
		"\2\2\u0385\u0386\3\2\2\2\u0386\u038c\3\2\2\2\u0387\u0389\7\u01dd\2\2\u0388"+
		"\u038a\7\u03cf\2\2\u0389\u0388\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038b"+
		"\3\2\2\2\u038b\u038d\5\u0214\u010b\2\u038c\u0387\3\2\2\2\u038c\u038d\3"+
		"\2\2\2\u038d\u0393\3\2\2\2\u038e\u0390\7\u01b8\2\2\u038f\u0391\7\u03cf"+
		"\2\2\u0390\u038f\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u0392\3\2\2\2\u0392"+
		"\u0394\5\u020c\u0107\2\u0393\u038e\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0396"+
		"\3\2\2\2\u0395\u0397\7\u023a\2\2\u0396\u0395\3\2\2\2\u0396\u0397\3\2\2"+
		"\2\u0397\u039d\3\2\2\2\u0398\u039a\7\u0128\2\2\u0399\u039b\7\u03cf\2\2"+
		"\u039a\u0399\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039e"+
		"\7\u03e7\2\2\u039d\u0398\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u039f\3\2\2"+
		"\2\u039f\u03a1\7\u014d\2\2\u03a0\u03a2\7\u03cf\2\2\u03a1\u03a0\3\2\2\2"+
		"\u03a1\u03a2\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a4\5\u0202\u0102\2\u03a4"+
		"!\3\2\2\2\u03a5\u03a7\7 \2\2\u03a6\u03a8\5\64\33\2\u03a7\u03a6\3\2\2\2"+
		"\u03a7\u03a8\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03aa\7w\2\2\u03aa\u03ab"+
		"\5\u01f2\u00fa\2\u03ab\u03ad\7\u03d8\2\2\u03ac\u03ae\5D#\2\u03ad\u03ac"+
		"\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03b3\3\2\2\2\u03af\u03b0\7\u03da\2"+
		"\2\u03b0\u03b2\5D#\2\u03b1\u03af\3\2\2\2\u03b2\u03b5\3\2\2\2\u03b3\u03b1"+
		"\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b6\3\2\2\2\u03b5\u03b3\3\2\2\2\u03b6"+
		"\u03ba\7\u03d9\2\2\u03b7\u03b9\5H%\2\u03b8\u03b7\3\2\2\2\u03b9\u03bc\3"+
		"\2\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03bd\3\2\2\2\u03bc"+
		"\u03ba\3\2\2\2\u03bd\u03be\5\u015a\u00ae\2\u03be#\3\2\2\2\u03bf\u03c1"+
		"\7 \2\2\u03c0\u03c2\5\64\33\2\u03c1\u03c0\3\2\2\2\u03c1\u03c2\3\2\2\2"+
		"\u03c2\u03c3\3\2\2\2\u03c3\u03c4\7\u0167\2\2\u03c4\u03c5\5\u01f2\u00fa"+
		"\2\u03c5\u03c7\7\u03d8\2\2\u03c6\u03c8\5F$\2\u03c7\u03c6\3\2\2\2\u03c7"+
		"\u03c8\3\2\2\2\u03c8\u03cd\3\2\2\2\u03c9\u03ca\7\u03da\2\2\u03ca\u03cc"+
		"\5F$\2\u03cb\u03c9\3\2\2\2\u03cc\u03cf\3\2\2\2\u03cd\u03cb\3\2\2\2\u03cd"+
		"\u03ce\3\2\2\2\u03ce\u03d0\3\2\2\2\u03cf\u03cd\3\2\2\2\u03d0\u03d1\7\u03d9"+
		"\2\2\u03d1\u03d2\7\u01f1\2\2\u03d2\u03d6\5\u0220\u0111\2\u03d3\u03d5\5"+
		"H%\2\u03d4\u03d3\3\2\2\2\u03d5\u03d8\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d6"+
		"\u03d7\3\2\2\2\u03d7\u03db\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d9\u03dc\5\u015a"+
		"\u00ae\2\u03da\u03dc\5\u016a\u00b6\2\u03db\u03d9\3\2\2\2\u03db\u03da\3"+
		"\2\2\2\u03dc%\3\2\2\2\u03dd\u03de\7 \2\2\u03de\u03df\7\u01fb\2\2\u03df"+
		"\u03e0\5\u020c\u0107\2\u03e0\u03e1\7>\2\2\u03e1\u03e2\7\u013a\2\2\u03e2"+
		"\u03e3\7\u023e\2\2\u03e3\u03e4\t\7\2\2\u03e4\u03e5\7\u01c3\2\2\u03e5\u03e6"+
		"\7\u03d8\2\2\u03e6\u03eb\5J&\2\u03e7\u03e8\7\u03da\2\2\u03e8\u03ea\5J"+
		"&\2\u03e9\u03e7\3\2\2\2\u03ea\u03ed\3\2\2\2\u03eb\u03e9\3\2\2\2\u03eb"+
		"\u03ec\3\2\2\2\u03ec\u03ee\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ee\u03ef\7\u03d9"+
		"\2\2\u03ef\'\3\2\2\2\u03f0\u03f2\7 \2\2\u03f1\u03f3\7\u0223\2\2\u03f2"+
		"\u03f1\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f6\7\u009c"+
		"\2\2\u03f5\u03f7\5\u0244\u0123\2\u03f6\u03f5\3\2\2\2\u03f6\u03f7\3\2\2"+
		"\2\u03f7\u03f8\3\2\2\2\u03f8\u0400\5\u01f4\u00fb\2\u03f9\u03fa\7Z\2\2"+
		"\u03fa\u0401\5\u01f4\u00fb\2\u03fb\u03fc\7\u03d8\2\2\u03fc\u03fd\7Z\2"+
		"\2\u03fd\u03fe\5\u01f4\u00fb\2\u03fe\u03ff\7\u03d9\2\2\u03ff\u0401\3\2"+
		"\2\2\u0400\u03f9\3\2\2\2\u0400\u03fb\3\2\2\2\u0401\u043f\3\2\2\2\u0402"+
		"\u0404\7 \2\2\u0403\u0405\7\u0223\2\2\u0404\u0403\3\2\2\2\u0404\u0405"+
		"\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408\7\u009c\2\2\u0407\u0409\5\u0244"+
		"\u0123\2\u0408\u0407\3\2\2\2\u0408\u0409\3\2\2\2\u0409\u040a\3\2\2\2\u040a"+
		"\u040c\5\u01f4\u00fb\2\u040b\u040d\5L\'\2\u040c\u040b\3\2\2\2\u040c\u040d"+
		"\3\2\2\2\u040d\u0418\3\2\2\2\u040e\u0415\5^\60\2\u040f\u0411\7\u03da\2"+
		"\2\u0410\u040f\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0414"+
		"\5^\60\2\u0413\u0410\3\2\2\2\u0414\u0417\3\2\2\2\u0415\u0413\3\2\2\2\u0415"+
		"\u0416\3\2\2\2\u0416\u0419\3\2\2\2\u0417\u0415\3\2\2\2\u0418\u040e\3\2"+
		"\2\2\u0418\u0419\3\2\2\2\u0419\u041b\3\2\2\2\u041a\u041c\5b\62\2\u041b"+
		"\u041a\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041e\3\2\2\2\u041d\u041f\t\b"+
		"\2\2\u041e\u041d\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0421\3\2\2\2\u0420"+
		"\u0422\7\r\2\2\u0421\u0420\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u0423\3\2"+
		"\2\2\u0423\u0424\5\u00b4[\2\u0424\u043f\3\2\2\2\u0425\u0427\7 \2\2\u0426"+
		"\u0428\7\u0223\2\2\u0427\u0426\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u0429"+
		"\3\2\2\2\u0429\u042b\7\u009c\2\2\u042a\u042c\5\u0244\u0123\2\u042b\u042a"+
		"\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u042e\5\u01f4\u00fb"+
		"\2\u042e\u0439\5L\'\2\u042f\u0436\5^\60\2\u0430\u0432\7\u03da\2\2\u0431"+
		"\u0430\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0435\5^"+
		"\60\2\u0434\u0431\3\2\2\2\u0435\u0438\3\2\2\2\u0436\u0434\3\2\2\2\u0436"+
		"\u0437\3\2\2\2\u0437\u043a\3\2\2\2\u0438\u0436\3\2\2\2\u0439\u042f\3\2"+
		"\2\2\u0439\u043a\3\2\2\2\u043a\u043c\3\2\2\2\u043b\u043d\5b\62\2\u043c"+
		"\u043b\3\2\2\2\u043c\u043d\3\2\2\2\u043d\u043f\3\2\2\2\u043e\u03f0\3\2"+
		"\2\2\u043e\u0402\3\2\2\2\u043e\u0425\3\2\2\2\u043f)\3\2\2\2\u0440\u0441"+
		"\7 \2\2\u0441\u0442\7\u0222\2\2\u0442\u0443\5\u020c\u0107\2\u0443\u0444"+
		"\7\7\2\2\u0444\u0445\7\u013b\2\2\u0445\u0449\7\u03e7\2\2\u0446\u0447\7"+
		"\u015f\2\2\u0447\u0448\7\u03cf\2\2\u0448\u044a\5\u0214\u010b\2\u0449\u0446"+
		"\3\2\2\2\u0449\u044a\3\2\2\2\u044a\u0450\3\2\2\2\u044b\u044d\7\u014d\2"+
		"\2\u044c\u044e\7\u03cf\2\2\u044d\u044c\3\2\2\2\u044d\u044e\3\2\2\2\u044e"+
		"\u044f\3\2\2\2\u044f\u0451\5\u0202\u0102\2\u0450\u044b\3\2\2\2\u0450\u0451"+
		"\3\2\2\2\u0451+\3\2\2\2\u0452\u0453\7 \2\2\u0453\u0454\7\u0222\2\2\u0454"+
		"\u0455\5\u020c\u0107\2\u0455\u0456\7\7\2\2\u0456\u0457\7\u013b\2\2\u0457"+
		"\u0458\7\u03e7\2\2\u0458\u0459\7\u00aa\2\2\u0459\u045a\7\u018a\2\2\u045a"+
		"\u045b\7D\2\2\u045b\u0461\5\u020c\u0107\2\u045c\u045e\7\u015b\2\2\u045d"+
		"\u045f\7\u03cf\2\2\u045e\u045d\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0460"+
		"\3\2\2\2\u0460\u0462\5\u0214\u010b\2\u0461\u045c\3\2\2\2\u0461\u0462\3"+
		"\2\2\2\u0462\u0468\3\2\2\2\u0463\u0465\7\u0175\2\2\u0464\u0466\7\u03cf"+
		"\2\2\u0465\u0464\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u0467\3\2\2\2\u0467"+
		"\u0469\5\u0214\u010b\2\u0468\u0463\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u046f"+
		"\3\2\2\2\u046a\u046c\7\u010e\2\2\u046b\u046d\7\u03cf\2\2\u046c\u046b\3"+
		"\2\2\2\u046c\u046d\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u0470\5\u0214\u010b"+
		"\2\u046f\u046a\3\2\2\2\u046f\u0470\3\2\2\2\u0470\u0476\3\2\2\2\u0471\u0473"+
		"\7\u01a4\2\2\u0472\u0474\7\u03cf\2\2\u0473\u0472\3\2\2\2\u0473\u0474\3"+
		"\2\2\2\u0474\u0475\3\2\2\2\u0475\u0477\5\u0214\u010b\2\u0476\u0471\3\2"+
		"\2\2\u0476\u0477\3\2\2\2\u0477\u047d\3\2\2\2\u0478\u047a\7\u01b8\2\2\u0479"+
		"\u047b\7\u03cf\2\2\u047a\u0479\3\2\2\2\u047a\u047b\3\2\2\2\u047b\u047c"+
		"\3\2\2\2\u047c\u047e\5\u020c\u0107\2\u047d\u0478\3\2\2\2\u047d\u047e\3"+
		"\2\2\2\u047e\u0480\3\2\2\2\u047f\u0481\7\u023a\2\2\u0480\u047f\3\2\2\2"+
		"\u0480\u0481\3\2\2\2\u0481\u0487\3\2\2\2\u0482\u0484\7\u0128\2\2\u0483"+
		"\u0485\7\u03cf\2\2\u0484\u0483\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0486"+
		"\3\2\2\2\u0486\u0488\7\u03e7\2\2\u0487\u0482\3\2\2\2\u0487\u0488\3\2\2"+
		"\2\u0488\u0489\3\2\2\2\u0489\u048b\7\u014d\2\2\u048a\u048c\7\u03cf\2\2"+
		"\u048b\u048a\3\2\2\2\u048b\u048c\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e"+
		"\5\u0202\u0102\2\u048e-\3\2\2\2\u048f\u0491\7 \2\2\u0490\u0492\5\64\33"+
		"\2\u0491\u0490\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0494"+
		"\7\u00a1\2\2\u0494\u0495\5\u01f2\u00fa\2\u0495\u0496\t\t\2\2\u0496\u0497"+
		"\t\n\2\2\u0497\u0498\7l\2\2\u0498\u0499\5\u01f4\u00fb\2\u0499\u049a\7"+
		"<\2\2\u049a\u049b\7\62\2\2\u049b\u049e\7\u01f5\2\2\u049c\u049d\t\13\2"+
		"\2\u049d\u049f\5\u01f2\u00fa\2\u049e\u049c\3\2\2\2\u049e\u049f\3\2\2\2"+
		"\u049f\u04a0\3\2\2\2\u04a0\u04a1\5\u015a\u00ae\2\u04a1/\3\2\2\2\u04a2"+
		"\u04a5\7 \2\2\u04a3\u04a4\7p\2\2\u04a4\u04a6\7\u0081\2\2\u04a5\u04a3\3"+
		"\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04aa\3\2\2\2\u04a7\u04a8\7\u0109\2\2"+
		"\u04a8\u04a9\7\u03cf\2\2\u04a9\u04ab\t\f\2\2\u04aa\u04a7\3\2\2\2\u04aa"+
		"\u04ab\3\2\2\2\u04ab\u04ad\3\2\2\2\u04ac\u04ae\5\64\33\2\u04ad\u04ac\3"+
		"\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04b2\3\2\2\2\u04af\u04b0\7\u0091\2\2"+
		"\u04b0\u04b1\7\u01fa\2\2\u04b1\u04b3\t\r\2\2\u04b2\u04af\3\2\2\2\u04b2"+
		"\u04b3\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b5\7\u0237\2\2\u04b5\u04ba"+
		"\5\u01f2\u00fa\2\u04b6\u04b7\7\u03d8\2\2\u04b7\u04b8\5\u022c\u0117\2\u04b8"+
		"\u04b9\7\u03d9\2\2\u04b9\u04bb\3\2\2\2\u04ba\u04b6\3\2\2\2\u04ba\u04bb"+
		"\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04bd\7\r\2\2\u04bd\u04c4\5\u00b4["+
		"\2\u04be\u04c0\7\u00b0\2\2\u04bf\u04c1\t\16\2\2\u04c0\u04bf\3\2\2\2\u04c0"+
		"\u04c1\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c3\7\31\2\2\u04c3\u04c5\7"+
		"n\2\2\u04c4\u04be\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\61\3\2\2\2\u04c6\u04c8"+
		"\7(\2\2\u04c7\u04c6\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04cc\3\2\2\2\u04c9"+
		"\u04ca\7\30\2\2\u04ca\u04cd\7\u008c\2\2\u04cb\u04cd\7\u02b7\2\2\u04cc"+
		"\u04c9\3\2\2\2\u04cc\u04cb\3\2\2\2\u04cd\u04cf\3\2\2\2\u04ce\u04d0\7\u03cf"+
		"\2\2\u04cf\u04ce\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d3\3\2\2\2\u04d1"+
		"\u04d4\5\u01fe\u0100\2\u04d2\u04d4\7(\2\2\u04d3\u04d1\3\2\2\2\u04d3\u04d2"+
		"\3\2\2\2\u04d4\u04de\3\2\2\2\u04d5\u04d7\7(\2\2\u04d6\u04d5\3\2\2\2\u04d6"+
		"\u04d7\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8\u04da\7\32\2\2\u04d9\u04db\7"+
		"\u03cf\2\2\u04da\u04d9\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04dc\3\2\2\2"+
		"\u04dc\u04de\5\u0200\u0101\2\u04dd\u04c7\3\2\2\2\u04dd\u04d6\3\2\2\2\u04de"+
		"\63\3\2\2\2\u04df\u04e0\7\u013e\2\2\u04e0\u04e7\7\u03cf\2\2\u04e1\u04e8"+
		"\5\u01fa\u00fe\2\u04e2\u04e5\7#\2\2\u04e3\u04e4\7\u03d8\2\2\u04e4\u04e6"+
		"\7\u03d9\2\2\u04e5\u04e3\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6\u04e8\3\2\2"+
		"\2\u04e7\u04e1\3";
	private static final String _serializedATNSegment1 =
		"\2\2\2\u04e7\u04e2\3\2\2\2\u04e8\65\3\2\2\2\u04e9\u04ea\7\u010b\2\2\u04ea"+
		"\u04ee\58\35\2\u04eb\u04ed\5:\36\2\u04ec\u04eb\3\2\2\2\u04ed\u04f0\3\2"+
		"\2\2\u04ee\u04ec\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u050c\3\2\2\2\u04f0"+
		"\u04ee\3\2\2\2\u04f1\u04f4\7\u0155\2\2\u04f2\u04f5\5\u0212\u010a\2\u04f3"+
		"\u04f5\5\u025a\u012e\2\u04f4\u04f2\3\2\2\2\u04f4\u04f3\3\2\2\2\u04f5\u04f6"+
		"\3\2\2\2\u04f6\u04ff\5<\37\2\u04f7\u04f8\7\u0211\2\2\u04f8\u04fc\58\35"+
		"\2\u04f9\u04fb\5:\36\2\u04fa\u04f9\3\2\2\2\u04fb\u04fe\3\2\2\2\u04fc\u04fa"+
		"\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u0500\3\2\2\2\u04fe\u04fc\3\2\2\2\u04ff"+
		"\u04f7\3\2\2\2\u04ff\u0500\3\2\2\2\u0500\u0509\3\2\2\2\u0501\u0502\7\u014c"+
		"\2\2\u0502\u0506\58\35\2\u0503\u0505\5:\36\2\u0504\u0503\3\2\2\2\u0505"+
		"\u0508\3\2\2\2\u0506\u0504\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u050a\3\2"+
		"\2\2\u0508\u0506\3\2\2\2\u0509\u0501\3\2\2\2\u0509\u050a\3\2\2\2\u050a"+
		"\u050c\3\2\2\2\u050b\u04e9\3\2\2\2\u050b\u04f1\3\2\2\2\u050c\67\3\2\2"+
		"\2\u050d\u0512\7\u00f4\2\2\u050e\u0512\5\u0216\u010c\2\u050f\u0512\5\u0212"+
		"\u010a\2\u0510\u0512\5\u025a\u012e\2\u0511\u050d\3\2\2\2\u0511\u050e\3"+
		"\2\2\2\u0511\u050f\3\2\2\2\u0511\u0510\3\2\2\2\u05129\3\2\2\2\u0513\u0514"+
		"\7\u03ca\2\2\u0514\u0517\7O\2\2\u0515\u0518\5\u0212\u010a\2\u0516\u0518"+
		"\5\u025a\u012e\2\u0517\u0515\3\2\2\2\u0517\u0516\3\2\2\2\u0518\u0519\3"+
		"\2\2\2\u0519\u051a\5<\37\2\u051a;\3\2\2\2\u051b\u0529\5\u0270\u0139\2"+
		"\u051c\u0529\7\u00c5\2\2\u051d\u0529\7\u00d7\2\2\u051e\u0529\7\u00d8\2"+
		"\2\u051f\u0529\7\u00d9\2\2\u0520\u0529\7\u00da\2\2\u0521\u0529\7\u00db"+
		"\2\2\u0522\u0529\7\u00dc\2\2\u0523\u0529\7\u00dd\2\2\u0524\u0529\7\u00de"+
		"\2\2\u0525\u0529\7\u00df\2\2\u0526\u0529\7\u00e0\2\2\u0527\u0529\7\u00e1"+
		"\2\2\u0528\u051b\3\2\2\2\u0528\u051c\3\2\2\2\u0528\u051d\3\2\2\2\u0528"+
		"\u051e\3\2\2\2\u0528\u051f\3\2\2\2\u0528\u0520\3\2\2\2\u0528\u0521\3\2"+
		"\2\2\u0528\u0522\3\2\2\2\u0528\u0523\3\2\2\2\u0528\u0524\3\2\2\2\u0528"+
		"\u0525\3\2\2\2\u0528\u0526\3\2\2\2\u0528\u0527\3\2\2\2\u0529=\3\2\2\2"+
		"\u052a\u0530\7\u0149\2\2\u052b\u0530\7\u0142\2\2\u052c\u052d\7\u0142\2"+
		"\2\u052d\u052e\7l\2\2\u052e\u0530\7\u0201\2\2\u052f\u052a\3\2\2\2\u052f"+
		"\u052b\3\2\2\2\u052f\u052c\3\2\2\2\u0530?\3\2\2\2\u0531\u0532\7\u00ab"+
		"\2\2\u0532\u0533\t\17\2\2\u0533A\3\2\2\2\u0534\u0536\7\u0182\2\2\u0535"+
		"\u0537\7\u03cf\2\2\u0536\u0535\3\2\2\2\u0536\u0537\3\2\2\2\u0537\u0538"+
		"\3\2\2\2\u0538\u0542\5\u0214\u010b\2\u0539\u0542\5@!\2\u053a\u053b\7\u00b0"+
		"\2\2\u053b\u053c\7\u01c7\2\2\u053c\u0542\5\u020c\u0107\2\u053d\u053e\7"+
		"\u0128\2\2\u053e\u0542\7\u03e7\2\2\u053f\u0542\7\u017a\2\2\u0540\u0542"+
		"\7\u0239\2\2\u0541\u0534\3\2\2\2\u0541\u0539\3\2\2\2\u0541\u053a\3\2\2"+
		"\2\u0541\u053d\3\2\2\2\u0541\u053f\3\2\2\2\u0541\u0540\3\2\2\2\u0542C"+
		"\3\2\2\2\u0543\u0545\t\20\2\2\u0544\u0543\3\2\2\2\u0544\u0545\3\2\2\2"+
		"\u0545\u0546\3\2\2\2\u0546\u0547\5\u020c\u0107\2\u0547\u0548\5\u0220\u0111"+
		"\2\u0548E\3\2\2\2\u0549\u054a\5\u020c\u0107\2\u054a\u054b\5\u0220\u0111"+
		"\2\u054bG\3\2\2\2\u054c\u054d\7\u0128\2\2\u054d\u0564\7\u03e7\2\2\u054e"+
		"\u054f\7\u0183\2\2\u054f\u0564\7\u0091\2\2\u0550\u0552\7h\2\2\u0551\u0550"+
		"\3\2\2\2\u0551\u0552\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u0564\7-\2\2\u0554"+
		"\u0555\7\u0134\2\2\u0555\u055f\7\u0091\2\2\u0556\u0557\7\u01b7\2\2\u0557"+
		"\u055f\7\u0091\2\2\u0558\u0559\7{\2\2\u0559\u055a\7\u0091\2\2\u055a\u055f"+
		"\7\u013a\2\2\u055b\u055c\7f\2\2\u055c\u055d\7\u0091\2\2\u055d\u055f\7"+
		"\u013a\2\2\u055e\u0554\3\2\2\2\u055e\u0556\3\2\2\2\u055e\u0558\3\2\2\2"+
		"\u055e\u055b\3\2\2\2\u055f\u0564\3\2\2\2\u0560\u0561\7\u0091\2\2\u0561"+
		"\u0562\7\u01fa\2\2\u0562\u0564\t\r\2\2\u0563\u054c\3\2\2\2\u0563\u054e"+
		"\3\2\2\2\u0563\u0551\3\2\2\2\u0563\u055e\3\2\2\2\u0563\u0560\3\2\2\2\u0564"+
		"I\3\2\2\2\u0565\u0566\7\u016f\2\2\u0566\u0574\7\u03e7\2\2\u0567\u0568"+
		"\7%\2\2\u0568\u0574\7\u03e7\2\2\u0569\u056a\7\u0231\2\2\u056a\u0574\7"+
		"\u03e7\2\2\u056b\u056c\7\u01cb\2\2\u056c\u0574\7\u03e7\2\2\u056d\u056e"+
		"\7\u0204\2\2\u056e\u0574\7\u03e7\2\2\u056f\u0570\7\u01c4\2\2\u0570\u0574"+
		"\7\u03e7\2\2\u0571\u0572\7\u01d0\2\2\u0572\u0574\5\u0212\u010a\2\u0573"+
		"\u0565\3\2\2\2\u0573\u0567\3\2\2\2\u0573\u0569\3\2\2\2\u0573\u056b\3\2"+
		"\2\2\u0573\u056d\3\2\2\2\u0573\u056f\3\2\2\2\u0573\u0571\3\2\2\2\u0574"+
		"K\3\2\2\2\u0575\u0576\7\u03d8\2\2\u0576\u057b\5N(\2\u0577\u0578\7\u03da"+
		"\2\2\u0578\u057a\5N(\2\u0579\u0577\3\2\2\2\u057a\u057d\3\2\2\2\u057b\u0579"+
		"\3\2\2\2\u057b\u057c\3\2\2\2\u057c\u057e\3\2\2\2\u057d\u057b\3\2\2\2\u057e"+
		"\u057f\7\u03d9\2\2\u057fM\3\2\2\2\u0580\u0581\5\u020c\u0107\2\u0581\u0582"+
		"\5P)\2\u0582\u0586\3\2\2\2\u0583\u0586\5T+\2\u0584\u0586\5\\/\2\u0585"+
		"\u0580\3\2\2\2\u0585\u0583\3\2\2\2\u0585\u0584\3\2\2\2\u0586O\3\2\2\2"+
		"\u0587\u058b\5\u0220\u0111\2\u0588\u058a\5R*\2\u0589\u0588\3\2\2\2\u058a"+
		"\u058d\3\2\2\2\u058b\u0589\3\2\2\2\u058b\u058c\3\2\2\2\u058cQ\3\2\2\2"+
		"\u058d\u058b\3\2\2\2\u058e\u05b7\5\u021c\u010f\2\u058f\u0590\7(\2\2\u0590"+
		"\u05b7\5\u023c\u011f\2\u0591\u0596\7\u010f\2\2\u0592\u0593\7l\2\2\u0593"+
		"\u0594\7\u00a8\2\2\u0594\u0596\5\u023e\u0120\2\u0595\u0591\3\2\2\2\u0595"+
		"\u0592\3\2\2\2\u0596\u05b7\3\2\2\2\u0597\u0599\7v\2\2\u0598\u0597\3\2"+
		"\2\2\u0598\u0599\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u05b7\7T\2\2\u059b"+
		"\u059d\7\u00a5\2\2\u059c\u059e\7T\2\2\u059d\u059c\3\2\2\2\u059d\u059e"+
		"\3\2\2\2\u059e\u05b7\3\2\2\2\u059f\u05a0\7\u0128\2\2\u05a0\u05b7\7\u03e7"+
		"\2\2\u05a1\u05a2\7\u0126\2\2\u05a2\u05b7\t\21\2\2\u05a3\u05a4\7\u0217"+
		"\2\2\u05a4\u05b7\t\22\2\2\u05a5\u05b7\5V,\2\u05a6\u05a7\7\32\2\2\u05a7"+
		"\u05b7\5\u0200\u0101\2\u05a8\u05a9\7A\2\2\u05a9\u05ab\7\n\2\2\u05aa\u05a8"+
		"\3\2\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05ad\7\r\2\2\u05ad"+
		"\u05ae\7\u03d8\2\2\u05ae\u05af\5\u025a\u012e\2\u05af\u05b1\7\u03d9\2\2"+
		"\u05b0\u05b2\t\23\2\2\u05b1\u05b0\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b7"+
		"\3\2\2\2\u05b3\u05b4\7\u00d6\2\2\u05b4\u05b5\7(\2\2\u05b5\u05b7\7\u0235"+
		"\2\2\u05b6\u058e\3\2\2\2\u05b6\u058f\3\2\2\2\u05b6\u0595\3\2\2\2\u05b6"+
		"\u0598\3\2\2\2\u05b6\u059b\3\2\2\2\u05b6\u059f\3\2\2\2\u05b6\u05a1\3\2"+
		"\2\2\u05b6\u05a3\3\2\2\2\u05b6\u05a5\3\2\2\2\u05b6\u05a6\3\2\2\2\u05b6"+
		"\u05aa\3\2\2\2\u05b6\u05b3\3\2\2\2\u05b7S\3\2\2\2\u05b8\u05ba\7\35\2\2"+
		"\u05b9\u05bb\5\u020c\u0107\2\u05ba\u05b9\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb"+
		"\u05bd\3\2\2\2\u05bc\u05b8\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05be\3\2"+
		"\2\2\u05be\u05bf\7v\2\2\u05bf\u05c1\7T\2\2\u05c0\u05c2\5\u020c\u0107\2"+
		"\u05c1\u05c0\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05c4\3\2\2\2\u05c3\u05c5"+
		"\5@!\2\u05c4\u05c3\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6"+
		"\u05ca\5\u0230\u0119\2\u05c7\u05c9\5B\"\2\u05c8\u05c7\3\2\2\2\u05c9\u05cc"+
		"\3\2\2\2\u05ca\u05c8\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05fe\3\2\2\2\u05cc"+
		"\u05ca\3\2\2\2\u05cd\u05cf\7\35\2\2\u05ce\u05d0\5\u020c\u0107\2\u05cf"+
		"\u05ce\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0\u05d2\3\2\2\2\u05d1\u05cd\3\2"+
		"\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d5\7\u00a5\2\2\u05d4"+
		"\u05d6\t\24\2\2\u05d5\u05d4\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d8\3"+
		"\2\2\2\u05d7\u05d9\5\u020c\u0107\2\u05d8\u05d7\3\2\2\2\u05d8\u05d9\3\2"+
		"\2\2\u05d9\u05db\3\2\2\2\u05da\u05dc\5@!\2\u05db\u05da\3\2\2\2\u05db\u05dc"+
		"\3\2\2\2\u05dc\u05dd\3\2\2\2\u05dd\u05e1\5\u0230\u0119\2\u05de\u05e0\5"+
		"B\"\2\u05df\u05de\3\2\2\2\u05e0\u05e3\3\2\2\2\u05e1\u05df\3\2\2\2\u05e1"+
		"\u05e2\3\2\2\2\u05e2\u05fe\3\2\2\2\u05e3\u05e1\3\2\2\2\u05e4\u05e6\7\35"+
		"\2\2\u05e5\u05e7\5\u020c\u0107\2\u05e6\u05e5\3\2\2\2\u05e6\u05e7\3\2\2"+
		"\2\u05e7\u05e9\3\2\2\2\u05e8\u05e4\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u05ea"+
		"\3\2\2\2\u05ea\u05eb\7>\2\2\u05eb\u05ed\7T\2\2\u05ec\u05ee\5\u020c\u0107"+
		"\2\u05ed\u05ec\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05ef\3\2\2\2\u05ef\u05f0"+
		"\5\u0230\u0119\2\u05f0\u05f1\5V,\2\u05f1\u05fe\3\2\2\2\u05f2\u05f4\7\35"+
		"\2\2\u05f3\u05f5\5\u020c\u0107\2\u05f4\u05f3\3\2\2\2\u05f4\u05f5\3\2\2"+
		"\2\u05f5\u05f7\3\2\2\2\u05f6\u05f2\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7\u05f8"+
		"\3\2\2\2\u05f8\u05f9\7\31\2\2\u05f9\u05fa\7\u03d8\2\2\u05fa\u05fb\5\u025a"+
		"\u012e\2\u05fb\u05fc\7\u03d9\2\2\u05fc\u05fe\3\2\2\2\u05fd\u05bc\3\2\2"+
		"\2\u05fd\u05d1\3\2\2\2\u05fd\u05e8\3\2\2\2\u05fd\u05f6\3\2\2\2\u05feU"+
		"\3\2\2\2\u05ff\u0600\7|\2\2\u0600\u0602\5\u01f4\u00fb\2\u0601\u0603\5"+
		"\u0230\u0119\2\u0602\u0601\3\2\2\2\u0602\u0603\3\2\2\2\u0603\u0606\3\2"+
		"\2\2\u0604\u0605\7d\2\2\u0605\u0607\t\25\2\2\u0606\u0604\3\2\2\2\u0606"+
		"\u0607\3\2\2\2\u0607\u0609\3\2\2\2\u0608\u060a\5X-\2\u0609\u0608\3\2\2"+
		"\2\u0609\u060a\3\2\2\2\u060aW\3\2\2\2\u060b\u060c\7l\2\2\u060c\u060d\7"+
		"*\2\2\u060d\u0611\5Z.\2\u060e\u060f\7l\2\2\u060f\u0610\7\u00a8\2\2\u0610"+
		"\u0612\5Z.\2\u0611\u060e\3\2\2\2\u0611\u0612\3\2\2\2\u0612\u061c\3\2\2"+
		"\2\u0613\u0614\7l\2\2\u0614\u0615\7\u00a8\2\2\u0615\u0619\5Z.\2\u0616"+
		"\u0617\7l\2\2\u0617\u0618\7*\2\2\u0618\u061a\5Z.\2\u0619\u0616\3\2\2\2"+
		"\u0619\u061a\3\2\2\2\u061a\u061c\3\2\2\2\u061b\u060b\3\2\2\2\u061b\u0613"+
		"\3\2\2\2\u061cY\3\2\2\2\u061d\u0624\7\u0084\2\2\u061e\u0624\7\24\2\2\u061f"+
		"\u0620\7\u008c\2\2\u0620\u0624\7j\2\2\u0621\u0622\7\u01b7\2\2\u0622\u0624"+
		"\7\u0106\2\2\u0623\u061d\3\2\2\2\u0623\u061e\3\2\2\2\u0623\u061f\3\2\2"+
		"\2\u0623\u0621\3\2\2\2\u0624[\3\2\2\2\u0625\u0627\t\24\2\2\u0626\u0628"+
		"\5\u020c\u0107\2\u0627\u0626\3\2\2\2\u0627\u0628\3\2\2\2\u0628\u062a\3"+
		"\2\2\2\u0629\u062b\5@!\2\u062a\u0629\3\2\2\2\u062a\u062b\3\2\2\2\u062b"+
		"\u062c\3\2\2\2\u062c\u0630\5\u0230\u0119\2\u062d\u062f\5B\"\2\u062e\u062d"+
		"\3\2\2\2\u062f\u0632\3\2\2\2\u0630\u062e\3\2\2\2\u0630\u0631\3\2\2\2\u0631"+
		"\u0642\3\2\2\2\u0632\u0630\3\2\2\2\u0633\u0635\t\26\2\2\u0634\u0636\t"+
		"\24\2\2\u0635\u0634\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u0638\3\2\2\2\u0637"+
		"\u0639\5\u020c\u0107\2\u0638\u0637\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u063a"+
		"\3\2\2\2\u063a\u063e\5\u0230\u0119\2\u063b\u063d\5B\"\2\u063c\u063b\3"+
		"\2\2\2\u063d\u0640\3\2\2\2\u063e\u063c\3\2\2\2\u063e\u063f\3\2\2\2\u063f"+
		"\u0642\3\2\2\2\u0640\u063e\3\2\2\2\u0641\u0625\3\2\2\2\u0641\u0633\3\2"+
		"\2\2\u0642]\3\2\2\2\u0643\u0645\7\u014d\2\2\u0644\u0646\7\u03cf\2\2\u0645"+
		"\u0644\3\2\2\2\u0645\u0646\3\2\2\2\u0646\u0647\3\2\2\2\u0647\u06d4\5\u0202"+
		"\u0102\2\u0648\u064a\7\u010f\2\2\u0649\u064b\7\u03cf\2\2\u064a\u0649\3"+
		"\2\2\2\u064a\u064b\3\2\2\2\u064b\u064c\3\2\2\2\u064c\u06d4\5\u0212\u010a"+
		"\2\u064d\u064f\7\u0110\2\2\u064e\u0650\7\u03cf\2\2\u064f\u064e\3\2\2\2"+
		"\u064f\u0650\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u06d4\5\u0212\u010a\2\u0652"+
		"\u0654\7(\2\2\u0653\u0652\3\2\2\2\u0653\u0654\3\2\2\2\u0654\u0658\3\2"+
		"\2\2\u0655\u0656\7\30\2\2\u0656\u0659\7\u008c\2\2\u0657\u0659\7\u02b7"+
		"\2\2\u0658\u0655\3\2\2\2\u0658\u0657\3\2\2\2\u0659\u065b\3\2\2\2\u065a"+
		"\u065c\7\u03cf\2\2\u065b\u065a\3\2\2\2\u065b\u065c\3\2\2\2\u065c\u065f"+
		"\3\2\2\2\u065d\u0660\5\u01fe\u0100\2\u065e\u0660\7(\2\2\u065f\u065d\3"+
		"\2\2\2\u065f\u065e\3\2\2\2\u0660\u06d4\3\2\2\2\u0661\u0663\t\27\2\2\u0662"+
		"\u0664\7\u03cf\2\2\u0663\u0662\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u0665"+
		"\3\2\2\2\u0665\u06d4\t\30\2\2\u0666\u0668\7(\2\2\u0667\u0666\3\2\2\2\u0667"+
		"\u0668\3\2\2\2\u0668\u0669\3\2\2\2\u0669\u066b\7\32\2\2\u066a\u066c\7"+
		"\u03cf\2\2\u066b\u066a\3\2\2\2\u066b\u066c\3\2\2\2\u066c\u066d\3\2\2\2"+
		"\u066d\u06d4\5\u0200\u0101\2\u066e\u0670\7\u0128\2\2\u066f\u0671\7\u03cf"+
		"\2\2\u0670\u066f\3\2\2\2\u0670\u0671\3\2\2\2\u0671\u0672\3\2\2\2\u0672"+
		"\u06d4\7\u03e7\2\2\u0673\u0675\7\u012d\2\2\u0674\u0676\7\u03cf\2\2\u0675"+
		"\u0674\3\2\2\2\u0675\u0676\3\2\2\2\u0676\u0677\3\2\2\2\u0677\u06d4\t\31"+
		"\2\2\u0678\u067a\7\u012f\2\2\u0679\u067b\7\u03cf\2\2\u067a\u0679\3\2\2"+
		"\2\u067a\u067b\3\2\2\2\u067b\u067c\3\2\2\2\u067c\u06d4\7\u03e7\2\2\u067d"+
		"\u067e\7\u013a\2\2\u067e\u0680\7\u0141\2\2\u067f\u0681\7\u03cf\2\2\u0680"+
		"\u067f\3\2\2\2\u0680\u0681\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u06d4\7\u03e7"+
		"\2\2\u0683\u0685\7\u013f\2\2\u0684\u0686\7\u03cf\2\2\u0685\u0684\3\2\2"+
		"\2\u0685\u0686\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u06d4\t\30\2\2\u0688"+
		"\u068a\7\u014a\2\2\u0689\u068b\7\u03cf\2\2\u068a\u0689\3\2\2\2\u068a\u068b"+
		"\3\2\2\2\u068b\u068c\3\2\2\2\u068c\u06d4\7\u03e7\2\2\u068d\u068e\7J\2"+
		"\2\u068e\u0690\7\u0141\2\2\u068f\u0691\7\u03cf\2\2\u0690\u068f\3\2\2\2"+
		"\u0690\u0691\3\2\2\2\u0691\u0692\3\2\2\2\u0692\u06d4\7\u03e7\2\2\u0693"+
		"\u0695\7\u0177\2\2\u0694\u0696\7\u03cf\2\2\u0695\u0694\3\2\2\2\u0695\u0696"+
		"\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u06d4\t\32\2\2\u0698\u069a\7\u0182"+
		"\2\2\u0699\u069b\7\u03cf\2\2\u069a\u0699\3\2\2\2\u069a\u069b\3\2\2\2\u069b"+
		"\u069c\3\2\2\2\u069c\u06d4\5\u0214\u010b\2\u069d\u069f\7\u01a3\2\2\u069e"+
		"\u06a0\7\u03cf\2\2\u069f\u069e\3\2\2\2\u069f\u06a0\3\2\2\2\u06a0\u06a1"+
		"\3\2\2\2\u06a1\u06d4\5\u0212\u010a\2\u06a2\u06a4\7\u01ac\2\2\u06a3\u06a5"+
		"\7\u03cf\2\2\u06a4\u06a3\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06a6\3\2\2"+
		"\2\u06a6\u06d4\5\u0212\u010a\2\u06a7\u06a9\7\u01c5\2\2\u06a8\u06aa\7\u03cf"+
		"\2\2\u06a9\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ab\3\2\2\2\u06ab"+
		"\u06d4\t\33\2\2\u06ac\u06ae\7\u01cb\2\2\u06ad\u06af\7\u03cf\2\2\u06ae"+
		"\u06ad\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b0\3\2\2\2\u06b0\u06d4\7\u03e7"+
		"\2\2\u06b1\u06b3\7\u01f7\2\2\u06b2\u06b4\7\u03cf\2\2\u06b3\u06b2\3\2\2"+
		"\2\u06b3\u06b4\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5\u06d4\t\34\2\2\u06b6"+
		"\u06b8\7\u0212\2\2\u06b7\u06b9\7\u03cf\2\2\u06b8\u06b7\3\2\2\2\u06b8\u06b9"+
		"\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06d4\t\33\2\2\u06bb\u06bd\7\u0213"+
		"\2\2\u06bc\u06be\7\u03cf\2\2\u06bd\u06bc\3\2\2\2\u06bd\u06be\3\2\2\2\u06be"+
		"\u06bf\3\2\2\2\u06bf\u06d4\t\33\2\2\u06c0\u06c2\7\u0214\2\2\u06c1\u06c3"+
		"\7\u03cf\2\2\u06c2\u06c1\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c4\3\2\2"+
		"\2\u06c4\u06d4\5\u0212\u010a\2\u06c5\u06c6\7\u0222\2\2\u06c6\u06c8\5\u020c"+
		"\u0107\2\u06c7\u06c9\5`\61\2\u06c8\u06c7\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9"+
		"\u06d4\3\2\2\2\u06ca\u06d4\5`\61\2\u06cb\u06cd\7\u00a4\2\2\u06cc\u06ce"+
		"\7\u03cf\2\2\u06cd\u06cc\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06cf\3\2\2"+
		"\2\u06cf\u06d0\7\u03d8\2\2\u06d0\u06d1\5\u022e\u0118\2\u06d1\u06d2\7\u03d9"+
		"\2\2\u06d2\u06d4\3\2\2\2\u06d3\u0643\3\2\2\2\u06d3\u0648\3\2\2\2\u06d3"+
		"\u064d\3\2\2\2\u06d3\u0653\3\2\2\2\u06d3\u0661\3\2\2\2\u06d3\u0667\3\2"+
		"\2\2\u06d3\u066e\3\2\2\2\u06d3\u0673\3\2\2\2\u06d3\u0678\3\2\2\2\u06d3"+
		"\u067d\3\2\2\2\u06d3\u0683\3\2\2\2\u06d3\u0688\3\2\2\2\u06d3\u068d\3\2"+
		"\2\2\u06d3\u0693\3\2\2\2\u06d3\u0698\3\2\2\2\u06d3\u069d\3\2\2\2\u06d3"+
		"\u06a2\3\2\2\2\u06d3\u06a7\3\2\2\2\u06d3\u06ac\3\2\2\2\u06d3\u06b1\3\2"+
		"\2\2\u06d3\u06b6\3\2\2\2\u06d3\u06bb\3\2\2\2\u06d3\u06c0\3\2\2\2\u06d3"+
		"\u06c5\3\2\2\2\u06d3\u06ca\3\2\2\2\u06d3\u06cb\3\2\2\2\u06d4_\3\2\2\2"+
		"\u06d5\u06d6\7\u0217\2\2\u06d6\u06d7\t\22\2\2\u06d7a\3\2\2\2\u06d8\u06d9"+
		"\7u\2\2\u06d9\u06da\7\22\2\2\u06da\u06dd\5d\63\2\u06db\u06dc\7\u01ca\2"+
		"\2\u06dc\u06de\5\u0212\u010a\2\u06dd\u06db\3\2\2\2\u06dd\u06de\3\2\2\2"+
		"\u06de\u06e6\3\2\2\2\u06df\u06e0\7\u021c\2\2\u06e0\u06e1\7\22\2\2\u06e1"+
		"\u06e4\5f\64\2\u06e2\u06e3\7\u021d\2\2\u06e3\u06e5\5\u0212\u010a\2\u06e4"+
		"\u06e2\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06e7\3\2\2\2\u06e6\u06df\3\2"+
		"\2\2\u06e6\u06e7\3\2\2\2\u06e7\u06f3\3\2\2\2\u06e8\u06e9\7\u03d8\2\2\u06e9"+
		"\u06ee\5h\65\2\u06ea\u06eb\7\u03da\2\2\u06eb\u06ed\5h\65\2\u06ec\u06ea"+
		"\3\2\2\2\u06ed\u06f0\3\2\2\2\u06ee\u06ec\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef"+
		"\u06f1\3\2\2\2\u06f0\u06ee\3\2\2\2\u06f1\u06f2\7\u03d9\2\2\u06f2\u06f4"+
		"\3\2\2\2\u06f3\u06e8\3\2\2\2\u06f3\u06f4\3\2\2\2\u06f4c\3\2\2\2\u06f5"+
		"\u06f7\7\\\2\2\u06f6\u06f5\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7\u06f8\3\2"+
		"\2\2\u06f8\u06f9\7\u016d\2\2\u06f9\u06fa\7\u03d8\2\2\u06fa\u06fb\5\u025a"+
		"\u012e\2\u06fb\u06fc\7\u03d9\2\2\u06fc\u0723\3\2\2\2\u06fd\u06ff\7\\\2"+
		"\2\u06fe\u06fd\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0704"+
		"\7T\2\2\u0701\u0702\7\u0109\2\2\u0702\u0703\7\u03cf\2\2\u0703\u0705\t"+
		"\35\2\2\u0704\u0701\3\2\2\2\u0704\u0705\3\2\2\2\u0705\u0706\3\2\2\2\u0706"+
		"\u0707\7\u03d8\2\2\u0707\u0708\5\u022c\u0117\2\u0708\u0709\7\u03d9\2\2"+
		"\u0709\u0723\3\2\2\2\u070a\u0714\7y\2\2\u070b\u070c\7\u03d8\2\2\u070c"+
		"\u070d\5\u025a\u012e\2\u070d\u070e\7\u03d9\2\2\u070e\u0715\3\2\2\2\u070f"+
		"\u0710\7\u0125\2\2\u0710\u0711\7\u03d8\2\2\u0711\u0712\5\u022c\u0117\2"+
		"\u0712\u0713\7\u03d9\2\2\u0713\u0715\3\2\2\2\u0714\u070b\3\2\2\2\u0714"+
		"\u070f\3\2\2\2\u0715\u0723\3\2\2\2\u0716\u0720\7\u0188\2\2\u0717\u0718"+
		"\7\u03d8\2\2\u0718\u0719\5\u025a\u012e\2\u0719\u071a\7\u03d9\2\2\u071a"+
		"\u0721\3\2\2\2\u071b\u071c\7\u0125\2\2\u071c\u071d\7\u03d8\2\2\u071d\u071e"+
		"\5\u022c\u0117\2\u071e\u071f\7\u03d9\2\2\u071f\u0721\3\2\2\2\u0720\u0717"+
		"\3\2\2\2\u0720\u071b\3\2\2\2\u0721\u0723\3\2\2\2\u0722\u06f6\3\2\2\2\u0722"+
		"\u06fe\3\2\2\2\u0722\u070a\3\2\2\2\u0722\u0716\3\2\2\2\u0723e\3\2\2\2"+
		"\u0724\u0726\7\\\2\2\u0725\u0724\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u0727"+
		"\3\2\2\2\u0727\u0728\7\u016d\2\2\u0728\u0729\7\u03d8\2\2\u0729\u072a\5"+
		"\u025a\u012e\2\u072a\u072b\7\u03d9\2\2\u072b\u073a\3\2\2\2\u072c\u072e"+
		"\7\\\2\2\u072d\u072c\3\2\2\2\u072d\u072e\3\2\2\2\u072e\u072f\3\2\2\2\u072f"+
		"\u0733\7T\2\2\u0730\u0731\7\u0109\2\2\u0731\u0732\7\u03cf\2\2\u0732\u0734"+
		"\t\35\2\2\u0733\u0730\3\2\2\2\u0733\u0734\3\2\2\2\u0734\u0735\3\2\2\2"+
		"\u0735\u0736\7\u03d8\2\2\u0736\u0737\5\u022c\u0117\2\u0737\u0738\7\u03d9"+
		"\2\2\u0738\u073a\3\2\2\2\u0739\u0725\3\2\2\2\u0739\u072d\3\2\2\2\u073a"+
		"g\3\2\2\2\u073b\u073c\7u\2\2\u073c\u073d\5\u020c\u0107\2\u073d\u073e\7"+
		"\u00ac\2\2\u073e\u073f\7\u0186\2\2\u073f\u0740\7\u0225\2\2\u0740\u0741"+
		"\7\u03d8\2\2\u0741\u0746\5j\66\2\u0742\u0743\7\u03da\2\2\u0743\u0745\5"+
		"j\66\2\u0744\u0742\3\2\2\2\u0745\u0748\3\2\2\2\u0746\u0744\3\2\2\2\u0746"+
		"\u0747\3\2\2\2\u0747\u0749\3\2\2\2\u0748\u0746\3\2\2\2\u0749\u074d\7\u03d9"+
		"\2\2\u074a\u074c\5p9\2\u074b\u074a\3\2\2\2\u074c\u074f\3\2\2\2\u074d\u074b"+
		"\3\2\2\2\u074d\u074e\3\2\2\2\u074e\u0758\3\2\2\2\u074f\u074d\3\2\2\2\u0750"+
		"\u0755\5n8\2\u0751\u0752\7\u03da\2\2\u0752\u0754\5n8\2\u0753\u0751\3\2"+
		"\2\2\u0754\u0757\3\2\2\2\u0755\u0753\3\2\2\2\u0755\u0756\3\2\2\2\u0756"+
		"\u0759\3\2\2\2\u0757\u0755\3\2\2\2\u0758\u0750\3\2\2\2\u0758\u0759\3\2"+
		"\2\2\u0759\u07bf\3\2\2\2\u075a\u075b\7u\2\2\u075b\u075c\5\u020c\u0107"+
		"\2\u075c\u075d\7\u00ac\2\2\u075d\u075e\7\u0186\2\2\u075e\u075f\7\u0225"+
		"\2\2\u075f\u0763\5j\66\2\u0760\u0762\5p9\2\u0761\u0760\3\2\2\2\u0762\u0765"+
		"\3\2\2\2\u0763\u0761\3\2\2\2\u0763\u0764\3\2\2\2\u0764\u076e\3\2\2\2\u0765"+
		"\u0763\3\2\2\2\u0766\u076b\5n8\2\u0767\u0768\7\u03da\2\2\u0768\u076a\5"+
		"n8\2\u0769\u0767\3\2\2\2\u076a\u076d\3\2\2\2\u076b\u0769\3\2\2\2\u076b"+
		"\u076c\3\2\2\2\u076c\u076f\3\2\2\2\u076d\u076b\3\2\2\2\u076e\u0766\3\2"+
		"\2\2\u076e\u076f\3\2\2\2\u076f\u07bf\3\2\2\2\u0770\u0771\7u\2\2\u0771"+
		"\u0772\5\u020c\u0107\2\u0772\u0773\7\u00ac\2\2\u0773\u0774\7I\2\2\u0774"+
		"\u0775\7\u03d8\2\2\u0775\u077a\5j\66\2\u0776\u0777\7\u03da\2\2\u0777\u0779"+
		"\5j\66\2\u0778\u0776\3\2\2\2\u0779\u077c\3\2\2\2\u077a\u0778\3\2\2\2\u077a"+
		"\u077b\3\2\2\2\u077b\u077d\3\2\2\2\u077c\u077a\3\2\2\2\u077d\u0781\7\u03d9"+
		"\2\2\u077e\u0780\5p9\2\u077f\u077e\3\2\2\2\u0780\u0783\3\2\2\2\u0781\u077f"+
		"\3\2\2\2\u0781\u0782\3\2\2\2\u0782\u078c\3\2\2\2\u0783\u0781\3\2\2\2\u0784"+
		"\u0789\5n8\2\u0785\u0786\7\u03da\2\2\u0786\u0788\5n8\2\u0787\u0785\3\2"+
		"\2\2\u0788\u078b\3\2\2\2\u0789\u0787\3\2\2\2\u0789\u078a\3\2\2\2\u078a"+
		"\u078d\3\2\2\2\u078b\u0789\3\2\2\2\u078c\u0784\3\2\2\2\u078c\u078d\3\2"+
		"\2\2\u078d\u07bf\3\2\2\2\u078e\u078f\7u\2\2\u078f\u0790\5\u020c\u0107"+
		"\2\u0790\u0791\7\u00ac\2\2\u0791\u0792\7I\2\2\u0792\u0793\7\u03d8\2\2"+
		"\u0793\u0798\5l\67\2\u0794\u0795\7\u03da\2\2\u0795\u0797\5l\67\2\u0796"+
		"\u0794\3\2\2\2\u0797\u079a\3\2\2\2\u0798\u0796\3\2\2\2\u0798\u0799\3\2"+
		"\2\2\u0799\u079b\3\2\2\2\u079a\u0798\3\2\2\2\u079b\u079f\7\u03d9\2\2\u079c"+
		"\u079e\5p9\2\u079d\u079c\3\2\2\2\u079e\u07a1\3\2\2\2\u079f\u079d\3\2\2"+
		"\2\u079f\u07a0\3\2\2\2\u07a0\u07aa\3\2\2\2\u07a1\u079f\3\2\2\2\u07a2\u07a7"+
		"\5n8\2\u07a3\u07a4\7\u03da\2\2\u07a4\u07a6\5n8\2\u07a5\u07a3\3\2\2\2\u07a6"+
		"\u07a9\3\2\2\2\u07a7\u07a5\3\2\2\2\u07a7\u07a8\3\2\2\2\u07a8\u07ab\3\2"+
		"\2\2\u07a9\u07a7\3\2\2\2\u07aa\u07a2\3\2\2\2\u07aa\u07ab\3\2\2\2\u07ab"+
		"\u07bf\3\2\2\2\u07ac\u07ad\7u\2\2\u07ad\u07b1\5\u020c\u0107\2\u07ae\u07b0"+
		"\5p9\2\u07af\u07ae\3\2\2\2\u07b0\u07b3\3\2\2\2\u07b1\u07af\3\2\2\2\u07b1"+
		"\u07b2\3\2\2\2\u07b2\u07bc\3\2\2\2\u07b3\u07b1\3\2\2\2\u07b4\u07b9\5n"+
		"8\2\u07b5\u07b6\7\u03da\2\2\u07b6\u07b8\5n8\2\u07b7\u07b5\3\2\2\2\u07b8"+
		"\u07bb\3\2\2\2\u07b9\u07b7\3\2\2\2\u07b9\u07ba\3\2\2\2\u07ba\u07bd\3\2"+
		"\2\2\u07bb\u07b9\3\2\2\2\u07bc\u07b4\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd"+
		"\u07bf\3\2\2\2\u07be\u073b\3\2\2\2\u07be\u075a\3\2\2\2\u07be\u0770\3\2"+
		"\2\2\u07be\u078e\3\2\2\2\u07be\u07ac\3\2\2\2\u07bfi\3\2\2\2\u07c0\u07c4"+
		"\5\u021e\u0110\2\u07c1\u07c4\5\u025a\u012e\2\u07c2\u07c4\7e\2\2\u07c3"+
		"\u07c0\3\2\2\2\u07c3\u07c1\3\2\2\2\u07c3\u07c2\3\2\2\2\u07c4k\3\2\2\2"+
		"\u07c5\u07c6\7\u03d8\2\2\u07c6\u07c9\5j\66\2\u07c7\u07c8\7\u03da\2\2\u07c8"+
		"\u07ca\5j\66\2\u07c9\u07c7\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u07c9\3\2"+
		"\2\2\u07cb\u07cc\3\2\2\2\u07cc\u07cd\3\2\2\2\u07cd\u07ce\7\u03d9\2\2\u07ce"+
		"m\3\2\2\2\u07cf\u07d0\7\u021c\2\2\u07d0\u07d4\5\u020c\u0107\2\u07d1\u07d3"+
		"\5p9\2\u07d2\u07d1\3\2\2\2\u07d3\u07d6\3\2\2\2\u07d4\u07d2\3\2\2\2\u07d4"+
		"\u07d5\3\2\2\2\u07d5o\3\2\2\2\u07d6\u07d4\3\2\2\2\u07d7\u07d9\7\u0217"+
		"\2\2\u07d8\u07d7\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07da\3\2\2\2\u07da"+
		"\u07dc\7\u014d\2\2\u07db\u07dd\7\u03cf\2\2\u07dc\u07db\3\2\2\2\u07dc\u07dd"+
		"\3\2\2\2\u07dd\u07de\3\2\2\2\u07de\u0805\5\u0202\u0102\2\u07df\u07e1\7"+
		"\u0128\2\2\u07e0\u07e2\7\u03cf\2\2\u07e1\u07e0\3\2\2\2\u07e1\u07e2\3\2"+
		"\2\2\u07e2\u07e3\3\2\2\2\u07e3\u0805\7\u03e7\2\2\u07e4\u07e5\7\u013a\2"+
		"\2\u07e5\u07e7\7\u0141\2\2\u07e6\u07e8\7\u03cf\2\2\u07e7\u07e6\3\2\2\2"+
		"\u07e7\u07e8\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9\u0805\7\u03e7\2\2\u07ea"+
		"\u07eb\7J\2\2\u07eb\u07ed\7\u0141\2\2\u07ec\u07ee\7\u03cf\2\2\u07ed\u07ec"+
		"\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef\u0805\7\u03e7\2"+
		"\2\u07f0\u07f2\7\u01a3\2\2\u07f1\u07f3\7\u03cf\2\2\u07f2\u07f1\3\2\2\2"+
		"\u07f2\u07f3\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u0805\5\u0212\u010a\2\u07f5"+
		"\u07f7\7\u01ac\2\2\u07f6\u07f8\7\u03cf\2\2\u07f7\u07f6\3\2\2\2\u07f7\u07f8"+
		"\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9\u0805\5\u0212\u010a\2\u07fa\u07fc\7"+
		"\u0222\2\2\u07fb\u07fd\7\u03cf\2\2\u07fc\u07fb\3\2\2\2\u07fc\u07fd\3\2"+
		"\2\2\u07fd\u07fe\3\2\2\2\u07fe\u0805\5\u020c\u0107\2\u07ff\u0801\7\u01b8"+
		"\2\2\u0800\u0802\7\u03cf\2\2\u0801\u0800\3\2\2\2\u0801\u0802\3\2\2\2\u0802"+
		"\u0803\3\2\2\2\u0803\u0805\5\u020c\u0107\2\u0804\u07d8\3\2\2\2\u0804\u07df"+
		"\3\2\2\2\u0804\u07e4\3\2\2\2\u0804\u07ea\3\2\2\2\u0804\u07f0\3\2\2\2\u0804"+
		"\u07f5\3\2\2\2\u0804\u07fa\3\2\2\2\u0804\u07ff\3\2\2\2\u0805q\3\2\2\2"+
		"\u0806\u0807\7\t\2\2\u0807\u0809\t\2\2\2\u0808\u080a\5\u020c\u0107\2\u0809"+
		"\u0808\3\2\2\2\u0809\u080a\3\2\2\2\u080a\u080c\3\2\2\2\u080b\u080d\5\62"+
		"\32\2\u080c\u080b\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u080c\3\2\2\2\u080e"+
		"\u080f\3\2\2\2\u080f\u0819\3\2\2\2\u0810\u0811\7\t\2\2\u0811\u0812\t\2"+
		"\2\2\u0812\u0813\5\u020c\u0107\2\u0813\u0814\7\u0230\2\2\u0814\u0815\7"+
		"\u013a\2\2\u0815\u0816\7\u0141\2\2\u0816\u0817\7\u01b2\2\2\u0817\u0819"+
		"\3\2\2\2\u0818\u0806\3\2\2\2\u0818\u0810\3\2\2\2\u0819s\3\2\2\2\u081a"+
		"\u081c\7\t\2\2\u081b\u081d\5\64\33\2\u081c\u081b\3\2\2\2\u081c\u081d\3"+
		"\2\2\2\u081d\u081e\3\2\2\2\u081e\u081f\7\u0153\2\2\u081f\u0823\5\u01f2"+
		"\u00fa\2\u0820\u0821\7l\2\2\u0821\u0822\7\u01f9\2\2\u0822\u0824\5\66\34"+
		"\2\u0823\u0820\3\2\2\2\u0823\u0824\3\2\2\2\u0824\u082b\3\2\2\2\u0825\u0826"+
		"\7l\2\2\u0826\u0828\7\u012b\2\2\u0827\u0829\7h\2\2\u0828\u0827\3\2\2\2"+
		"\u0828\u0829\3\2\2\2\u0829\u082a\3\2\2\2\u082a\u082c\7\u01d3\2\2\u082b"+
		"\u0825\3\2\2\2\u082b\u082c\3\2\2\2\u082c\u0830\3\2\2\2\u082d\u082e\7\177"+
		"\2\2\u082e\u082f\7\u009f\2\2\u082f\u0831\5\u01f2\u00fa\2\u0830\u082d\3"+
		"\2\2\2\u0830\u0831\3\2\2\2\u0831\u0833\3\2\2\2\u0832\u0834\5> \2\u0833"+
		"\u0832\3\2\2\2\u0833\u0834\3\2\2\2\u0834\u0837\3\2\2\2\u0835\u0836\7\u0128"+
		"\2\2\u0836\u0838\7\u03e7\2\2\u0837\u0835\3\2\2\2\u0837\u0838\3\2\2\2\u0838"+
		"\u083b\3\2\2\2\u0839\u083a\7\u0145\2\2\u083a\u083c\5\u015a\u00ae\2\u083b"+
		"\u0839\3\2\2\2\u083b\u083c\3\2\2\2\u083cu\3\2\2\2\u083d\u083e\7\t\2\2"+
		"\u083e\u083f\7\u0167\2\2\u083f\u0843\5\u01f2\u00fa\2\u0840\u0842\5H%\2"+
		"\u0841\u0840\3\2\2\2\u0842\u0845\3\2\2\2\u0843\u0841\3\2\2\2\u0843\u0844"+
		"\3\2\2\2\u0844w\3\2\2\2\u0845\u0843\3\2\2\2\u0846\u0847\7\t\2\2\u0847"+
		"\u0848\7\u0179\2\2\u0848\u0849\7\u01f4\2\2\u0849\u084a\7\u0285\2\2\u084a"+
		"\u084b\7\u018c\2\2\u084b\u084c\7T\2\2\u084cy\3\2\2\2\u084d\u084e\7\t\2"+
		"\2\u084e\u084f\7\u018a\2\2\u084f\u0850\7D\2\2\u0850\u0851\5\u020c\u0107"+
		"\2\u0851\u0852\7\7\2\2\u0852\u0853\7\u022b\2\2\u0853\u0859\7\u03e7\2\2"+
		"\u0854\u0856\7\u0175\2\2\u0855\u0857\7\u03cf\2\2\u0856\u0855\3\2\2\2\u0856"+
		"\u0857\3\2\2\2\u0857\u0858\3\2\2\2\u0858\u085a\5\u0214\u010b\2\u0859\u0854"+
		"\3\2\2\2\u0859\u085a\3\2\2\2\u085a\u085c\3\2\2\2\u085b\u085d\7\u023a\2"+
		"\2\u085c\u085b\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u0860"+
		"\7\u014d\2\2\u085f\u0861\7\u03cf\2\2\u0860\u085f\3\2\2\2\u0860\u0861\3"+
		"\2\2\2\u0861\u0862\3\2\2\2\u0862\u0863\5\u0202\u0102\2\u0863{\3\2\2\2"+
		"\u0864\u0865\7\t\2\2\u0865\u0866\7w\2\2\u0866\u086a\5\u01f2\u00fa\2\u0867"+
		"\u0869\5H%\2\u0868\u0867\3\2\2\2\u0869\u086c\3\2\2\2\u086a\u0868\3\2\2"+
		"\2\u086a\u086b\3\2\2\2\u086b}\3\2\2\2\u086c\u086a\3\2\2\2\u086d\u086e"+
		"\7\t\2\2\u086e\u086f\7\u01fb\2\2\u086f\u0870\5\u020c\u0107\2\u0870\u0871"+
		"\7\u01c3\2\2\u0871\u0872\7\u03d8\2\2\u0872\u0877\5J&\2\u0873\u0874\7\u03da"+
		"\2\2\u0874\u0876\5J&\2\u0875\u0873\3\2\2\2\u0876\u0879\3\2\2\2\u0877\u0875"+
		"\3\2\2\2\u0877\u0878\3\2\2\2\u0878\u087a\3\2\2\2\u0879\u0877\3\2\2\2\u087a"+
		"\u087b\7\u03d9\2\2\u087b\177\3\2\2\2\u087c\u087e\7\t\2\2\u087d\u087f\t"+
		"\3\2\2\u087e\u087d\3\2\2\2\u087e\u087f\3\2\2\2\u087f\u0881\3\2\2\2\u0880"+
		"\u0882\7H\2\2\u0881\u0880\3\2\2\2\u0881\u0882\3\2\2\2\u0882\u0883\3\2"+
		"\2\2\u0883\u0884\7\u009c\2\2\u0884\u088d\5\u01f4\u00fb\2\u0885\u088a\5"+
		"\u0086D\2\u0886\u0887\7\u03da\2\2\u0887\u0889\5\u0086D\2\u0888\u0886\3"+
		"\2\2\2\u0889\u088c\3\2\2\2\u088a\u0888\3\2\2\2\u088a\u088b\3\2\2\2\u088b"+
		"\u088e\3\2\2\2\u088c\u088a\3\2\2\2\u088d\u0885\3\2\2\2\u088d\u088e\3\2"+
		"\2\2\u088e\u0890\3\2\2\2\u088f\u0891\5b\62\2\u0890\u088f\3\2\2\2\u0890"+
		"\u0891\3\2\2\2\u0891\u0081\3\2\2\2\u0892\u0893\7\t\2\2\u0893\u0894\7\u0222"+
		"\2\2\u0894\u0895\5\u020c\u0107\2\u0895\u0896\t\36\2\2\u0896\u0897\7\u013b"+
		"\2\2\u0897\u089b\7\u03e7\2\2\u0898\u0899\7\u0175\2\2\u0899\u089a\7\u03cf"+
		"\2\2\u089a\u089c\5\u0214\u010b\2\u089b\u0898\3\2\2\2\u089b\u089c\3\2\2"+
		"\2\u089c\u089e\3\2\2\2\u089d\u089f\7\u023a\2\2\u089e\u089d\3\2\2\2\u089e"+
		"\u089f\3\2\2\2\u089f\u08a0\3\2\2\2\u08a0\u08a2\7\u014d\2\2\u08a1\u08a3"+
		"\7\u03cf\2\2\u08a2\u08a1\3\2\2\2\u08a2\u08a3\3\2\2\2\u08a3\u08a4\3\2\2"+
		"\2\u08a4\u08a5\5\u0202\u0102\2\u08a5\u0083\3\2\2\2\u08a6\u08aa\7\t\2\2"+
		"\u08a7\u08a8\7\u0109\2\2\u08a8\u08a9\7\u03cf\2\2\u08a9\u08ab\t\f\2\2\u08aa"+
		"\u08a7\3\2\2\2\u08aa\u08ab\3\2\2\2\u08ab\u08ad\3\2\2\2\u08ac\u08ae\5\64"+
		"\33\2\u08ad\u08ac\3\2\2\2\u08ad\u08ae\3\2\2\2\u08ae\u08b2\3\2\2\2\u08af"+
		"\u08b0\7\u0091\2\2\u08b0\u08b1\7\u01fa\2\2\u08b1\u08b3\t\r\2\2\u08b2\u08af"+
		"\3\2\2\2\u08b2\u08b3\3\2\2\2\u08b3\u08b4\3\2\2\2\u08b4\u08b5\7\u0237\2"+
		"\2\u08b5\u08ba\5\u01f2\u00fa\2\u08b6\u08b7\7\u03d8\2\2\u08b7\u08b8\5\u022c"+
		"\u0117\2\u08b8\u08b9\7\u03d9\2\2\u08b9\u08bb\3\2\2\2\u08ba\u08b6\3\2\2"+
		"\2\u08ba\u08bb\3\2\2\2\u08bb\u08bc\3\2\2\2\u08bc\u08bd\7\r\2\2\u08bd\u08c4"+
		"\5\u00b4[\2\u08be\u08c0\7\u00b0\2\2\u08bf\u08c1\t\16\2\2\u08c0\u08bf\3"+
		"\2\2\2\u08c0\u08c1\3\2\2\2\u08c1\u08c2\3\2\2\2\u08c2\u08c3\7\31\2\2\u08c3"+
		"\u08c5\7n\2\2\u08c4\u08be\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u0085\3\2"+
		"\2\2\u08c6\u08cd\5^\60\2\u08c7\u08c9\7\u03da\2\2\u08c8\u08c7\3\2\2\2\u08c8"+
		"\u08c9\3\2\2\2\u08c9\u08ca\3\2\2\2\u08ca\u08cc\5^\60\2\u08cb\u08c8\3\2"+
		"\2\2\u08cc\u08cf\3\2\2\2\u08cd\u08cb\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce"+
		"\u0a2d\3\2\2\2\u08cf\u08cd\3\2\2\2\u08d0\u08d2\7\7\2\2\u08d1\u08d3\7\33"+
		"\2\2\u08d2\u08d1\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4"+
		"\u08d5\5\u020c\u0107\2\u08d5\u08d9\5P)\2\u08d6\u08da\7\u0161\2\2\u08d7"+
		"\u08d8\7\u0107\2\2\u08d8\u08da\5\u020c\u0107\2\u08d9\u08d6\3\2\2\2\u08d9"+
		"\u08d7\3\2\2\2\u08d9\u08da\3\2\2\2\u08da\u0a2d\3\2\2\2\u08db\u08dd\7\7"+
		"\2\2\u08dc\u08de\7\33\2\2\u08dd\u08dc\3\2\2\2\u08dd\u08de\3\2\2\2\u08de"+
		"\u08df\3\2\2\2\u08df\u08e0\7\u03d8\2\2\u08e0\u08e1\5\u020c\u0107\2\u08e1"+
		"\u08e8\5P)\2\u08e2\u08e3\7\u03da\2\2\u08e3\u08e4\5\u020c\u0107\2\u08e4"+
		"\u08e5\5P)\2\u08e5\u08e7\3\2\2\2\u08e6\u08e2\3\2\2\2\u08e7\u08ea\3\2\2"+
		"\2\u08e8\u08e6\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9\u08eb\3\2\2\2\u08ea\u08e8"+
		"\3\2\2\2\u08eb\u08ec\7\u03d9\2\2\u08ec\u0a2d\3\2\2\2\u08ed\u08ee\7\7\2"+
		"\2\u08ee\u08f0\t\24\2\2\u08ef\u08f1\5\u020c\u0107\2\u08f0\u08ef\3\2\2"+
		"\2\u08f0\u08f1\3\2\2\2\u08f1\u08f3\3\2\2\2\u08f2\u08f4\5@!\2\u08f3\u08f2"+
		"\3\2\2\2\u08f3\u08f4\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f9\5\u0230\u0119"+
		"\2\u08f6\u08f8\5B\"\2\u08f7\u08f6\3\2\2\2\u08f8\u08fb\3\2\2\2\u08f9\u08f7"+
		"\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa\u0a2d\3\2\2\2\u08fb\u08f9\3\2\2\2\u08fc"+
		"\u0901\7\7\2\2\u08fd\u08ff\7\35\2\2\u08fe\u0900\5\u020c\u0107\2\u08ff"+
		"\u08fe\3\2\2\2\u08ff\u0900\3\2\2\2\u0900\u0902\3\2\2\2\u0901\u08fd\3\2"+
		"\2\2\u0901\u0902\3\2\2\2\u0902\u0903\3\2\2\2\u0903\u0904\7v\2\2\u0904"+
		"\u0906\7T\2\2\u0905\u0907\5\u020c\u0107\2\u0906\u0905\3\2\2\2\u0906\u0907"+
		"\3\2\2\2\u0907\u0909\3\2\2\2\u0908\u090a\5@!\2\u0909\u0908\3\2\2\2\u0909"+
		"\u090a\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u090f\5\u0230\u0119\2\u090c\u090e"+
		"\5B\"\2\u090d\u090c\3\2\2\2\u090e\u0911\3\2\2\2\u090f\u090d\3\2\2\2\u090f"+
		"\u0910\3\2\2\2\u0910\u0a2d\3\2\2\2\u0911\u090f\3\2\2\2\u0912\u0917\7\7"+
		"\2\2\u0913\u0915\7\35\2\2\u0914\u0916\5\u020c\u0107\2\u0915\u0914\3\2"+
		"\2\2\u0915\u0916\3\2\2\2\u0916\u0918\3\2\2\2\u0917\u0913\3\2\2\2\u0917"+
		"\u0918\3\2\2\2\u0918\u0919\3\2\2\2\u0919\u091b\7\u00a5\2\2\u091a\u091c"+
		"\t\24\2\2\u091b\u091a\3\2\2\2\u091b\u091c\3\2\2\2\u091c\u091e\3\2\2\2"+
		"\u091d\u091f\5\u020c\u0107\2\u091e\u091d\3\2\2\2\u091e\u091f\3\2\2\2\u091f"+
		"\u0921\3\2\2\2\u0920\u0922\5@!\2\u0921\u0920\3\2\2\2\u0921\u0922\3\2\2"+
		"\2\u0922\u0923\3\2\2\2\u0923\u0927\5\u0230\u0119\2\u0924\u0926\5B\"\2"+
		"\u0925\u0924\3\2\2\2\u0926\u0929\3\2\2\2\u0927\u0925\3\2\2\2\u0927\u0928"+
		"\3\2\2\2\u0928\u0a2d\3\2\2\2\u0929\u0927\3\2\2\2\u092a\u092b\7\7\2\2\u092b"+
		"\u092d\t\26\2\2\u092c\u092e\t\24\2\2\u092d\u092c\3\2\2\2\u092d\u092e\3"+
		"\2\2\2\u092e\u0930\3\2\2\2\u092f\u0931\5\u020c\u0107\2\u0930\u092f\3\2"+
		"\2\2\u0930\u0931\3\2\2\2\u0931\u0932\3\2\2\2\u0932\u0936\5\u0230\u0119"+
		"\2\u0933\u0935\5B\"\2\u0934\u0933\3\2\2\2\u0935\u0938\3\2\2\2\u0936\u0934"+
		"\3\2\2\2\u0936\u0937\3\2\2\2\u0937\u0a2d\3\2\2\2\u0938\u0936\3\2\2\2\u0939"+
		"\u093e\7\7\2\2\u093a\u093c\7\35\2\2\u093b\u093d\5\u020c\u0107\2\u093c"+
		"\u093b\3\2\2\2\u093c\u093d\3\2\2\2\u093d\u093f\3\2\2\2\u093e\u093a\3\2"+
		"\2\2\u093e\u093f\3\2\2\2\u093f\u0940\3\2\2\2\u0940\u0941\7>\2\2\u0941"+
		"\u0943\7T\2\2\u0942\u0944\5\u020c\u0107\2\u0943\u0942\3\2\2\2\u0943\u0944"+
		"\3\2\2\2\u0944\u0945\3\2\2\2\u0945\u0946\5\u0230\u0119\2\u0946\u0947\5"+
		"V,\2\u0947\u0a2d\3\2\2\2\u0948\u094d\7\7\2\2\u0949\u094b\7\35\2\2\u094a"+
		"\u094c\5\u020c\u0107\2\u094b\u094a\3\2\2\2\u094b\u094c\3\2\2\2\u094c\u094e"+
		"\3\2\2\2\u094d\u0949\3\2\2\2\u094d\u094e\3\2\2\2\u094e\u094f\3\2\2\2\u094f"+
		"\u0950\7\31\2\2\u0950\u0951\7\u03d8\2\2\u0951\u0952\5\u025a\u012e\2\u0952"+
		"\u0953\7\u03d9\2\2\u0953\u0a2d\3\2\2\2\u0954\u0956\7\u0109\2\2\u0955\u0957"+
		"\7\u03cf\2\2\u0956\u0955\3\2\2\2\u0956\u0957\3\2\2\2\u0957\u0958\3\2\2"+
		"\2\u0958\u0a2d\t\5\2\2\u0959\u095b\7\t\2\2\u095a\u095c\7\33\2\2\u095b"+
		"\u095a\3\2\2\2\u095b\u095c\3\2\2\2\u095c\u095d\3\2\2\2\u095d\u0963\5\u020c"+
		"\u0107\2\u095e\u095f\7\u008c\2\2\u095f\u0960\7(\2\2\u0960\u0964\5\u023c"+
		"\u011f\2\u0961\u0962\7\61\2\2\u0962\u0964\7(\2\2\u0963\u095e\3\2\2\2\u0963"+
		"\u0961\3\2\2\2\u0964\u0a2d\3\2\2\2\u0965\u0967\7\27\2\2\u0966\u0968\7"+
		"\33\2\2\u0967\u0966\3\2\2\2\u0967\u0968\3\2\2\2\u0968\u0969\3\2\2\2\u0969"+
		"\u096a\5\u020c\u0107\2\u096a\u096b\5\u020c\u0107\2\u096b\u096f\5P)\2\u096c"+
		"\u0970\7\u0161\2\2\u096d\u096e\7\u0107\2\2\u096e\u0970\5\u020c\u0107\2"+
		"\u096f\u096c\3\2\2\2\u096f\u096d\3\2\2\2\u096f\u0970\3\2\2\2\u0970\u0a2d"+
		"\3\2\2\2\u0971\u0972\7\177\2\2\u0972\u0973\7\33\2\2\u0973\u0974\5\u020c"+
		"\u0107\2\u0974\u0975\7\u009f\2\2\u0975\u0976\5\u020c\u0107\2\u0976\u0a2d"+
		"\3\2\2\2\u0977\u0979\7_\2\2\u0978\u097a\7\u03cf\2\2\u0979\u0978\3\2\2"+
		"\2\u0979\u097a\3\2\2\2\u097a\u097b\3\2\2\2\u097b\u0a2d\t\6\2\2\u097c\u097e"+
		"\7\u01ae\2\2\u097d\u097f\7\33\2\2\u097e\u097d\3\2\2\2\u097e\u097f\3\2"+
		"\2\2\u097f\u0980\3\2\2\2\u0980\u0981\5\u020c\u0107\2\u0981\u0985\5P)\2"+
		"\u0982\u0986\7\u0161\2\2\u0983\u0984\7\u0107\2\2\u0984\u0986\5\u020c\u0107"+
		"\2\u0985\u0982\3\2\2\2\u0985\u0983\3\2\2\2\u0985\u0986\3\2\2\2\u0986\u0a2d"+
		"\3\2\2\2\u0987\u0989\7\61\2\2\u0988\u098a\7\33\2\2\u0989\u0988\3\2\2\2"+
		"\u0989\u098a\3\2\2\2\u098a\u098b\3\2\2\2\u098b\u098d\5\u020c\u0107\2\u098c"+
		"\u098e\7\u0084\2\2\u098d\u098c\3\2\2\2\u098d\u098e\3\2\2\2\u098e\u0a2d"+
		"\3\2\2\2\u098f\u0990\7\61\2\2\u0990\u0991\7v\2\2\u0991\u0a2d\7T\2\2\u0992"+
		"\u0993\7\177\2\2\u0993\u0994\t\24\2\2\u0994\u0995\5\u020c\u0107\2\u0995"+
		"\u0996\7\u009f\2\2\u0996\u0997\5\u020c\u0107\2\u0997\u0a2d\3\2\2\2\u0998"+
		"\u0999\7\61\2\2\u0999\u099a\t\24\2\2\u099a\u0a2d\5\u020c\u0107\2\u099b"+
		"\u099c\7\61\2\2\u099c\u099d\7>\2\2\u099d\u099e\7T\2\2\u099e\u0a2d\5\u020c"+
		"\u0107\2\u099f\u09a0\7\u0142\2\2\u09a0\u0a2d\7U\2\2\u09a1\u09a2\7\u0149"+
		"\2\2\u09a2\u0a2d\7U\2\2\u09a3\u09a5\7\177\2\2\u09a4\u09a6\t\37\2\2\u09a5"+
		"\u09a4\3\2\2\2\u09a5\u09a6\3\2\2\2\u09a6\u09a9\3\2\2\2\u09a7\u09aa\5\u020c"+
		"\u0107\2\u09a8\u09aa\5\u01f2\u00fa\2\u09a9\u09a7\3\2\2\2\u09a9\u09a8\3"+
		"\2\2\2\u09aa\u0a2d\3\2\2\2\u09ab\u09ac\7q\2\2\u09ac\u09ad\7\22\2\2\u09ad"+
		"\u0a2d\5\u022c\u0117\2\u09ae\u09af\7\37\2\2\u09af\u09b0\7\u009f\2\2\u09b0"+
		"\u09b1\7\30\2\2\u09b1\u09b2\7\u008c\2\2\u09b2\u09b5\5\u01fe\u0100\2\u09b3"+
		"\u09b4\7\32\2\2\u09b4\u09b6\5\u0200\u0101\2\u09b5\u09b3\3\2\2\2\u09b5"+
		"\u09b6\3\2\2\2\u09b6\u0a2d\3\2\2\2\u09b7\u09b9\7(\2\2\u09b8\u09b7\3\2"+
		"\2\2\u09b8\u09b9\3\2\2\2\u09b9\u09ba\3\2\2\2\u09ba\u09bb\7\30\2\2\u09bb"+
		"\u09bc\7\u008c\2\2\u09bc\u09bd\7\u03cf\2\2\u09bd\u09c1\5\u01fe\u0100\2"+
		"\u09be\u09bf\7\32\2\2\u09bf\u09c0\7\u03cf\2\2\u09c0\u09c2\5\u0200\u0101"+
		"\2\u09c1\u09be\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u0a2d\3\2\2\2\u09c3\u09c4"+
		"\7\u0143\2\2\u09c4\u0a2d\7\u0222\2\2\u09c5\u09c6\7\u0173\2\2\u09c6\u0a2d"+
		"\7\u0222\2\2\u09c7\u0a2d\7=\2\2\u09c8\u09c9\t \2\2\u09c9\u0a2d\7\u0234"+
		"\2\2\u09ca\u09cb\7\7\2\2\u09cb\u09cc\7u\2\2\u09cc\u09cd\7\u03d8\2\2\u09cd"+
		"\u09d2\5h\65\2\u09ce\u09cf\7\u03da\2\2\u09cf\u09d1\5h\65\2\u09d0\u09ce"+
		"\3\2\2\2\u09d1\u09d4\3\2\2\2\u09d2\u09d0\3\2\2\2\u09d2\u09d3\3\2\2\2\u09d3"+
		"\u09d5\3\2\2\2\u09d4\u09d2\3\2\2\2\u09d5\u09d6\7\u03d9\2\2\u09d6\u0a2d"+
		"\3\2\2\2\u09d7\u09d8\7\61\2\2\u09d8\u09d9\7u\2\2\u09d9\u0a2d\5\u022c\u0117"+
		"\2\u09da\u09db\7\u0143\2\2\u09db\u09de\7u\2\2\u09dc\u09df\5\u022c\u0117"+
		"\2\u09dd\u09df\7\b\2\2\u09de\u09dc\3\2\2\2\u09de\u09dd\3\2\2\2\u09df\u09e0"+
		"\3\2\2\2\u09e0\u0a2d\7\u0222\2\2\u09e1\u09e2\7\u0173\2\2\u09e2\u09e5\7"+
		"u\2\2\u09e3\u09e6\5\u022c\u0117\2\u09e4\u09e6\7\b\2\2\u09e5\u09e3\3\2"+
		"\2\2\u09e5\u09e4\3\2\2\2\u09e6\u09e7\3\2\2\2\u09e7\u0a2d\7\u0222\2\2\u09e8"+
		"\u09e9\7\u0229\2\2\u09e9\u09ec\7u\2\2\u09ea\u09ed\5\u022c\u0117\2\u09eb"+
		"\u09ed\7\b\2\2\u09ec\u09ea\3\2\2\2\u09ec\u09eb\3\2\2\2\u09ed\u0a2d\3\2"+
		"\2\2\u09ee\u09ef\7\u0123\2\2\u09ef\u09f0\7u\2\2\u09f0\u0a2d\5\u0212\u010a"+
		"\2\u09f1\u09f2\7\u01e4\2\2\u09f2\u09f3\7u\2\2\u09f3\u09f4\5\u022c\u0117"+
		"\2\u09f4\u09f5\7P\2\2\u09f5\u09f6\7\u03d8\2\2\u09f6\u09fb\5h\65\2\u09f7"+
		"\u09f8\7\u03da\2\2\u09f8\u09fa\5h\65\2\u09f9\u09f7\3\2\2\2\u09fa\u09fd"+
		"\3\2\2\2\u09fb\u09f9\3\2\2\2\u09fb\u09fc\3\2\2\2\u09fc\u09fe\3\2\2\2\u09fd"+
		"\u09fb\3\2\2\2\u09fe\u09ff\7\u03d9\2\2\u09ff\u0a2d\3\2\2\2\u0a00\u0a01"+
		"\7\u0156\2\2\u0a01\u0a02\7u\2\2\u0a02\u0a03\5\u020c\u0107\2\u0a03\u0a04"+
		"\7\u00b0\2\2\u0a04\u0a05\7\u009c\2\2\u0a05\u0a08\5\u01f4\u00fb\2\u0a06"+
		"\u0a07\t \2\2\u0a07\u0a09\7\u0234\2\2\u0a08\u0a06\3\2\2\2\u0a08\u0a09"+
		"\3\2\2\2\u0a09\u0a2d\3\2\2\2\u0a0a\u0a0b\7\13\2\2\u0a0b\u0a0e\7u\2\2\u0a0c"+
		"\u0a0f\5\u022c\u0117\2\u0a0d\u0a0f\7\b\2\2\u0a0e\u0a0c\3\2\2\2\u0a0e\u0a0d"+
		"\3\2\2\2\u0a0f\u0a2d\3\2\2\2\u0a10\u0a11\7\31\2\2\u0a11\u0a14\7u\2\2\u0a12"+
		"\u0a15\5\u022c\u0117\2\u0a13\u0a15\7\b\2\2\u0a14\u0a12\3\2\2\2\u0a14\u0a13"+
		"\3\2\2\2\u0a15\u0a2d\3\2\2\2\u0a16\u0a17\7m\2\2\u0a17\u0a1a\7u\2\2\u0a18"+
		"\u0a1b\5\u022c\u0117\2\u0a19\u0a1b\7\b\2\2\u0a1a\u0a18\3\2\2\2\u0a1a\u0a19"+
		"\3\2\2\2\u0a1b\u0a2d\3\2\2\2\u0a1c\u0a1d\7\u01db\2\2\u0a1d\u0a20\7u\2"+
		"\2\u0a1e\u0a21\5\u022c\u0117\2\u0a1f\u0a21\7\b\2\2\u0a20\u0a1e\3\2\2\2"+
		"\u0a20\u0a1f\3\2\2\2\u0a21\u0a2d\3\2\2\2\u0a22\u0a23\7\u01e5\2\2\u0a23"+
		"\u0a26\7u\2\2\u0a24\u0a27\5\u022c\u0117\2\u0a25\u0a27\7\b\2\2\u0a26\u0a24"+
		"\3\2\2\2\u0a26\u0a25\3\2\2\2\u0a27\u0a2d\3\2\2\2\u0a28\u0a29\7\u01e3\2"+
		"\2\u0a29\u0a2d\7\u01c9\2\2\u0a2a\u0a2b\7\u0230\2\2\u0a2b\u0a2d\7\u01c9"+
		"\2\2\u0a2c\u08c6\3\2\2\2\u0a2c\u08d0\3\2\2\2\u0a2c\u08db\3\2\2\2\u0a2c"+
		"\u08ed\3\2\2\2\u0a2c\u08fc\3\2\2\2\u0a2c\u0912\3\2\2\2\u0a2c\u092a\3\2"+
		"\2\2\u0a2c\u0939\3\2\2\2\u0a2c\u0948\3\2\2\2\u0a2c\u0954\3\2\2\2\u0a2c"+
		"\u0959\3\2\2\2\u0a2c\u0965\3\2\2\2\u0a2c\u0971\3\2\2\2\u0a2c\u0977\3\2"+
		"\2\2\u0a2c\u097c\3\2\2\2\u0a2c\u0987\3\2\2\2\u0a2c\u098f\3\2\2\2\u0a2c"+
		"\u0992\3\2\2\2\u0a2c\u0998\3\2\2\2\u0a2c\u099b\3\2\2\2\u0a2c\u099f\3\2"+
		"\2\2\u0a2c\u09a1\3\2\2\2\u0a2c\u09a3\3\2\2\2\u0a2c\u09ab\3\2\2\2\u0a2c"+
		"\u09ae\3\2\2\2\u0a2c\u09b8\3\2\2\2\u0a2c\u09c3\3\2\2\2\u0a2c\u09c5\3\2"+
		"\2\2\u0a2c\u09c7\3\2\2\2\u0a2c\u09c8\3\2\2\2\u0a2c\u09ca\3\2\2\2\u0a2c"+
		"\u09d7\3\2\2\2\u0a2c\u09da\3\2\2\2\u0a2c\u09e1\3\2\2\2\u0a2c\u09e8\3\2"+
		"\2\2\u0a2c\u09ee\3\2\2\2\u0a2c\u09f1\3\2\2\2\u0a2c\u0a00\3\2\2\2\u0a2c"+
		"\u0a0a\3\2\2\2\u0a2c\u0a10\3\2\2\2\u0a2c\u0a16\3\2\2\2\u0a2c\u0a1c\3\2"+
		"\2\2\u0a2c\u0a22\3\2\2\2\u0a2c\u0a28\3\2\2\2\u0a2c\u0a2a\3\2\2\2\u0a2d"+
		"\u0087\3\2\2\2\u0a2e\u0a2f\7\61\2\2\u0a2f\u0a31\t\2\2\2\u0a30\u0a32\5"+
		"\u0242\u0122\2\u0a31\u0a30\3\2\2\2\u0a31\u0a32\3\2\2\2\u0a32\u0a33\3\2"+
		"\2\2\u0a33\u0a34\5\u020c\u0107\2\u0a34\u0089\3\2\2\2\u0a35\u0a36\7\61"+
		"\2\2\u0a36\u0a38\7\u0153\2\2\u0a37\u0a39\5\u0242\u0122\2\u0a38\u0a37\3"+
		"\2\2\2\u0a38\u0a39\3\2\2\2\u0a39\u0a3a\3\2\2\2\u0a3a\u0a3b\5\u01f2\u00fa"+
		"\2\u0a3b\u008b\3\2\2\2\u0a3c\u0a3d\7\61\2\2\u0a3d\u0a3f\7J\2\2\u0a3e\u0a40"+
		"\t\3\2\2\u0a3f\u0a3e\3\2\2\2\u0a3f\u0a40\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41"+
		"\u0a42\5\u020c\u0107\2\u0a42\u0a43\7l\2\2\u0a43\u0a50\5\u01f4\u00fb\2"+
		"\u0a44\u0a46\7\u0109\2\2\u0a45\u0a47\7\u03cf\2\2\u0a46\u0a45\3\2\2\2\u0a46"+
		"\u0a47\3\2\2\2\u0a47\u0a48\3\2\2\2\u0a48\u0a4f\t\5\2\2\u0a49\u0a4b\7_"+
		"\2\2\u0a4a\u0a4c\7\u03cf\2\2\u0a4b\u0a4a\3\2\2\2\u0a4b\u0a4c\3\2\2\2\u0a4c"+
		"\u0a4d\3\2\2\2\u0a4d\u0a4f\t\6\2\2\u0a4e\u0a44\3\2\2\2\u0a4e\u0a49\3\2"+
		"\2\2\u0a4f\u0a52\3\2\2\2\u0a50\u0a4e\3\2\2\2\u0a50\u0a51\3\2\2\2\u0a51"+
		"\u008d\3\2\2\2\u0a52\u0a50\3\2\2\2\u0a53\u0a54\7\61\2\2\u0a54\u0a55\7"+
		"\u018a\2\2\u0a55\u0a56\7D\2\2\u0a56\u0a57\5\u020c\u0107\2\u0a57\u0a58"+
		"\7\u014d\2\2\u0a58\u0a59\7\u03cf\2\2\u0a59\u0a5a\5\u0202\u0102\2\u0a5a"+
		"\u008f\3\2\2\2\u0a5b\u0a5c\7\61\2\2\u0a5c\u0a5e\7w\2\2\u0a5d\u0a5f\5\u0242"+
		"\u0122\2\u0a5e\u0a5d\3\2\2\2\u0a5e\u0a5f\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60"+
		"\u0a61\5\u01f2\u00fa\2\u0a61\u0091\3\2\2\2\u0a62\u0a63\7\61\2\2\u0a63"+
		"\u0a65\7\u0167\2\2\u0a64\u0a66\5\u0242\u0122\2\u0a65\u0a64\3\2\2\2\u0a65"+
		"\u0a66\3\2\2\2\u0a66\u0a67\3\2\2\2\u0a67\u0a68\5\u01f2\u00fa\2\u0a68\u0093"+
		"\3\2\2\2\u0a69\u0a6a\7\61\2\2\u0a6a\u0a6c\7\u01fb\2\2\u0a6b\u0a6d\5\u0242"+
		"\u0122\2\u0a6c\u0a6b\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d\u0a6e\3\2\2\2\u0a6e"+
		"\u0a6f\5\u020c\u0107\2\u0a6f\u0095\3\2\2\2\u0a70\u0a72\7\61\2\2\u0a71"+
		"\u0a73\7\u0223\2\2\u0a72\u0a71\3\2\2\2\u0a72\u0a73\3\2\2\2\u0a73\u0a74"+
		"\3\2\2\2\u0a74\u0a76\7\u009c\2\2\u0a75\u0a77\5\u0242\u0122\2\u0a76\u0a75"+
		"\3\2\2\2\u0a76\u0a77\3\2\2\2\u0a77\u0a78\3\2\2\2\u0a78\u0a7a\5\u022e\u0118"+
		"\2\u0a79\u0a7b\t!\2\2\u0a7a\u0a79\3\2\2\2\u0a7a\u0a7b\3\2\2\2\u0a7b\u0097"+
		"\3\2\2\2\u0a7c\u0a7d\7\61\2\2\u0a7d\u0a7e\7\u0222\2\2\u0a7e\u0a84\5\u020c"+
		"\u0107\2\u0a7f\u0a81\7\u014d\2\2\u0a80\u0a82\7\u03cf\2\2\u0a81\u0a80\3"+
		"\2\2\2\u0a81\u0a82\3\2\2\2\u0a82\u0a83\3\2\2\2\u0a83\u0a85\5\u0202\u0102"+
		"\2\u0a84\u0a7f\3\2\2\2\u0a84\u0a85\3\2\2\2\u0a85\u0099\3\2\2\2\u0a86\u0a87"+
		"\7\61\2\2\u0a87\u0a89\7\u00a1\2\2\u0a88\u0a8a\5\u0242\u0122\2\u0a89\u0a88"+
		"\3\2\2\2\u0a89\u0a8a\3\2\2\2\u0a8a\u0a8b\3\2\2\2\u0a8b\u0a8c\5\u01f2\u00fa"+
		"\2\u0a8c\u009b\3\2\2\2\u0a8d\u0a8e\7\61\2\2\u0a8e\u0a90\7\u0237\2\2\u0a8f"+
		"\u0a91\5\u0242\u0122\2\u0a90\u0a8f\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a92"+
		"\3\2\2\2\u0a92\u0a97\5\u01f2\u00fa\2\u0a93\u0a94\7\u03da\2\2\u0a94\u0a96"+
		"\5\u01f2\u00fa\2\u0a95\u0a93\3\2\2\2\u0a96\u0a99\3\2\2\2\u0a97\u0a95\3"+
		"\2\2\2\u0a97\u0a98\3\2\2\2\u0a98\u0a9b\3\2\2\2\u0a99\u0a97\3\2\2\2\u0a9a"+
		"\u0a9c\t!\2\2\u0a9b\u0a9a\3\2\2\2\u0a9b\u0a9c\3\2\2\2\u0a9c\u009d\3\2"+
		"\2\2\u0a9d\u0a9e\7\177\2\2\u0a9e\u0a9f\7\u009c\2\2\u0a9f\u0aa4\5\u00a0"+
		"Q\2\u0aa0\u0aa1\7\u03da\2\2\u0aa1\u0aa3\5\u00a0Q\2\u0aa2\u0aa0\3\2\2\2"+
		"\u0aa3\u0aa6\3\2\2\2\u0aa4\u0aa2\3\2\2\2\u0aa4\u0aa5\3\2\2\2\u0aa5\u009f"+
		"\3\2\2\2\u0aa6\u0aa4\3\2\2\2\u0aa7\u0aa8\5\u01f4\u00fb\2\u0aa8\u0aa9\7"+
		"\u009f\2\2\u0aa9\u0aaa\5\u01f4\u00fb\2\u0aaa\u00a1\3\2\2\2\u0aab\u0aad"+
		"\7\u0229\2\2\u0aac\u0aae\7\u009c\2\2\u0aad\u0aac\3\2\2\2\u0aad\u0aae\3"+
		"\2\2\2\u0aae\u0aaf\3\2\2\2\u0aaf\u0ab0\5\u01f4\u00fb\2\u0ab0\u00a3\3\2"+
		"\2\2\u0ab1\u0ab2\7\23\2\2\u0ab2\u0ab9\5\u01f2\u00fa\2\u0ab3\u0ab6\7\u03d8"+
		"\2\2\u0ab4\u0ab7\5\u0236\u011c\2\u0ab5\u0ab7\5\u0232\u011a\2\u0ab6\u0ab4"+
		"\3\2\2\2\u0ab6\u0ab5\3\2\2\2\u0ab6\u0ab7\3\2\2\2\u0ab7\u0ab8\3\2\2\2\u0ab8"+
		"\u0aba\7\u03d9\2\2\u0ab9\u0ab3\3\2\2\2\u0ab9\u0aba\3\2\2\2\u0aba\u00a5"+
		"\3\2\2\2\u0abb\u0abe\5\u00c0a\2\u0abc\u0abe\5\u00c2b\2\u0abd\u0abb\3\2"+
		"\2\2\u0abd\u0abc\3\2\2\2\u0abe\u00a7\3\2\2\2\u0abf\u0ac0\7\u0145\2\2\u0ac0"+
		"\u0ac1\5\u0232\u011a\2\u0ac1\u00a9\3\2\2\2\u0ac2\u0ac7\5\u00c4c\2\u0ac3"+
		"\u0ac7\5\u00c6d\2\u0ac4\u0ac7\5\u00c8e\2\u0ac5\u0ac7\5\u00caf\2\u0ac6"+
		"\u0ac2\3\2\2\2\u0ac6\u0ac3\3\2\2\2\u0ac6\u0ac4\3\2\2\2\u0ac6\u0ac5\3\2"+
		"\2\2\u0ac7\u00ab\3\2\2\2\u0ac8\u0aca\7N\2\2\u0ac9\u0acb\t\"\2\2\u0aca"+
		"\u0ac9\3\2\2\2\u0aca\u0acb\3\2\2\2\u0acb\u0acd\3\2\2\2\u0acc\u0ace\7H"+
		"\2\2\u0acd\u0acc\3\2\2\2\u0acd\u0ace\3\2\2\2\u0ace\u0ad0\3\2\2\2\u0acf"+
		"\u0ad1\7P\2\2\u0ad0\u0acf\3\2\2\2\u0ad0\u0ad1\3\2\2\2\u0ad1\u0ad2\3\2"+
		"\2\2\u0ad2\u0ad9\5\u01f4\u00fb\2\u0ad3\u0ad4\7u\2\2\u0ad4\u0ad6\7\u03d8"+
		"\2\2\u0ad5\u0ad7\5\u022c\u0117\2\u0ad6\u0ad5\3\2\2\2\u0ad6\u0ad7\3\2\2"+
		"\2\u0ad7\u0ad8\3\2\2\2\u0ad8\u0ada\7\u03d9\2\2\u0ad9\u0ad3\3\2\2\2\u0ad9"+
		"\u0ada\3\2\2\2\u0ada\u0aeb\3\2\2\2\u0adb\u0adc\7\u03d8\2\2\u0adc\u0add"+
		"\5\u022c\u0117\2\u0add\u0ade\7\u03d9\2\2\u0ade\u0ae0\3\2\2\2\u0adf\u0adb"+
		"\3\2\2\2\u0adf\u0ae0\3\2\2\2\u0ae0\u0ae1\3\2\2\2\u0ae1\u0aec\5\u00b8]"+
		"\2\u0ae2\u0ae3\7\u008c\2\2\u0ae3\u0ae8\5\u00ba^\2\u0ae4\u0ae5\7\u03da"+
		"\2\2\u0ae5\u0ae7\5\u00ba^\2\u0ae6\u0ae4\3\2\2\2\u0ae7\u0aea\3\2\2\2\u0ae8"+
		"\u0ae6\3\2\2\2\u0ae8\u0ae9\3\2\2\2\u0ae9\u0aec\3\2\2\2\u0aea\u0ae8\3\2"+
		"\2\2\u0aeb\u0adf\3\2\2\2\u0aeb\u0ae2\3\2\2\2\u0aec\u0af9\3\2\2\2\u0aed"+
		"\u0aee\7l\2\2\u0aee\u0aef\7\u0147\2\2\u0aef\u0af0\7T\2\2\u0af0\u0af1\7"+
		"\u00a8\2\2\u0af1\u0af6\5\u00ba^\2\u0af2\u0af3\7\u03da\2\2\u0af3\u0af5"+
		"\5\u00ba^\2\u0af4\u0af2\3\2\2\2\u0af5\u0af8\3\2\2\2\u0af6\u0af4\3\2\2"+
		"\2\u0af6\u0af7\3\2\2\2\u0af7\u0afa\3\2\2\2\u0af8\u0af6\3\2\2\2\u0af9\u0aed"+
		"\3\2\2\2\u0af9\u0afa\3\2\2\2\u0afa\u00ad\3\2\2\2\u0afb\u0afc\7^\2\2\u0afc"+
		"\u0afe\7\u013a\2\2\u0afd\u0aff\t#\2\2\u0afe\u0afd\3\2\2\2\u0afe\u0aff"+
		"\3\2\2\2\u0aff\u0b01\3\2\2\2\u0b00\u0b02\7\u0189\2\2\u0b01\u0b00\3\2\2"+
		"\2\u0b01\u0b02\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u0b04\7K\2\2\u0b04\u0b06"+
		"\7\u03e7\2\2\u0b05\u0b07\t\b\2\2\u0b06\u0b05\3\2\2\2\u0b06\u0b07\3\2\2"+
		"\2\u0b07\u0b08\3\2\2\2\u0b08\u0b09\7P\2\2\u0b09\u0b0a\7\u009c\2\2\u0b0a"+
		"\u0b10\5\u01f4\u00fb\2\u0b0b\u0b0c\7u\2\2\u0b0c\u0b0d\7\u03d8\2\2\u0b0d"+
		"\u0b0e\5\u022c\u0117\2\u0b0e\u0b0f\7\u03d9\2\2\u0b0f\u0b11\3\2\2\2\u0b10"+
		"\u0b0b\3\2\2\2\u0b10\u0b11\3\2\2\2\u0b11\u0b15\3\2\2\2\u0b12\u0b13\7\30"+
		"\2\2\u0b13\u0b14\7\u008c\2\2\u0b14\u0b16\5\u01fe\u0100\2\u0b15\u0b12\3"+
		"\2\2\2\u0b15\u0b16\3\2\2\2\u0b16\u0b1d\3\2\2\2\u0b17\u0b19\t$\2\2\u0b18"+
		"\u0b1a\5\u00f4{\2\u0b19\u0b18\3\2\2\2\u0b1a\u0b1b\3\2\2\2\u0b1b\u0b19"+
		"\3\2\2\2\u0b1b\u0b1c\3\2\2\2\u0b1c\u0b1e\3\2\2\2\u0b1d\u0b17\3\2\2\2\u0b1d"+
		"\u0b1e\3\2\2\2\u0b1e\u0b25\3\2\2\2\u0b1f\u0b21\7]\2\2\u0b20\u0b22\5\u00f6"+
		"|\2\u0b21\u0b20\3\2\2\2\u0b22\u0b23\3\2\2\2\u0b23\u0b21\3\2\2\2\u0b23"+
		"\u0b24\3\2\2\2\u0b24\u0b26\3\2\2\2\u0b25\u0b1f\3\2\2\2\u0b25\u0b26\3\2"+
		"\2\2\u0b26\u0b2b\3\2\2\2\u0b27\u0b28\7H\2\2\u0b28\u0b29\5\u0212\u010a"+
		"\2\u0b29\u0b2a\t%\2\2\u0b2a\u0b2c\3\2\2\2\u0b2b\u0b27\3\2\2\2\u0b2b\u0b2c"+
		"\3\2\2\2\u0b2c\u0b38\3\2\2\2\u0b2d\u0b2e\7\u03d8\2\2\u0b2e\u0b33\5\u00bc"+
		"_\2\u0b2f\u0b30\7\u03da\2\2\u0b30\u0b32\5\u00bc_\2\u0b31\u0b2f\3\2\2\2"+
		"\u0b32\u0b35\3\2\2\2\u0b33\u0b31\3\2\2\2\u0b33\u0b34\3\2\2\2\u0b34\u0b36"+
		"\3\2\2\2\u0b35\u0b33\3\2\2\2\u0b36\u0b37\7\u03d9\2\2\u0b37\u0b39\3\2\2"+
		"\2\u0b38\u0b2d\3\2\2\2\u0b38\u0b39\3\2\2\2\u0b39\u0b43\3\2\2\2\u0b3a\u0b3b"+
		"\7\u008c\2\2\u0b3b\u0b40\5\u00ba^\2\u0b3c\u0b3d\7\u03da\2\2\u0b3d\u0b3f"+
		"\5\u00ba^\2\u0b3e\u0b3c\3\2\2\2\u0b3f\u0b42\3\2\2\2\u0b40\u0b3e\3\2\2"+
		"\2\u0b40\u0b41\3\2\2\2\u0b41\u0b44\3\2\2\2\u0b42\u0b40\3\2\2\2\u0b43\u0b3a"+
		"\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44\u00af\3\2\2\2\u0b45\u0b46\7^\2\2\u0b46"+
		"\u0b48\7\u0241\2\2\u0b47\u0b49\t#\2\2\u0b48\u0b47\3\2\2\2\u0b48\u0b49"+
		"\3\2\2\2\u0b49\u0b4b\3\2\2\2\u0b4a\u0b4c\7\u0189\2\2\u0b4b\u0b4a\3\2\2"+
		"\2\u0b4b\u0b4c\3\2\2\2\u0b4c\u0b4d\3\2\2\2\u0b4d\u0b4e\7K\2\2\u0b4e\u0b50"+
		"\7\u03e7\2\2\u0b4f\u0b51\t\b\2\2\u0b50\u0b4f\3\2\2\2\u0b50\u0b51\3\2\2"+
		"\2\u0b51\u0b52\3\2\2\2\u0b52\u0b53\7P\2\2\u0b53\u0b54\7\u009c\2\2\u0b54"+
		"\u0b58\5\u01f4\u00fb\2\u0b55\u0b56\7\30\2\2\u0b56\u0b57\7\u008c\2\2\u0b57"+
		"\u0b59\5\u01fe\u0100\2\u0b58\u0b55\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59\u0b60"+
		"\3\2\2\2\u0b5a\u0b5b\7\u01f6\2\2\u0b5b\u0b5c\7\u0171\2\2\u0b5c\u0b5d\7"+
		"\22\2\2\u0b5d\u0b5e\7\u03d1\2\2\u0b5e\u0b5f\7\u03e7\2\2\u0b5f\u0b61\7"+
		"\u03d0\2\2\u0b60\u0b5a\3\2\2\2\u0b60\u0b61\3\2\2\2\u0b61\u0b66\3\2\2\2"+
		"\u0b62\u0b63\7H\2\2\u0b63\u0b64\5\u0212\u010a\2\u0b64\u0b65\t%\2\2\u0b65"+
		"\u0b67\3\2\2\2\u0b66\u0b62\3\2\2\2\u0b66\u0b67\3\2\2\2\u0b67\u0b73\3\2"+
		"\2\2\u0b68\u0b69\7\u03d8\2\2\u0b69\u0b6e\5\u00bc_\2\u0b6a\u0b6b\7\u03da"+
		"\2\2\u0b6b\u0b6d\5\u00bc_\2\u0b6c\u0b6a\3\2\2\2\u0b6d\u0b70\3\2\2\2\u0b6e"+
		"\u0b6c\3\2\2\2\u0b6e\u0b6f\3\2\2\2\u0b6f\u0b71\3\2\2\2\u0b70\u0b6e\3\2"+
		"\2\2\u0b71\u0b72\7\u03d9\2\2\u0b72\u0b74\3\2\2\2\u0b73\u0b68\3\2\2\2\u0b73"+
		"\u0b74\3\2\2\2\u0b74\u0b7e\3\2\2\2\u0b75\u0b76\7\u008c\2\2\u0b76\u0b7b"+
		"\5\u00ba^\2\u0b77\u0b78\7\u03da\2\2\u0b78\u0b7a\5\u00ba^\2\u0b79\u0b77"+
		"\3\2\2\2\u0b7a\u0b7d\3\2\2\2\u0b7b\u0b79\3\2\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c"+
		"\u0b7f\3\2\2\2\u0b7d\u0b7b\3\2\2\2\u0b7e\u0b75\3\2\2\2\u0b7e\u0b7f\3\2"+
		"\2\2\u0b7f\u00b1\3\2\2\2\u0b80\u0b82\7\u0081\2\2\u0b81\u0b83\t&\2\2\u0b82"+
		"\u0b81\3\2\2\2\u0b82\u0b83\3\2\2\2\u0b83\u0b85\3\2\2\2\u0b84\u0b86\7P"+
		"\2\2\u0b85\u0b84\3\2\2\2\u0b85\u0b86\3\2\2\2\u0b86\u0b87\3\2\2\2\u0b87"+
		"\u0b8d\5\u01f4\u00fb\2\u0b88\u0b89\7u\2\2\u0b89\u0b8a\7\u03d8\2\2\u0b8a"+
		"\u0b8b\5\u022c\u0117\2\u0b8b\u0b8c\7\u03d9\2\2\u0b8c\u0b8e\3\2\2\2\u0b8d"+
		"\u0b88\3\2\2\2\u0b8d\u0b8e\3\2\2\2\u0b8e\u0b9f\3\2\2\2\u0b8f\u0b90\7\u03d8"+
		"\2\2\u0b90\u0b91\5\u022c\u0117\2\u0b91\u0b92\7\u03d9\2\2\u0b92\u0b94\3"+
		"\2\2\2\u0b93\u0b8f\3\2\2\2\u0b93\u0b94\3\2\2\2\u0b94\u0b95\3\2\2\2\u0b95"+
		"\u0ba0\5\u00b8]\2\u0b96\u0b97\7\u008c\2\2\u0b97\u0b9c\5\u00ba^\2\u0b98"+
		"\u0b99\7\u03da\2\2\u0b99\u0b9b\5\u00ba^\2\u0b9a\u0b98\3\2\2\2\u0b9b\u0b9e"+
		"\3\2\2\2\u0b9c\u0b9a\3\2\2\2\u0b9c\u0b9d\3\2\2\2\u0b9d\u0ba0\3\2\2\2\u0b9e"+
		"\u0b9c\3\2\2\2\u0b9f\u0b93\3\2\2\2\u0b9f\u0b96\3\2\2\2\u0ba0\u00b3\3\2"+
		"\2\2\u0ba1\u0ba3\5\u00e4s\2\u0ba2\u0ba4\5\u00be`\2\u0ba3\u0ba2\3\2\2\2"+
		"\u0ba3\u0ba4\3\2\2\2\u0ba4\u0bd9\3\2\2\2\u0ba5\u0ba7\5\u00e0q\2\u0ba6"+
		"\u0ba8\5\u00be`\2\u0ba7\u0ba6\3\2\2\2\u0ba7\u0ba8\3\2\2\2\u0ba8\u0bd9"+
		"\3\2\2\2\u0ba9\u0bab\5\u00e6t\2\u0baa\u0bac\5\u00eav\2\u0bab\u0baa\3\2"+
		"\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0bab\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae"+
		"\u0bb7\3\2\2\2\u0baf\u0bb1\7\u00a4\2\2\u0bb0\u0bb2\t\'\2\2\u0bb1\u0bb0"+
		"\3\2\2\2\u0bb1\u0bb2\3\2\2\2\u0bb2\u0bb5\3\2\2\2\u0bb3\u0bb6\5\u00e4s"+
		"\2\u0bb4\u0bb6\5\u00e0q\2\u0bb5\u0bb3\3\2\2\2\u0bb5\u0bb4\3\2\2\2\u0bb6"+
		"\u0bb8\3\2\2\2\u0bb7\u0baf\3\2\2\2\u0bb7\u0bb8\3\2\2\2\u0bb8\u0bba\3\2"+
		"\2\2\u0bb9\u0bbb\5\u00d0i\2\u0bba\u0bb9\3\2\2\2\u0bba\u0bbb\3\2\2\2\u0bbb"+
		"\u0bbd\3\2\2\2\u0bbc\u0bbe\5\u00fc\177\2\u0bbd\u0bbc\3\2\2\2\u0bbd\u0bbe"+
		"\3\2\2\2\u0bbe\u0bc0\3\2\2\2\u0bbf\u0bc1\5\u00be`\2\u0bc0\u0bbf\3\2\2"+
		"\2\u0bc0\u0bc1\3\2\2\2\u0bc1\u0bd9\3\2\2\2\u0bc2\u0bc4\5\u00e2r\2\u0bc3"+
		"\u0bc5\5\u00e8u\2\u0bc4\u0bc3\3\2\2\2\u0bc5\u0bc6\3\2\2\2\u0bc6\u0bc4"+
		"\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7\u0bcd\3\2\2\2\u0bc8\u0bca\7\u00a4\2"+
		"\2\u0bc9\u0bcb\t\'\2\2\u0bca\u0bc9\3\2\2\2\u0bca\u0bcb\3\2\2\2\u0bcb\u0bcc"+
		"\3\2\2\2\u0bcc\u0bce\5\u00e0q\2\u0bcd\u0bc8\3\2\2\2\u0bcd\u0bce\3\2\2"+
		"\2\u0bce\u0bd0\3\2\2\2\u0bcf\u0bd1\5\u00d0i\2\u0bd0\u0bcf\3\2\2\2\u0bd0"+
		"\u0bd1\3\2\2\2\u0bd1\u0bd3\3\2\2\2\u0bd2\u0bd4\5\u00fc\177\2\u0bd3\u0bd2"+
		"\3\2\2\2\u0bd3\u0bd4\3\2\2\2\u0bd4\u0bd6\3\2\2\2\u0bd5\u0bd7\5\u00be`"+
		"\2\u0bd6\u0bd5\3\2\2\2\u0bd6\u0bd7\3\2\2\2\u0bd7\u0bd9\3\2\2\2\u0bd8\u0ba1"+
		"\3\2\2\2\u0bd8\u0ba5\3\2\2\2\u0bd8\u0ba9\3\2\2\2\u0bd8\u0bc2\3\2\2\2\u0bd9"+
		"\u00b5\3\2\2\2\u0bda\u0bdd\5\u00ccg\2\u0bdb\u0bdd\5\u00ceh\2\u0bdc\u0bda"+
		"\3\2\2\2\u0bdc\u0bdb\3\2\2\2\u0bdd\u00b7\3\2\2\2\u0bde\u0bf1\5\u00b4["+
		"\2\u0bdf\u0be0\t(\2\2\u0be0\u0be2\7\u03d8\2\2\u0be1\u0be3\5\u0234\u011b"+
		"\2\u0be2\u0be1\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3\u0be4\3\2\2\2\u0be4\u0bed"+
		"\7\u03d9\2\2\u0be5\u0be6\7\u03da\2\2\u0be6\u0be8\7\u03d8\2\2\u0be7\u0be9"+
		"\5\u0234\u011b\2\u0be8\u0be7\3\2\2\2\u0be8\u0be9\3\2\2\2\u0be9\u0bea\3"+
		"\2\2\2\u0bea\u0bec\7\u03d9\2\2\u0beb\u0be5\3\2\2\2\u0bec\u0bef\3\2\2\2"+
		"\u0bed\u0beb\3\2\2\2\u0bed\u0bee\3\2\2\2\u0bee\u0bf1\3\2\2\2\u0bef\u0bed"+
		"\3\2\2\2\u0bf0\u0bde\3\2\2\2\u0bf0\u0bdf\3\2\2\2\u0bf1\u00b9\3\2\2\2\u0bf2"+
		"\u0bf3\5\u01f6\u00fc\2\u0bf3\u0bf6\7\u03cf\2\2\u0bf4\u0bf7\5\u025a\u012e"+
		"\2\u0bf5\u0bf7\7(\2\2\u0bf6\u0bf4\3\2\2\2\u0bf6\u0bf5\3\2\2\2\u0bf7\u00bb"+
		"\3\2\2\2\u0bf8\u0bfb\5\u020c\u0107\2\u0bf9\u0bfb\7\u03f2\2\2\u0bfa\u0bf8"+
		"\3\2\2\2\u0bfa\u0bf9\3\2\2\2\u0bfb\u00bd\3\2\2\2\u0bfc\u0bfd\7<\2\2\u0bfd"+
		"\u0c03\7\u00a8\2\2\u0bfe\u0bff\7_\2\2\u0bff\u0c00\7I\2\2\u0c00\u0c01\7"+
		"\u01fd\2\2\u0c01\u0c03\7\u01ad\2\2\u0c02\u0bfc\3\2\2\2\u0c02\u0bfe\3\2"+
		"\2\2\u0c03\u00bf\3\2\2\2\u0c04\u0c06\7*\2\2\u0c05\u0c07\7a\2\2\u0c06\u0c05"+
		"\3\2\2\2\u0c06\u0c07\3\2\2\2\u0c07\u0c09\3\2\2\2\u0c08\u0c0a\7\u01da\2"+
		"\2\u0c09\u0c08\3\2\2\2\u0c09\u0c0a\3\2\2\2\u0c0a\u0c0c\3\2\2\2\u0c0b\u0c0d"+
		"\7H\2\2\u0c0c\u0c0b\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d\u0c0e\3\2\2\2\u0c0e"+
		"\u0c0f\7?\2\2\u0c0f\u0c15\5\u01f4\u00fb\2\u0c10\u0c11\7u\2\2\u0c11\u0c12"+
		"\7\u03d8\2\2\u0c12\u0c13\5\u022c\u0117\2\u0c13\u0c14\7\u03d9\2\2\u0c14"+
		"\u0c16\3\2\2\2\u0c15\u0c10\3\2\2\2\u0c15\u0c16\3\2\2\2\u0c16\u0c19\3\2"+
		"\2\2\u0c17\u0c18\7\u00ae\2\2\u0c18\u0c1a\5\u025a\u012e\2\u0c19\u0c17\3"+
		"\2\2\2\u0c19\u0c1a\3\2\2\2\u0c1a\u0c1c\3\2\2\2\u0c1b\u0c1d\5\u00d0i\2"+
		"\u0c1c\u0c1b\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c20\3\2\2\2\u0c1e\u0c1f"+
		"\7[\2\2\u0c1f\u0c21\5\u00fe\u0080\2\u0c20\u0c1e\3\2\2\2\u0c20\u0c21\3"+
		"\2\2\2\u0c21\u00c1\3\2\2\2\u0c22\u0c24\7*\2\2\u0c23\u0c25\7a\2\2\u0c24"+
		"\u0c23\3\2\2\2\u0c24\u0c25\3\2\2\2\u0c25\u0c27\3\2\2\2\u0c26\u0c28\7\u01da"+
		"\2\2\u0c27\u0c26\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0c2a\3\2\2\2\u0c29"+
		"\u0c2b\7H\2\2\u0c2a\u0c29\3\2\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b\u0c53\3\2"+
		"\2\2\u0c2c\u0c2f\5\u01f4\u00fb\2\u0c2d\u0c2e\7\u03d7\2\2\u0c2e\u0c30\7"+
		"\u03c7\2\2\u0c2f\u0c2d\3\2\2\2\u0c2f\u0c30\3\2\2\2\u0c30\u0c39\3\2\2\2"+
		"\u0c31\u0c32\7\u03da\2\2\u0c32\u0c35\5\u01f4\u00fb\2\u0c33\u0c34\7\u03d7"+
		"\2\2\u0c34\u0c36\7\u03c7\2\2\u0c35\u0c33\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36"+
		"\u0c38\3\2\2\2\u0c37\u0c31\3\2\2\2\u0c38\u0c3b\3\2\2\2\u0c39\u0c37\3\2"+
		"\2\2\u0c39\u0c3a\3\2\2\2\u0c3a\u0c3c\3\2\2\2\u0c3b\u0c39\3\2\2\2\u0c3c"+
		"\u0c3d\7?\2\2\u0c3d\u0c3e\5\u00d4k\2\u0c3e\u0c54\3\2\2\2\u0c3f\u0c40\7"+
		"?\2\2\u0c40\u0c43\5\u01f4\u00fb\2\u0c41\u0c42\7\u03d7\2\2\u0c42\u0c44"+
		"\7\u03c7\2\2\u0c43\u0c41\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44\u0c4d\3\2\2"+
		"\2\u0c45\u0c46\7\u03da\2\2\u0c46\u0c49\5\u01f4\u00fb\2\u0c47\u0c48\7\u03d7"+
		"\2\2\u0c48\u0c4a\7\u03c7\2\2\u0c49\u0c47\3\2\2\2\u0c49\u0c4a\3\2\2\2\u0c4a"+
		"\u0c4c\3\2\2\2\u0c4b\u0c45\3\2\2\2\u0c4c\u0c4f\3\2\2\2\u0c4d\u0c4b\3\2"+
		"\2\2\u0c4d\u0c4e\3\2\2\2\u0c4e\u0c50\3\2\2\2\u0c4f\u0c4d\3\2\2\2\u0c50"+
		"\u0c51\7\u00ab\2\2\u0c51\u0c52\5\u00d4k\2\u0c52\u0c54\3\2\2\2\u0c53\u0c2c"+
		"\3\2\2\2\u0c53\u0c3f\3\2\2\2\u0c54\u0c57\3\2\2\2\u0c55\u0c56\7\u00ae\2"+
		"\2\u0c56\u0c58\5\u025a\u012e\2\u0c57\u0c55\3\2\2\2\u0c57\u0c58\3\2\2\2"+
		"\u0c58\u00c3\3\2\2\2\u0c59\u0c5a\7\u016c\2\2\u0c5a\u0c5b\5\u01f4\u00fb"+
		"\2\u0c5b\u0c60\7\u01c1\2\2\u0c5c\u0c5e\7\r\2\2\u0c5d\u0c5c\3\2\2\2\u0c5d"+
		"\u0c5e\3\2\2\2\u0c5e\u0c5f\3\2\2\2\u0c5f\u0c61\5\u020c\u0107\2\u0c60\u0c5d"+
		"\3\2\2\2\u0c60\u0c61\3\2\2\2\u0c61\u00c5\3\2\2\2\u0c62\u0c63\7\u016c\2"+
		"\2\u0c63\u0c64\5\u01f4\u00fb\2\u0c64\u0c65\7z\2\2\u0c65\u0c6c\5\u020c"+
		"\u0107\2\u0c66\u0c67\5\u0262\u0132\2\u0c67\u0c68\7\u03d8\2\2\u0c68\u0c69"+
		"\5\u0236\u011c\2\u0c69\u0c6a\7\u03d9\2\2\u0c6a\u0c6d\3\2\2\2\u0c6b\u0c6d"+
		"\t)\2\2\u0c6c\u0c66\3\2\2\2\u0c6c\u0c6b\3\2\2\2\u0c6d\u0c70\3\2\2\2\u0c6e"+
		"\u0c6f\7\u00ae\2\2\u0c6f\u0c71\5\u025a\u012e\2\u0c70\u0c6e\3\2\2\2\u0c70"+
		"\u0c71\3\2\2\2\u0c71\u0c74\3\2\2\2\u0c72\u0c73\7[\2\2\u0c73\u0c75\5\u00fe"+
		"\u0080\2\u0c74\u0c72\3\2\2\2\u0c74\u0c75\3\2\2\2\u0c75\u00c7\3\2\2\2\u0c76"+
		"\u0c77\7\u016c\2\2\u0c77\u0c78\5\u01f4\u00fb\2\u0c78\u0c79\7z\2\2\u0c79"+
		"\u0c7c\t*\2\2\u0c7a\u0c7b\7\u00ae\2\2\u0c7b\u0c7d\5\u025a\u012e\2\u0c7c"+
		"\u0c7a\3\2\2\2\u0c7c\u0c7d\3\2\2\2\u0c7d\u0c80\3\2\2\2\u0c7e\u0c7f\7["+
		"\2\2\u0c7f\u0c81\5\u00fe\u0080\2\u0c80\u0c7e\3\2\2\2\u0c80\u0c81\3\2\2"+
		"\2\u0c81\u00c9\3\2\2\2\u0c82\u0c83\7\u016c\2\2\u0c83\u0c84\5\u01f4\u00fb"+
		"\2\u0c84\u0c85\7\u0122\2\2\u0c85\u00cb\3\2\2\2\u0c86\u0c88\7\u00a8\2\2"+
		"\u0c87\u0c89\7a\2\2\u0c88\u0c87\3\2\2\2\u0c88\u0c89\3\2\2\2\u0c89\u0c8b"+
		"\3\2\2\2\u0c8a\u0c8c\7H\2\2\u0c8b\u0c8a\3\2\2\2\u0c8b\u0c8c\3\2\2\2\u0c8c"+
		"\u0c8d\3\2\2\2\u0c8d\u0c92\5\u01f4\u00fb\2\u0c8e\u0c90\7\r\2\2\u0c8f\u0c8e"+
		"\3\2\2\2\u0c8f\u0c90\3\2\2\2\u0c90\u0c91\3\2\2\2\u0c91\u0c93\5\u020c\u0107"+
		"\2\u0c92\u0c8f\3\2\2\2\u0c92\u0c93\3\2\2\2\u0c93\u0c94\3\2\2\2\u0c94\u0c95"+
		"\7\u008c\2\2\u0c95\u0c9a\5\u00ba^\2\u0c96\u0c97\7\u03da\2\2\u0c97\u0c99"+
		"\5\u00ba^\2\u0c98\u0c96\3\2\2\2\u0c99\u0c9c\3\2\2\2\u0c9a\u0c98\3\2\2"+
		"\2\u0c9a\u0c9b\3\2\2\2\u0c9b\u0c9f\3\2\2\2\u0c9c\u0c9a\3\2\2\2\u0c9d\u0c9e"+
		"\7\u00ae\2\2\u0c9e\u0ca0\5\u025a\u012e\2\u0c9f\u0c9d\3\2\2\2\u0c9f\u0ca0"+
		"\3\2\2\2\u0ca0\u0ca2\3\2\2\2\u0ca1\u0ca3\5\u00d0i\2\u0ca2\u0ca1\3\2\2"+
		"\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0ca5\3\2\2\2\u0ca4\u0ca6\5\u00fc\177\2\u0ca5"+
		"\u0ca4\3\2\2\2\u0ca5\u0ca6\3\2\2\2\u0ca6\u00cd\3\2\2\2\u0ca7\u0ca9\7\u00a8"+
		"\2\2\u0ca8\u0caa\7a\2\2\u0ca9\u0ca8\3\2\2\2\u0ca9\u0caa\3\2\2\2\u0caa"+
		"\u0cac\3\2\2\2\u0cab\u0cad\7H\2\2\u0cac\u0cab\3\2\2\2\u0cac\u0cad\3\2"+
		"\2\2\u0cad\u0cae\3\2\2\2\u0cae\u0caf\5\u00d4k\2\u0caf\u0cb0\7\u008c\2"+
		"\2\u0cb0\u0cb5\5\u00ba^\2\u0cb1\u0cb2\7\u03da\2\2\u0cb2\u0cb4\5\u00ba"+
		"^\2\u0cb3\u0cb1\3\2\2\2\u0cb4\u0cb7\3\2\2\2\u0cb5\u0cb3\3\2\2\2\u0cb5"+
		"\u0cb6\3\2\2\2\u0cb6\u0cba\3\2\2\2\u0cb7\u0cb5\3\2\2\2\u0cb8\u0cb9\7\u00ae"+
		"\2\2\u0cb9\u0cbb\5\u025a\u012e\2\u0cba\u0cb8\3\2\2\2\u0cba\u0cbb\3\2\2"+
		"\2\u0cbb\u00cf\3\2\2\2\u0cbc\u0cbd\7q\2\2\u0cbd\u0cbe\7\22\2\2\u0cbe\u0cc3"+
		"\5\u00d2j\2\u0cbf\u0cc0\7\u03da\2\2\u0cc0\u0cc2\5\u00d2j\2\u0cc1\u0cbf"+
		"\3\2\2\2\u0cc2\u0cc5\3\2\2\2\u0cc3\u0cc1\3\2\2\2\u0cc3\u0cc4\3\2\2\2\u0cc4"+
		"\u00d1\3\2\2\2\u0cc5\u0cc3\3\2\2\2\u0cc6\u0cc8\5\u025a\u012e\2\u0cc7\u0cc9"+
		"\t+\2\2\u0cc8\u0cc7\3\2\2\2\u0cc8\u0cc9\3\2\2\2\u0cc9\u00d3\3\2\2\2\u0cca"+
		"\u0ccf\5\u00d6l\2\u0ccb\u0ccc\7\u03da\2\2\u0ccc\u0cce\5\u00d6l\2\u0ccd"+
		"\u0ccb\3\2\2\2\u0cce\u0cd1\3\2\2\2\u0ccf\u0ccd\3\2\2\2\u0ccf\u0cd0\3\2"+
		"\2\2\u0cd0\u00d5\3\2\2\2\u0cd1\u0ccf\3\2\2\2\u0cd2\u0cd6\5\u00d8m\2\u0cd3"+
		"\u0cd5\5\u00dep\2\u0cd4\u0cd3\3\2\2\2\u0cd5\u0cd8\3\2\2\2\u0cd6\u0cd4"+
		"\3\2\2\2\u0cd6\u0cd7\3\2\2\2\u0cd7\u0ce4\3\2\2\2\u0cd8\u0cd6\3\2\2\2\u0cd9"+
		"\u0cda\7\u03d8\2\2\u0cda\u0cde\5\u00d8m\2\u0cdb\u0cdd\5\u00dep\2\u0cdc"+
		"\u0cdb\3\2\2\2\u0cdd\u0ce0\3\2\2\2\u0cde\u0cdc\3\2\2\2\u0cde\u0cdf\3\2"+
		"\2\2\u0cdf\u0ce1\3\2\2\2\u0ce0\u0cde\3\2\2\2\u0ce1\u0ce2\7\u03d9\2\2\u0ce2"+
		"\u0ce4\3\2\2\2\u0ce3\u0cd2\3\2\2\2\u0ce3\u0cd9\3\2\2\2\u0ce4\u00d7\3\2"+
		"\2\2\u0ce5\u0ceb\5\u01f4\u00fb\2\u0ce6\u0ce7\7u\2\2\u0ce7\u0ce8\7\u03d8"+
		"\2\2\u0ce8\u0ce9\5\u022c\u0117\2\u0ce9\u0cea\7\u03d9\2\2\u0cea\u0cec\3"+
		"\2\2\2\u0ceb\u0ce6\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0cf1\3\2\2\2\u0ced"+
		"\u0cef\7\r\2\2\u0cee\u0ced\3\2\2\2\u0cee\u0cef\3\2\2\2\u0cef\u0cf0\3\2"+
		"\2\2\u0cf0\u0cf2\5\u020c\u0107\2\u0cf1\u0cee\3\2\2\2\u0cf1\u0cf2\3\2\2"+
		"\2\u0cf2\u0cfb\3\2\2\2\u0cf3\u0cf8\5\u00dan\2\u0cf4\u0cf5\7\u03da\2\2"+
		"\u0cf5\u0cf7\5\u00dan\2\u0cf6\u0cf4\3\2\2\2\u0cf7\u0cfa\3\2\2\2\u0cf8"+
		"\u0cf6\3\2\2\2\u0cf8\u0cf9\3\2\2\2\u0cf9\u0cfc\3\2\2\2\u0cfa\u0cf8\3\2"+
		"\2\2\u0cfb\u0cf3\3\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0d0e\3\2\2\2\u0cfd"+
		"\u0d03\5\u00b4[\2\u0cfe\u0cff\7\u03d8\2\2\u0cff\u0d00\5\u00b4[\2\u0d00"+
		"\u0d01\7\u03d9\2\2\u0d01\u0d03\3\2\2\2\u0d02\u0cfd\3\2\2\2\u0d02\u0cfe"+
		"\3\2\2\2\u0d03\u0d05\3\2\2\2\u0d04\u0d06\7\r\2\2\u0d05\u0d04\3\2\2\2\u0d05"+
		"\u0d06\3\2\2\2\u0d06\u0d07\3\2\2\2\u0d07\u0d08\5\u020c\u0107\2\u0d08\u0d0e"+
		"\3\2\2\2\u0d09\u0d0a\7\u03d8\2\2\u0d0a\u0d0b\5\u00d4k\2\u0d0b\u0d0c\7"+
		"\u03d9\2\2\u0d0c\u0d0e\3\2\2\2\u0d0d\u0ce5\3\2\2\2\u0d0d\u0d02\3\2\2\2"+
		"\u0d0d\u0d09\3\2\2\2\u0d0e\u00d9\3\2\2\2\u0d0f\u0d10\t,\2\2\u0d10\u0d13"+
		"\t\24\2\2\u0d11\u0d12\7<\2\2\u0d12\u0d14\5\u00dco\2\u0d13\u0d11\3\2\2"+
		"\2\u0d13\u0d14\3\2\2\2\u0d14\u0d15\3\2\2\2\u0d15\u0d16\7\u03d8\2\2\u0d16"+
		"\u0d17\5\u022c\u0117\2\u0d17\u0d18\7\u03d9\2\2\u0d18\u00db\3\2\2\2\u0d19"+
		"\u0d1f\7S\2\2\u0d1a\u0d1b\7q\2\2\u0d1b\u0d1f\7\22\2\2\u0d1c\u0d1d\7D\2"+
		"\2\u0d1d\u0d1f\7\22\2\2\u0d1e\u0d19\3\2\2\2\u0d1e\u0d1a\3\2\2\2\u0d1e"+
		"\u0d1c\3\2\2\2\u0d1f\u00dd\3\2\2\2\u0d20\u0d22\t-\2\2\u0d21\u0d20\3\2"+
		"\2\2\u0d21\u0d22\3\2\2\2\u0d22\u0d23\3\2\2\2\u0d23\u0d24\7S\2\2\u0d24"+
		"\u0d2c\5\u00d8m\2\u0d25\u0d26\7l\2\2\u0d26\u0d2d\5\u025a\u012e\2\u0d27"+
		"\u0d28\7\u00ab\2\2\u0d28\u0d29\7\u03d8\2\2\u0d29\u0d2a\5\u022c\u0117\2"+
		"\u0d2a\u0d2b\7\u03d9\2\2\u0d2b\u0d2d\3\2\2\2\u0d2c\u0d25\3\2\2\2\u0d2c"+
		"\u0d27\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d4d\3\2\2\2\u0d2e\u0d2f\7\u009b"+
		"\2\2\u0d2f\u0d32\5\u00d8m\2\u0d30\u0d31\7l\2\2\u0d31\u0d33\5\u025a\u012e"+
		"\2\u0d32\u0d30\3\2\2\2\u0d32\u0d33\3\2\2\2\u0d33\u0d4d\3\2\2\2\u0d34\u0d36"+
		"\t.\2\2\u0d35\u0d37\7s\2\2\u0d36\u0d35\3\2\2\2\u0d36\u0d37\3\2\2\2\u0d37"+
		"\u0d38\3\2\2\2\u0d38\u0d39\7S\2\2\u0d39\u0d41\5\u00d8m\2\u0d3a\u0d3b\7"+
		"l\2\2\u0d3b\u0d42\5\u025a\u012e\2\u0d3c\u0d3d\7\u00ab\2\2\u0d3d\u0d3e"+
		"\7\u03d8\2\2\u0d3e\u0d3f\5\u022c\u0117\2\u0d3f\u0d40\7\u03d9\2\2\u0d40"+
		"\u0d42\3\2\2\2\u0d41\u0d3a\3\2\2\2\u0d41\u0d3c\3\2\2\2\u0d42\u0d4d\3\2"+
		"\2\2\u0d43\u0d48\7g\2\2\u0d44\u0d46\t.\2\2\u0d45\u0d47\7s\2\2\u0d46\u0d45"+
		"\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0d49\3\2\2\2\u0d48\u0d44\3\2\2\2\u0d48"+
		"\u0d49\3\2\2\2\u0d49\u0d4a\3\2\2\2\u0d4a\u0d4b\7S\2\2\u0d4b\u0d4d\5\u00d8"+
		"m\2\u0d4c\u0d21\3\2\2\2\u0d4c\u0d2e\3\2\2\2\u0d4c\u0d34\3\2\2\2\u0d4c"+
		"\u0d43\3\2\2\2\u0d4d\u00df\3\2\2\2\u0d4e\u0d4f\7\u03d8\2\2\u0d4f\u0d50"+
		"\5\u00e4s\2\u0d50\u0d51\7\u03d9\2\2\u0d51\u0d57\3\2\2\2\u0d52\u0d53\7"+
		"\u03d8\2\2\u0d53\u0d54\5\u00e0q\2\u0d54\u0d55\7\u03d9\2\2\u0d55\u0d57"+
		"\3\2\2\2\u0d56\u0d4e\3\2\2\2\u0d56\u0d52\3\2\2\2\u0d57\u00e1\3\2\2\2\u0d58"+
		"\u0d59\7\u03d8\2\2\u0d59\u0d5a\5\u00e6t\2\u0d5a\u0d5b\7\u03d9\2\2\u0d5b"+
		"\u0d61\3\2\2\2\u0d5c\u0d5d\7\u03d8\2\2\u0d5d\u0d5e\5\u00e2r\2\u0d5e\u0d5f"+
		"\7\u03d9\2\2\u0d5f\u0d61\3\2\2\2\u0d60\u0d58\3\2\2\2\u0d60\u0d5c\3\2\2"+
		"\2\u0d61\u00e3\3\2\2\2\u0d62\u0d66\7\u008b\2\2\u0d63\u0d65\5\u00ecw\2"+
		"\u0d64\u0d63\3\2\2\2\u0d65\u0d68\3\2\2\2\u0d66\u0d64\3\2\2\2\u0d66\u0d67"+
		"\3\2\2\2\u0d67\u0d69\3\2\2\2\u0d68\u0d66\3\2\2\2\u0d69\u0d6b\5\u00eex"+
		"\2\u0d6a\u0d6c\5\u00f2z\2\u0d6b\u0d6a\3\2\2\2\u0d6b\u0d6c\3\2\2\2\u0d6c"+
		"\u0d6e\3\2\2\2\u0d6d\u0d6f\5\u00f8}\2\u0d6e\u0d6d\3\2\2\2\u0d6e\u0d6f"+
		"\3\2\2\2\u0d6f\u0d71\3\2\2\2\u0d70\u0d72\5\u00d0i\2\u0d71\u0d70\3\2\2"+
		"\2\u0d71\u0d72\3\2\2\2\u0d72\u0d74\3\2\2\2\u0d73\u0d75\5\u00fc\177\2\u0d74"+
		"\u0d73\3\2\2\2\u0d74\u0d75\3\2\2\2\u0d75\u0d8b\3\2\2\2\u0d76\u0d7a\7\u008b"+
		"\2\2\u0d77\u0d79\5\u00ecw\2\u0d78\u0d77\3\2\2\2\u0d79\u0d7c\3\2\2\2\u0d7a"+
		"\u0d78\3\2\2\2\u0d7a\u0d7b\3\2\2\2\u0d7b\u0d7d\3\2\2\2\u0d7c\u0d7a\3\2"+
		"\2\2\u0d7d\u0d7f\5\u00eex\2\u0d7e\u0d80\5\u00f8}\2\u0d7f\u0d7e\3\2\2\2"+
		"\u0d7f\u0d80\3\2\2\2\u0d80\u0d82\3\2\2\2\u0d81\u0d83\5\u00d0i\2\u0d82"+
		"\u0d81\3\2\2\2\u0d82\u0d83\3\2\2\2\u0d83\u0d85\3\2\2\2\u0d84\u0d86\5\u00fc"+
		"\177\2\u0d85\u0d84\3\2\2\2\u0d85\u0d86\3\2\2\2\u0d86\u0d88\3\2\2\2\u0d87"+
		"\u0d89\5\u00f2z\2\u0d88\u0d87\3\2\2\2\u0d88\u0d89\3\2\2\2\u0d89\u0d8b"+
		"\3\2\2\2\u0d8a\u0d62\3\2\2\2\u0d8a\u0d76\3\2\2\2\u0d8b\u00e5\3\2\2\2\u0d8c"+
		"\u0d90\7\u008b\2\2\u0d8d\u0d8f\5\u00ecw\2\u0d8e\u0d8d\3\2\2\2\u0d8f\u0d92"+
		"\3\2\2\2\u0d90\u0d8e\3\2\2\2\u0d90\u0d91\3\2\2\2\u0d91\u0d93\3\2\2\2\u0d92"+
		"\u0d90\3\2\2\2\u0d93\u0d95\5\u00eex\2\u0d94\u0d96\5\u00f8}\2\u0d95\u0d94"+
		"\3\2\2\2\u0d95\u0d96\3\2\2\2\u0d96\u0d98\3\2\2\2\u0d97\u0d99\5\u00d0i"+
		"\2\u0d98\u0d97\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99\u0d9b\3\2\2\2\u0d9a\u0d9c"+
		"\5\u00fc\177\2\u0d9b\u0d9a\3\2\2\2\u0d9b\u0d9c\3\2\2\2\u0d9c\u00e7\3\2"+
		"\2\2\u0d9d\u0d9f\7\u00a4\2\2\u0d9e\u0da0\t\'\2\2\u0d9f\u0d9e\3\2\2\2\u0d9f"+
		"\u0da0\3\2\2\2\u0da0\u0da1\3\2\2\2\u0da1\u0da2\5\u00e2r\2\u0da2\u00e9"+
		"\3\2\2\2\u0da3\u0da5\7\u00a4\2\2\u0da4\u0da6\t\'\2\2\u0da5\u0da4\3\2\2"+
		"\2\u0da5\u0da6\3\2\2\2\u0da6\u0da9\3\2\2\2\u0da7\u0daa\5\u00e6t\2\u0da8"+
		"\u0daa\5\u00e2r\2\u0da9\u0da7\3\2\2\2\u0da9\u0da8\3\2\2\2\u0daa\u00eb"+
		"\3\2\2\2\u0dab\u0db4\t/\2\2\u0dac\u0db4\7F\2\2\u0dad\u0db4\7\u009b\2\2"+
		"\u0dae\u0db4\7\u0097\2\2\u0daf\u0db4\7\u0095\2\2\u0db0\u0db4\7\u020c\2"+
		"\2\u0db1\u0db4\t\60\2\2\u0db2\u0db4\7\u0096\2\2\u0db3\u0dab\3\2\2\2\u0db3"+
		"\u0dac\3\2\2\2\u0db3\u0dad\3\2\2\2\u0db3\u0dae\3\2\2\2\u0db3\u0daf\3\2"+
		"\2\2\u0db3\u0db0\3\2\2\2\u0db3\u0db1\3\2\2\2\u0db3\u0db2\3\2\2\2\u0db4"+
		"\u00ed\3\2\2\2\u0db5\u0db8\7\u03c7\2\2\u0db6\u0db8\5\u00f0y\2\u0db7\u0db5"+
		"\3\2\2\2\u0db7\u0db6\3\2\2\2\u0db8\u0dbd\3\2\2\2\u0db9\u0dba\7\u03da\2"+
		"\2\u0dba\u0dbc\5\u00f0y\2\u0dbb\u0db9\3\2\2\2\u0dbc\u0dbf\3\2\2\2\u0dbd"+
		"\u0dbb\3\2\2\2\u0dbd\u0dbe\3\2\2\2\u0dbe\u00ef\3\2\2\2\u0dbf\u0dbd\3\2"+
		"\2\2\u0dc0\u0dc1\5\u01f2\u00fa\2\u0dc1\u0dc2\7\u03d7\2\2\u0dc2\u0dc3\7"+
		"\u03c7\2\2\u0dc3\u0dde\3\2\2\2\u0dc4\u0dc9\5\u01f6\u00fc\2\u0dc5\u0dc7"+
		"\7\r\2\2\u0dc6\u0dc5\3\2\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7\u0dc8\3\2\2\2\u0dc8"+
		"\u0dca\5\u020c\u0107\2\u0dc9\u0dc6\3\2\2\2\u0dc9\u0dca\3\2\2\2\u0dca\u0dde"+
		"\3\2\2\2\u0dcb\u0dd0\5\u0246\u0124\2\u0dcc\u0dce\7\r\2\2\u0dcd\u0dcc\3"+
		"\2\2\2\u0dcd\u0dce\3\2\2\2\u0dce\u0dcf\3\2\2\2\u0dcf\u0dd1\5\u020c\u0107"+
		"\2\u0dd0\u0dcd\3\2\2\2\u0dd0\u0dd1\3\2\2\2\u0dd1\u0dde\3\2\2\2\u0dd2\u0dd3"+
		"\7\u03f2\2\2\u0dd3\u0dd5\7\u03be\2\2\u0dd4\u0dd2\3\2\2\2\u0dd4\u0dd5\3"+
		"\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0ddb\5\u025a\u012e\2\u0dd7\u0dd9\7\r"+
		"\2\2\u0dd8\u0dd7\3\2\2\2\u0dd8\u0dd9\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda"+
		"\u0ddc\5\u020c\u0107\2\u0ddb\u0dd8\3\2\2\2\u0ddb\u0ddc\3\2\2\2\u0ddc\u0dde"+
		"\3\2\2\2\u0ddd\u0dc0\3\2\2\2\u0ddd\u0dc4\3\2\2\2\u0ddd\u0dcb\3\2\2\2\u0ddd"+
		"\u0dd4\3\2\2\2\u0dde\u00f1\3\2\2\2\u0ddf\u0de0\7P\2\2\u0de0\u0de5\5\u00bc"+
		"_\2\u0de1\u0de2\7\u03da\2\2\u0de2\u0de4\5\u00bc_\2\u0de3\u0de1\3\2\2\2"+
		"\u0de4\u0de7\3\2\2\2\u0de5\u0de3\3\2\2\2\u0de5\u0de6\3\2\2\2\u0de6\u0e04"+
		"\3\2\2\2\u0de7\u0de5\3\2\2\2\u0de8\u0de9\7P\2\2\u0de9\u0dea\7\u0146\2"+
		"\2\u0dea\u0e04\7\u03e7\2\2\u0deb\u0dec\7P\2\2\u0dec\u0ded\7t\2\2\u0ded"+
		"\u0df1\7\u03e7\2\2\u0dee\u0def\7\30\2\2\u0def\u0df0\7\u008c\2\2\u0df0"+
		"\u0df2\5\u01fe\u0100\2\u0df1\u0dee\3\2\2\2\u0df1\u0df2\3\2\2\2\u0df2\u0df9"+
		"\3\2\2\2\u0df3\u0df5\t$\2\2\u0df4\u0df6\5\u00f4{\2\u0df5\u0df4\3\2\2\2"+
		"\u0df6\u0df7\3\2\2\2\u0df7\u0df5\3\2\2\2\u0df7\u0df8\3\2\2\2\u0df8\u0dfa"+
		"\3\2\2\2\u0df9\u0df3\3\2\2\2\u0df9\u0dfa\3\2\2\2\u0dfa\u0e01\3\2\2\2\u0dfb"+
		"\u0dfd\7]\2\2\u0dfc\u0dfe\5\u00f6|\2\u0dfd\u0dfc\3\2\2\2\u0dfe\u0dff\3"+
		"\2\2\2\u0dff\u0dfd\3\2\2\2\u0dff\u0e00\3\2\2\2\u0e00\u0e02\3\2\2\2\u0e01"+
		"\u0dfb\3\2\2\2\u0e01\u0e02\3\2\2\2\u0e02\u0e04\3\2\2\2\u0e03\u0ddf\3\2"+
		"\2\2\u0e03\u0de8\3\2\2\2\u0e03\u0deb\3\2\2\2\u0e04\u00f3\3\2\2\2\u0e05"+
		"\u0e06\7\u009d\2\2\u0e06\u0e07\7\22\2\2\u0e07\u0e12\7\u03e7\2\2\u0e08"+
		"\u0e0a\7o\2\2\u0e09\u0e08\3\2\2\2\u0e09\u0e0a\3\2\2\2\u0e0a\u0e0b\3\2"+
		"\2\2\u0e0b\u0e0c\7\65\2\2\u0e0c\u0e0d\7\22\2\2\u0e0d\u0e12\7\u03e7\2\2"+
		"\u0e0e\u0e0f\7\66\2\2\u0e0f\u0e10\7\22\2\2\u0e10\u0e12\7\u03e7\2\2\u0e11"+
		"\u0e05\3\2\2\2\u0e11\u0e09\3\2\2\2\u0e11\u0e0e\3\2\2\2\u0e12\u00f5\3\2"+
		"\2\2\u0e13\u0e14\7\u009a\2\2\u0e14\u0e15\7\22\2\2\u0e15\u0e1a\7\u03e7"+
		"\2\2\u0e16\u0e17\7\u009d\2\2\u0e17\u0e18\7\22\2\2\u0e18\u0e1a\7\u03e7"+
		"\2\2\u0e19\u0e13\3\2\2\2\u0e19\u0e16\3\2\2\2\u0e1a\u00f7\3\2\2\2\u0e1b"+
		"\u0e1c\7?\2\2\u0e1c\u0e1f\5\u00d4k\2\u0e1d\u0e1e\7\u00ae\2\2\u0e1e\u0e20"+
		"\5\u025a\u012e\2\u0e1f\u0e1d\3\2\2\2\u0e1f\u0e20\3\2\2\2\u0e20\u0e2f\3"+
		"\2\2\2\u0e21\u0e22\7D\2\2\u0e22\u0e23\7\22\2\2\u0e23\u0e28\5\u00fa~\2"+
		"\u0e24\u0e25\7\u03da\2\2\u0e25\u0e27\5\u00fa~\2\u0e26\u0e24\3\2\2\2\u0e27"+
		"\u0e2a\3\2\2\2\u0e28\u0e26\3\2\2\2\u0e28\u0e29\3\2\2\2\u0e29\u0e2d\3\2"+
		"\2\2\u0e2a\u0e28\3\2\2\2\u0e2b\u0e2c\7\u00b0\2\2\u0e2c\u0e2e\7\u01f3\2"+
		"\2\u0e2d\u0e2b\3\2\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e\u0e30\3\2\2\2\u0e2f\u0e21"+
		"\3\2\2\2\u0e2f\u0e30\3\2\2\2\u0e30\u0e33\3\2\2\2\u0e31\u0e32\7E\2\2\u0e32"+
		"\u0e34\5\u025a\u012e\2\u0e33\u0e31\3\2\2\2\u0e33\u0e34\3\2\2\2\u0e34\u00f9"+
		"\3\2\2\2\u0e35\u0e37\5\u025a\u012e\2\u0e36\u0e38\t+\2\2\u0e37\u0e36\3"+
		"\2\2\2\u0e37\u0e38\3\2\2\2\u0e38\u00fb\3\2\2\2\u0e39\u0e44\7[\2\2\u0e3a"+
		"\u0e3b\5\u00fe\u0080\2\u0e3b\u0e3c\7\u03da\2\2\u0e3c\u0e3e\3\2\2\2\u0e3d"+
		"\u0e3a\3\2\2\2\u0e3d\u0e3e\3\2\2\2\u0e3e\u0e3f\3\2\2\2\u0e3f\u0e45\5\u00fe"+
		"\u0080\2\u0e40\u0e41\5\u00fe\u0080\2\u0e41\u0e42\7\u01bb\2\2\u0e42\u0e43"+
		"\5\u00fe\u0080\2\u0e43\u0e45\3\2\2\2\u0e44\u0e3d\3\2\2\2\u0e44\u0e40\3"+
		"\2\2\2\u0e45\u00fd\3\2\2\2\u0e46\u0e49\5\u0212\u010a\2\u0e47\u0e49\5\u01fc"+
		"\u00ff\2\u0e48\u0e46\3\2\2\2\u0e48\u0e47\3\2\2\2\u0e49\u00ff\3\2\2\2\u0e4a"+
		"\u0e4b\7\u0210\2\2\u0e4b\u0e54\7\u0227\2\2\u0e4c\u0e51\5\u0116\u008c\2"+
		"\u0e4d\u0e4e\7\u03da\2\2\u0e4e\u0e50\5\u0116\u008c\2\u0e4f\u0e4d\3\2\2"+
		"\2\u0e50\u0e53\3\2\2\2\u0e51\u0e4f\3\2\2\2\u0e51\u0e52\3\2\2\2\u0e52\u0e55"+
		"\3\2\2\2\u0e53\u0e51\3\2\2\2\u0e54\u0e4c\3\2\2\2\u0e54\u0e55\3\2\2\2\u0e55"+
		"\u0101\3\2\2\2\u0e56\u0e58\7\u0111\2\2\u0e57\u0e59\7\u023d\2\2\u0e58\u0e57"+
		"\3\2\2\2\u0e58\u0e59\3\2\2\2\u0e59\u0103\3\2\2\2\u0e5a\u0e5c\7\u0129\2"+
		"\2\u0e5b\u0e5d\7\u023d\2\2\u0e5c\u0e5b\3\2\2\2\u0e5c\u0e5d\3\2\2\2\u0e5d"+
		"\u0e63\3\2\2\2\u0e5e\u0e60\7\f\2\2\u0e5f\u0e61\7\u01b7\2\2\u0e60\u0e5f"+
		"\3\2\2\2\u0e60\u0e61\3\2\2\2\u0e61\u0e62\3\2\2\2\u0e62\u0e64\7\u011a\2"+
		"\2\u0e63\u0e5e\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e69\3\2\2\2\u0e65\u0e67"+
		"\7\u01b7\2\2\u0e66\u0e65\3\2\2\2\u0e66\u0e67\3\2\2\2\u0e67\u0e68\3\2\2"+
		"\2\u0e68\u0e6a\7~\2\2\u0e69\u0e66\3\2\2\2\u0e69\u0e6a\3\2\2\2\u0e6a\u0105"+
		"\3\2\2\2\u0e6b\u0e6d\7\u01f2\2\2\u0e6c\u0e6e\7\u023d\2\2\u0e6d\u0e6c\3"+
		"\2\2\2\u0e6d\u0e6e\3\2\2\2\u0e6e\u0e74\3\2\2\2\u0e6f\u0e71\7\f\2\2\u0e70"+
		"\u0e72\7\u01b7\2\2\u0e71\u0e70\3\2\2\2\u0e71\u0e72\3\2\2\2\u0e72\u0e73"+
		"\3\2\2\2\u0e73\u0e75\7\u011a\2\2\u0e74\u0e6f\3\2\2\2\u0e74\u0e75\3\2\2"+
		"\2\u0e75\u0e7a\3\2\2\2\u0e76\u0e78\7\u01b7\2\2\u0e77\u0e76\3\2\2\2\u0e77"+
		"\u0e78\3\2\2\2\u0e78\u0e79\3\2\2\2\u0e79\u0e7b\7~\2\2\u0e7a\u0e77\3\2"+
		"\2\2\u0e7a\u0e7b\3\2\2\2\u0e7b\u0107\3\2\2\2\u0e7c\u0e7d\7\u01f8\2\2\u0e7d"+
		"\u0e7e\5\u020c\u0107\2\u0e7e\u0109\3\2\2\2\u0e7f\u0e81\7\u01f2\2\2\u0e80"+
		"\u0e82\7\u023d\2\2\u0e81\u0e80\3\2\2\2\u0e81\u0e82\3\2\2\2\u0e82\u0e83"+
		"\3\2\2\2\u0e83\u0e85\7\u009f\2\2\u0e84\u0e86\7\u01f8\2\2\u0e85\u0e84\3"+
		"\2\2\2\u0e85\u0e86\3\2\2\2\u0e86\u0e87\3\2\2\2\u0e87\u0e88\5\u020c\u0107"+
		"\2\u0e88\u010b\3\2\2\2\u0e89\u0e8a\7~\2\2\u0e8a\u0e8b\7\u01f8\2\2\u0e8b"+
		"\u0e8c\5\u020c\u0107\2\u0e8c\u010d\3\2\2\2\u0e8d\u0e8e\7_\2\2\u0e8e\u0e8f"+
		"\7\u024f\2\2\u0e8f\u0e94\5\u0118\u008d\2\u0e90\u0e91\7\u03da\2\2\u0e91"+
		"\u0e93\5\u0118\u008d\2\u0e92\u0e90\3\2\2\2\u0e93\u0e96\3\2\2\2\u0e94\u0e92"+
		"\3\2\2\2\u0e94\u0e95\3\2\2\2\u0e95\u010f\3\2\2\2\u0e96\u0e94\3\2\2\2\u0e97"+
		"\u0e98\7\u00a6\2\2\u0e98\u0e99\7\u024f\2\2\u0e99\u0111\3\2\2\2\u0e9a\u0e9b"+
		"\7\u008c\2\2\u0e9b\u0e9c\7\u010d\2\2\u0e9c\u0e9d\7\u03cf\2\2\u0e9d\u0e9e"+
		"\t\30\2\2\u0e9e\u0113\3\2\2\2\u0e9f\u0ea1\7\u008c\2\2\u0ea0\u0ea2\t\61"+
		"\2\2\u0ea1\u0ea0\3\2\2\2\u0ea1\u0ea2\3\2\2\2\u0ea2\u0ea3\3\2\2\2\u0ea3"+
		"\u0ea4\7\u0227\2\2\u0ea4\u0ea9\5\u011c\u008f\2\u0ea5\u0ea6\7\u03da\2\2"+
		"\u0ea6\u0ea8\5\u011c\u008f\2\u0ea7\u0ea5\3\2\2\2\u0ea8\u0eab\3\2\2\2\u0ea9"+
		"\u0ea7\3\2\2\2\u0ea9\u0eaa\3\2\2\2\u0eaa\u0115\3\2\2\2\u0eab\u0ea9\3\2"+
		"\2\2\u0eac\u0ead\7\u00b0\2\2\u0ead\u0eae\7\u0130\2\2\u0eae\u0eb4\7\u0203"+
		"\2\2\u0eaf\u0eb0\7z\2\2\u0eb0\u0eb4\7\u00b1\2\2\u0eb1\u0eb2\7z\2\2\u0eb2"+
		"\u0eb4\7\u01c0\2\2\u0eb3\u0eac\3\2\2\2\u0eb3\u0eaf\3\2\2\2\u0eb3\u0eb1"+
		"\3\2\2\2\u0eb4\u0117\3\2\2\2\u0eb5\u0eba\5\u01f4\u00fb\2\u0eb6\u0eb8\7"+
		"\r\2\2\u0eb7\u0eb6\3\2\2\2\u0eb7\u0eb8\3\2\2\2\u0eb8\u0eb9\3\2\2\2\u0eb9"+
		"\u0ebb\5\u020c\u0107\2\u0eba\u0eb7\3\2\2\2\u0eba\u0ebb\3\2\2\2\u0ebb\u0ebc"+
		"\3\2\2\2\u0ebc\u0ebd\5\u011a\u008e\2\u0ebd\u0119\3\2\2\2\u0ebe\u0ec0\7"+
		"z\2\2\u0ebf\u0ec1\7\u0189\2\2\u0ec0\u0ebf\3\2\2\2\u0ec0\u0ec1\3\2\2\2"+
		"\u0ec1\u0ec7\3\2\2\2\u0ec2\u0ec4\7a\2\2\u0ec3\u0ec2\3\2\2\2\u0ec3\u0ec4"+
		"\3\2\2\2\u0ec4\u0ec5\3\2\2\2\u0ec5\u0ec7\7\u00b1\2\2\u0ec6\u0ebe\3\2\2"+
		"\2\u0ec6\u0ec3\3\2\2\2\u0ec7\u011b\3\2\2\2\u0ec8\u0ec9\7\u017f\2\2\u0ec9"+
		"\u0eca\7\u0187\2\2\u0eca\u0ed0\5\u011e\u0090\2\u0ecb\u0ecc\7z\2\2\u0ecc"+
		"\u0ed0\7\u00b1\2\2\u0ecd\u0ece\7z\2\2\u0ece\u0ed0\7\u01c0\2\2\u0ecf\u0ec8"+
		"\3\2\2\2\u0ecf\u0ecb\3\2\2\2\u0ecf\u0ecd\3\2\2\2\u0ed0\u011d\3\2\2\2\u0ed1"+
		"\u0ed2\7\u028d\2\2\u0ed2\u0ed9\7z\2\2\u0ed3\u0ed4\7z\2\2\u0ed4\u0ed9\7"+
		"\u028e\2\2\u0ed5\u0ed6\7z\2\2\u0ed6\u0ed9\7\u028f\2\2\u0ed7\u0ed9\7\u0290"+
		"\2\2\u0ed8\u0ed1\3\2\2\2\u0ed8\u0ed3\3\2\2\2\u0ed8\u0ed5\3\2\2\2\u0ed8"+
		"\u0ed7\3\2\2\2\u0ed9\u011f\3\2\2\2\u0eda\u0edb\7\27\2\2\u0edb\u0edc\7"+
		"\u018c\2\2\u0edc\u0edd\7\u009f\2\2\u0edd\u0ee2\5\u0132\u009a\2\u0ede\u0edf"+
		"\7\u03da\2\2\u0edf\u0ee1\5\u0132\u009a\2\u0ee0\u0ede\3\2\2\2\u0ee1\u0ee4"+
		"\3\2\2\2\u0ee2\u0ee0\3\2\2\2\u0ee2\u0ee3\3\2\2\2\u0ee3\u0ee6\3\2\2\2\u0ee4"+
		"\u0ee2\3\2\2\2\u0ee5\u0ee7\5\u013a\u009e\2\u0ee6\u0ee5\3\2\2\2\u0ee6\u0ee7"+
		"\3\2\2\2\u0ee7\u0121\3\2\2\2\u0ee8\u0ee9\7\27\2\2\u0ee9\u0eea\7\u01ed"+
		"\2\2\u0eea\u0eeb\7\u0160\2\2\u0eeb\u0ef0\5\u013c\u009f\2\u0eec\u0eed\7"+
		"\u03da\2\2\u0eed\u0eef\5\u013c\u009f\2\u0eee\u0eec\3\2\2\2\u0eef\u0ef2"+
		"\3\2\2\2\u0ef0\u0eee\3\2\2\2\u0ef0\u0ef1\3\2\2\2\u0ef1\u0123\3\2\2\2\u0ef2"+
		"\u0ef0\3\2\2\2\u0ef3\u0ef4\7x\2\2\u0ef4\u0ef5\t\62\2\2\u0ef5\u0efa\7\u018b"+
		"\2\2\u0ef6\u0ef7\7\u009f\2\2\u0ef7\u0efb\7\u03e7\2\2\u0ef8\u0ef9\7\17"+
		"\2\2\u0ef9\u0efb\7\u03e7\2\2\u0efa\u0ef6\3\2\2\2\u0efa\u0ef8\3\2\2\2\u0efb"+
		"\u0125\3\2\2\2\u0efc\u0efd\7\u01ee\2\2\u0efd\u0efe\7\u018c\2\2\u0efe\u0127"+
		"\3\2\2\2\u0eff\u0f00\7\u01ee\2\2\u0f00\u0f02\7\u0201\2\2\u0f01\u0f03\7"+
		"\b\2\2\u0f02\u0f01\3\2\2\2\u0f02\u0f03\3\2\2\2\u0f03\u0f05\3\2\2\2\u0f04"+
		"\u0f06\5\u013a\u009e\2\u0f05\u0f04\3\2\2\2\u0f05\u0f06\3\2\2\2\u0f06\u0129"+
		"\3\2\2\2\u0f07\u0f08\7\u0210\2\2\u0f08\u0f11\7\u0201\2\2\u0f09\u0f0e\5"+
		"\u0140\u00a1\2\u0f0a\u0f0b\7\u03da\2\2\u0f0b\u0f0d\5\u0140\u00a1\2\u0f0c"+
		"\u0f0a\3\2\2\2\u0f0d\u0f10\3\2\2\2\u0f0e\u0f0c\3\2\2\2\u0f0e\u0f0f\3\2"+
		"\2\2\u0f0f\u0f12\3\2\2\2\u0f10\u0f0e\3\2\2\2\u0f11\u0f09\3\2\2\2\u0f11"+
		"\u0f12\3\2\2\2\u0f12\u0f15\3\2\2\2\u0f13\u0f14\7\u022f\2\2\u0f14\u0f16"+
		"\5\u0142\u00a2\2\u0f15\u0f13\3\2\2\2\u0f15\u0f16\3\2\2\2\u0f16\u0f1a\3"+
		"\2\2\2\u0f17\u0f19\5\u0144\u00a3\2\u0f18\u0f17\3\2\2\2\u0f19\u0f1c\3\2"+
		"\2\2\u0f1a\u0f18\3\2\2\2\u0f1a\u0f1b\3\2\2\2\u0f1b\u0f1e\3\2\2\2\u0f1c"+
		"\u0f1a\3\2\2\2\u0f1d\u0f1f\5\u013a\u009e\2\u0f1e\u0f1d\3\2\2\2\u0f1e\u0f1f"+
		"\3\2\2\2\u0f1f\u012b\3\2\2\2\u0f20\u0f21\7\u0216\2\2\u0f21\u0f2a\7\u0201"+
		"\2\2\u0f22\u0f27\5\u0140\u00a1\2\u0f23\u0f24\7\u03da\2\2\u0f24\u0f26\5"+
		"\u0140\u00a1\2\u0f25\u0f23\3\2\2\2\u0f26\u0f29\3\2\2\2\u0f27\u0f25\3\2"+
		"\2\2\u0f27\u0f28\3\2\2\2\u0f28\u0f2b\3\2\2\2\u0f29\u0f27\3\2\2\2\u0f2a"+
		"\u0f22\3\2\2\2\u0f2a\u0f2b\3\2\2\2\u0f2b\u012d\3\2\2\2\u0f2c\u0f2d\7\u0210"+
		"\2\2\u0f2d\u0f2e\7\u016b\2\2\u0f2e\u012f\3\2\2\2\u0f2f\u0f30\7\u0216\2"+
		"\2\u0f30\u0f31\7\u016b\2\2\u0f31\u0131\3\2\2\2\u0f32\u0f33\5\u0134\u009b"+
		"\2\u0f33\u0f34\7\u03cf\2\2\u0f34\u0f35\7\u03e7\2\2\u0f35\u0f50\3\2\2\2"+
		"\u0f36\u0f37\5\u0136\u009c\2\u0f37\u0f38\7\u03cf\2\2\u0f38\u0f39\5\u0212"+
		"\u010a\2\u0f39\u0f50\3\2\2\2\u0f3a\u0f3b\5\u0138\u009d\2\u0f3b\u0f3c\7"+
		"\u03cf\2\2\u0f3c\u0f3d\t\30\2\2\u0f3d\u0f50\3\2\2\2\u0f3e\u0f3f\7\u0190"+
		"\2\2\u0f3f\u0f40\7\u03cf\2\2\u0f40\u0f50\7\u03ea\2\2\u0f41\u0f42\7\u0172"+
		"\2\2\u0f42\u0f43\7\u03cf\2\2\u0f43\u0f4c\7\u03d8\2\2\u0f44\u0f49\5\u020c"+
		"\u0107\2\u0f45\u0f46\7\u03da\2\2\u0f46\u0f48\5\u020c\u0107\2\u0f47\u0f45"+
		"\3\2\2\2\u0f48\u0f4b\3\2\2\2\u0f49\u0f47\3\2\2\2\u0f49\u0f4a\3\2\2\2\u0f4a"+
		"\u0f4d\3\2\2\2\u0f4b\u0f49\3\2\2\2\u0f4c\u0f44\3\2\2\2\u0f4c\u0f4d\3\2"+
		"\2\2\u0f4d\u0f4e\3\2\2\2\u0f4e\u0f50\7\u03d9\2\2\u0f4f\u0f32\3\2\2\2\u0f4f"+
		"\u0f36\3\2\2\2\u0f4f\u0f3a\3\2\2\2\u0f4f\u0f3e\3\2\2\2\u0f4f\u0f41\3\2"+
		"\2\2\u0f50\u0133\3\2\2\2\u0f51\u0f52\t\63\2\2\u0f52\u0135\3\2\2\2\u0f53"+
		"\u0f54\t\64\2\2\u0f54\u0137\3\2\2\2\u0f55\u0f56\t\65\2\2\u0f56\u0139\3"+
		"\2\2\2\u0f57\u0f58\7<\2\2\u0f58\u0f59\7\u011c\2\2\u0f59\u0f5a\7\u03e7"+
		"\2\2\u0f5a\u013b\3\2\2\2\u0f5b\u0f5c\7\u01e6\2\2\u0f5c\u0f5d\7\u03cf\2"+
		"\2\u0f5d\u0f5e\7\u03d8\2\2\u0f5e\u0f5f\5\u022c\u0117\2\u0f5f\u0f60\7\u03d9"+
		"\2\2\u0f60\u0f8d\3\2\2\2\u0f61\u0f62\7\u01e8\2\2\u0f62\u0f63\7\u03cf\2"+
		"\2\u0f63\u0f64\7\u03d8\2\2\u0f64\u0f65\5\u022c\u0117\2\u0f65\u0f66\7\u03d9"+
		"\2\2\u0f66\u0f8d\3\2\2\2\u0f67\u0f68\7\u01e7\2\2\u0f68\u0f69\7\u03cf\2"+
		"\2\u0f69\u0f6a\7\u03d8\2\2\u0f6a\u0f6b\5\u022e\u0118\2\u0f6b\u0f6c\7\u03d9"+
		"\2\2\u0f6c\u0f8d\3\2\2\2\u0f6d\u0f6e\7\u01e9\2\2\u0f6e\u0f6f\7\u03cf\2"+
		"\2\u0f6f\u0f70\7\u03d8\2\2\u0f70\u0f71\5\u022e\u0118\2\u0f71\u0f72\7\u03d9"+
		"\2\2\u0f72\u0f8d\3\2\2\2\u0f73\u0f74\7\u01eb\2\2\u0f74\u0f75\7\u03cf\2"+
		"\2\u0f75\u0f76\7\u03d8\2\2\u0f76\u0f77\5\u0238\u011d\2\u0f77\u0f78\7\u03d9"+
		"\2\2\u0f78\u0f8d\3\2\2\2\u0f79\u0f7a\7\u01ec\2\2\u0f7a\u0f7b\7\u03cf\2"+
		"\2\u0f7b\u0f7c\7\u03d8\2\2\u0f7c\u0f7d\5\u0238\u011d\2\u0f7d\u0f7e\7\u03d9"+
		"\2\2\u0f7e\u0f8d\3\2\2\2\u0f7f\u0f80\7\u01ea\2\2\u0f80\u0f81\7\u03cf\2"+
		"\2\u0f81\u0f82\7\u03d8\2\2\u0f82\u0f87\5\u013e\u00a0\2\u0f83\u0f84\7\u03da"+
		"\2\2\u0f84\u0f86\5\u013e\u00a0\2\u0f85\u0f83\3\2\2\2\u0f86\u0f89\3\2\2"+
		"\2\u0f87\u0f85\3\2\2\2\u0f87\u0f88\3\2\2\2\u0f88\u0f8a\3\2\2\2\u0f89\u0f87"+
		"\3\2\2\2\u0f8a\u0f8b\7\u03d9\2\2\u0f8b\u0f8d\3\2\2\2\u0f8c\u0f5b\3\2\2"+
		"\2\u0f8c\u0f61\3\2\2\2\u0f8c\u0f67\3\2\2\2\u0f8c\u0f6d\3\2\2\2\u0f8c\u0f73"+
		"\3\2\2\2\u0f8c\u0f79\3\2\2\2\u0f8c\u0f7f\3\2\2\2\u0f8d\u013d\3\2\2\2\u0f8e"+
		"\u0f8f\7\u03d8\2\2\u0f8f\u0f90\5\u01f4\u00fb\2\u0f90\u0f91\7\u03da\2\2"+
		"\u0f91\u0f92\5\u01f4\u00fb\2\u0f92\u0f93\7\u03d9\2\2\u0f93\u013f\3\2\2"+
		"\2\u0f94\u0f95\t\66\2\2\u0f95\u0141\3\2\2\2\u0f96\u0f97\t\67\2\2\u0f97"+
		"\u0f98\7\u03cf\2\2\u0f98\u0fa9\5\u0146\u00a4\2\u0f99\u0f9a\7\u0192\2\2"+
		"\u0f9a\u0f9b\7\u03cf\2\2\u0f9b\u0f9c\7\u03e7\2\2\u0f9c\u0f9d\7\u03da\2"+
		"\2\u0f9d\u0f9e\7\u0193\2\2\u0f9e\u0f9f\7\u03cf\2\2\u0f9f\u0fa9\5\u0212"+
		"\u010a\2\u0fa0\u0fa1\7\u01e0\2\2\u0fa1\u0fa2\7\u03cf\2\2\u0fa2\u0fa3\7"+
		"\u03e7\2\2\u0fa3\u0fa4\7\u03da\2\2\u0fa4\u0fa5\7\u01e1\2\2\u0fa5\u0fa6"+
		"\7\u03cf\2\2\u0fa6\u0fa9\5\u0212\u010a\2\u0fa7\u0fa9\7\u020a\2\2\u0fa8"+
		"\u0f96\3\2\2\2\u0fa8\u0f99\3\2\2\2\u0fa8\u0fa0\3\2\2\2\u0fa8\u0fa7\3\2"+
		"\2\2\u0fa9\u0143\3\2\2\2\u0faa\u0fab\7\u0231\2\2\u0fab\u0fac\7\u03cf\2"+
		"\2\u0fac\u0fb7\7\u03e7\2\2\u0fad\u0fae\7\u01cb\2\2\u0fae\u0faf\7\u03cf"+
		"\2\2\u0faf\u0fb7\7\u03e7\2\2\u0fb0\u0fb1\7\u013d\2\2\u0fb1\u0fb2\7\u03cf"+
		"\2\2\u0fb2\u0fb7\7\u03e7\2\2\u0fb3\u0fb4\7\u01ce\2\2\u0fb4\u0fb5\7\u03cf"+
		"\2\2\u0fb5\u0fb7\7\u03e7\2\2\u0fb6\u0faa\3\2\2\2\u0fb6\u0fad\3\2\2\2\u0fb6"+
		"\u0fb0\3\2\2\2\u0fb6\u0fb3\3\2\2\2\u0fb7\u0145\3\2\2\2\u0fb8\u0fbd\5\u0204"+
		"\u0103\2\u0fb9\u0fba\7\u03da\2\2\u0fba\u0fbc\5\u0204\u0103\2\u0fbb\u0fb9"+
		"\3\2\2\2\u0fbc\u0fbf\3\2\2\2\u0fbd\u0fbb\3\2\2\2\u0fbd\u0fbe\3\2\2\2\u0fbe"+
		"\u0fc2\3\2\2\2\u0fbf\u0fbd\3\2\2\2\u0fc0\u0fc2\7\u03e7\2\2\u0fc1\u0fb8"+
		"\3\2\2\2\u0fc1\u0fc0\3\2\2\2\u0fc2\u0147\3\2\2\2\u0fc3\u0fc4\7\u0240\2"+
		"\2\u0fc4\u0fc5\t8\2\2\u0fc5\u0fc7\5\u0206\u0104\2\u0fc6\u0fc8\t9\2\2\u0fc7"+
		"\u0fc6\3\2\2\2\u0fc7\u0fc8\3\2\2\2\u0fc8\u0149\3\2\2\2\u0fc9\u0fca\7\u0240"+
		"\2\2\u0fca\u0fcb\7\u014b\2\2\u0fcb\u0fd1\5\u0206\u0104\2\u0fcc\u0fcf\7"+
		"\u021e\2\2\u0fcd\u0fce\7<\2\2\u0fce\u0fd0\7\u01ab\2\2\u0fcf\u0fcd\3\2"+
		"\2\2\u0fcf\u0fd0\3\2\2\2\u0fd0\u0fd2\3\2\2\2\u0fd1\u0fcc\3\2\2\2\u0fd1"+
		"\u0fd2\3\2\2\2\u0fd2\u014b\3\2\2\2\u0fd3\u0fd4\7\u0240\2\2\u0fd4\u0fd5"+
		"\7\u01d2\2\2\u0fd5\u0fd6\5\u0206\u0104\2\u0fd6\u014d\3\2\2\2\u0fd7\u0fd8"+
		"\7\u0240\2\2\u0fd8\u0fd9\7\u0129\2\2\u0fd9\u0fdc\5\u0206\u0104\2\u0fda"+
		"\u0fdb\7\u01be\2\2\u0fdb\u0fdd\7\u01cc\2\2\u0fdc\u0fda\3\2\2\2\u0fdc\u0fdd"+
		"\3\2\2\2\u0fdd\u014f\3\2\2\2\u0fde\u0fdf\7\u0240\2\2\u0fdf\u0fe0\7\u01f2"+
		"\2\2\u0fe0\u0fe1\5\u0206\u0104\2\u0fe1\u0151\3\2\2\2\u0fe2\u0fe3\7\u0240"+
		"\2\2\u0fe3\u0fe6\7\u01dc\2\2\u0fe4\u0fe5\7\37\2\2\u0fe5\u0fe7\5\u0206"+
		"\u0104\2\u0fe6\u0fe4\3\2\2\2\u0fe6\u0fe7\3\2\2\2\u0fe7\u0153\3\2\2\2\u0fe8"+
		"\u0fe9\7\u01d2\2\2\u0fe9\u0fea\5\u020c\u0107\2\u0fea\u0fed\7?\2\2\u0feb"+
		"\u0fee\7\u03e7\2\2\u0fec\u0fee\7\u03f2\2\2\u0fed\u0feb\3\2\2\2\u0fed\u0fec"+
		"\3\2\2\2\u0fee\u0155\3\2\2\2\u0fef\u0ff0\7\u0251\2\2\u0ff0\u0ff3\5\u020c"+
		"\u0107\2\u0ff1\u0ff2\7\u00ab\2\2\u0ff2\u0ff4\5\u023a\u011e\2\u0ff3\u0ff1"+
		"\3\2\2\2\u0ff3\u0ff4\3\2\2\2\u0ff4\u0157\3\2\2\2\u0ff5\u0ff6\t:\2\2\u0ff6"+
		"\u0ff7\7\u01d2\2\2\u0ff7\u0ff8\5\u020c\u0107\2\u0ff8\u0159\3\2\2\2\u0ff9"+
		"\u0ffc\5\u015c\u00af\2\u0ffa\u0ffc\5\6\4\2\u0ffb\u0ff9\3\2\2\2\u0ffb\u0ffa"+
		"\3\2\2\2\u0ffc\u015b\3\2\2\2\u0ffd\u0ffe\5\u020c\u0107\2\u0ffe\u0fff\7"+
		"\u03e3\2\2\u0fff\u1001\3\2\2\2\u1000\u0ffd\3\2\2\2\u1000\u1001\3\2\2\2"+
		"\u1001\u1002\3\2\2\2\u1002\u1029\7\u0111\2\2\u1003\u1004\5\u0170\u00b9"+
		"\2\u1004\u1005\7\u03db\2\2\u1005\u1007\3\2\2\2\u1006\u1003\3\2\2\2\u1007"+
		"\u100a\3\2\2\2\u1008\u1006\3\2\2\2\u1008\u1009\3\2\2\2\u1009\u1010\3\2"+
		"\2\2\u100a\u1008\3\2\2\2\u100b\u100c\5\u0172\u00ba\2\u100c\u100d\7\u03db"+
		"\2\2\u100d\u100f\3\2\2\2\u100e\u100b\3\2\2\2\u100f\u1012\3\2\2\2\u1010"+
		"\u100e\3\2\2\2\u1010\u1011\3\2\2\2\u1011\u1018\3\2\2\2\u1012\u1010\3\2"+
		"\2\2\u1013\u1014\5\u0174\u00bb\2\u1014\u1015\7\u03db\2\2\u1015\u1017\3"+
		"\2\2\2\u1016\u1013\3\2\2\2\u1017\u101a\3\2\2\2\u1018\u1016\3\2\2\2\u1018"+
		"\u1019\3\2\2\2\u1019\u1020\3\2\2\2\u101a\u1018\3\2\2\2\u101b\u101c\5\u0176"+
		"\u00bc\2\u101c\u101d\7\u03db\2\2\u101d\u101f\3\2\2\2\u101e\u101b\3\2\2"+
		"\2\u101f\u1022\3\2\2\2\u1020\u101e\3\2\2\2\u1020\u1021\3\2\2\2\u1021\u1026"+
		"\3\2\2\2\u1022\u1020\3\2\2\2\u1023\u1025\5\u017a\u00be\2\u1024\u1023\3"+
		"\2\2\2\u1025\u1028\3\2\2\2\u1026\u1024\3\2\2\2\u1026\u1027\3\2\2\2\u1027"+
		"\u102a\3\2\2\2\u1028\u1026\3\2\2\2\u1029\u1008\3\2\2\2\u1029\u102a\3\2"+
		"\2\2\u102a\u102b\3\2\2\2\u102b\u102d\7\u014b\2\2\u102c\u102e\5\u020c\u0107"+
		"\2\u102d\u102c\3\2\2\2\u102d\u102e\3\2\2\2\u102e\u015d\3\2\2\2\u102f\u1032"+
		"\7\25\2\2\u1030\u1033\5\u020c\u0107\2\u1031\u1033\5\u025a\u012e\2\u1032"+
		"\u1030\3\2\2\2\u1032\u1031\3\2\2\2\u1032\u1033\3\2\2\2\u1033\u1035\3\2"+
		"\2\2\u1034\u1036\5\u017c\u00bf\2\u1035\u1034\3\2\2\2\u1036\u1037\3\2\2"+
		"\2\u1037\u1035\3\2\2\2\u1037\u1038\3\2\2\2\u1038\u103f\3\2\2\2\u1039\u103b"+
		"\7\63\2\2\u103a\u103c\5\u017a\u00be\2\u103b\u103a\3\2\2\2\u103c\u103d"+
		"\3\2\2\2\u103d\u103b\3\2\2\2\u103d\u103e\3\2\2\2\u103e\u1040\3\2\2\2\u103f"+
		"\u1039\3\2\2\2\u103f\u1040\3\2\2\2\u1040\u1041\3\2\2\2\u1041\u1042\7\u014b"+
		"\2\2\u1042\u1043\7\25\2\2\u1043\u015f\3\2\2\2\u1044\u1045\7G\2\2\u1045"+
		"\u1046\5\u025a\u012e\2\u1046\u1048\7\u009e\2\2\u1047\u1049\5\u017a\u00be"+
		"\2\u1048\u1047\3\2\2\2\u1049\u104a\3\2\2\2\u104a\u1048\3\2\2\2\u104a\u104b"+
		"\3\2\2\2\u104b\u104f\3\2\2\2\u104c\u104e\5\u017e\u00c0\2\u104d\u104c\3"+
		"\2\2\2\u104e\u1051\3\2\2\2\u104f\u104d\3\2\2\2\u104f\u1050\3\2\2\2\u1050"+
		"\u1058\3\2\2\2\u1051\u104f\3\2\2\2\u1052\u1054\7\63\2\2\u1053\u1055\5"+
		"\u017a\u00be\2\u1054\u1053\3\2\2\2\u1055\u1056\3\2\2\2\u1056\u1054\3\2"+
		"\2\2\u1056\u1057\3\2\2\2\u1057\u1059\3\2\2\2\u1058\u1052\3\2\2\2\u1058"+
		"\u1059\3\2\2\2\u1059\u105a\3\2\2\2\u105a\u105b\7\u014b\2\2\u105b\u105c"+
		"\7G\2\2\u105c\u0161\3\2\2\2\u105d\u105e\7R\2\2\u105e\u105f\5\u020c\u0107"+
		"\2\u105f\u0163\3\2\2\2\u1060\u1061\7X\2\2\u1061\u1062\5\u020c\u0107\2"+
		"\u1062\u0165\3\2\2\2\u1063\u1064\5\u020c\u0107\2\u1064\u1065\7\u03e3\2"+
		"\2\u1065\u1067\3\2\2\2\u1066\u1063\3\2\2\2\u1066\u1067\3\2\2\2\u1067\u1068"+
		"\3\2\2\2\u1068\u106a\7`\2\2\u1069\u106b\5\u017a\u00be\2\u106a\u1069\3"+
		"\2\2\2\u106b\u106c\3\2\2\2\u106c\u106a\3\2\2\2\u106c\u106d\3\2\2\2\u106d"+
		"\u106e\3\2\2\2\u106e\u106f\7\u014b\2\2\u106f\u1071\7`\2\2\u1070\u1072"+
		"\5\u020c\u0107\2\u1071\u1070\3\2\2\2\u1071\u1072\3\2\2\2\u1072\u0167\3"+
		"\2\2\2\u1073\u1074\5\u020c\u0107\2\u1074\u1075\7\u03e3\2\2\u1075\u1077"+
		"\3\2\2\2\u1076\u1073\3\2\2\2\u1076\u1077\3\2\2\2\u1077\u1078\3\2\2\2\u1078"+
		"\u107a\7\u0080\2\2\u1079\u107b\5\u017a\u00be\2\u107a\u1079\3\2\2\2\u107b"+
		"\u107c\3\2\2\2\u107c\u107a\3\2\2\2\u107c\u107d\3\2\2\2\u107d\u107e\3\2"+
		"\2\2\u107e\u107f\7\u022f\2\2\u107f\u1080\5\u025a\u012e\2\u1080\u1081\7"+
		"\u014b\2\2\u1081\u1083\7\u0080\2\2\u1082\u1084\5\u020c\u0107\2\u1083\u1082"+
		"\3\2\2\2\u1083\u1084\3\2\2\2\u1084\u0169\3\2\2\2\u1085\u1086\7\u0085\2"+
		"\2\u1086\u1087\5\u025a\u012e\2\u1087\u016b\3\2\2\2\u1088\u1089\5\u020c"+
		"\u0107\2\u1089\u108a";
	private static final String _serializedATNSegment2 =
		"\7\u03e3\2\2\u108a\u108c\3\2\2\2\u108b\u1088\3\2\2\2\u108b\u108c\3\2\2"+
		"\2\u108c\u108d\3\2\2\2\u108d\u108e\7\u00af\2\2\u108e\u108f\5\u025a\u012e"+
		"\2\u108f\u1091\7\u0145\2\2\u1090\u1092\5\u017a\u00be\2\u1091\u1090\3\2"+
		"\2\2\u1092\u1093\3\2\2\2\u1093\u1091\3\2\2\2\u1093\u1094\3\2\2\2\u1094"+
		"\u1095\3\2\2\2\u1095\u1096\7\u014b\2\2\u1096\u1098\7\u00af\2\2\u1097\u1099"+
		"\5\u020c\u0107\2\u1098\u1097\3\2\2\2\u1098\u1099\3\2\2\2\u1099\u016d\3"+
		"\2\2\2\u109a\u109b\7\u0122\2\2\u109b\u10aa\5\u020c\u0107\2\u109c\u10a1"+
		"\7;\2\2\u109d\u109f\7\u01b6\2\2\u109e\u109d\3\2\2\2\u109e\u109f\3\2\2"+
		"\2\u109f\u10a0\3\2\2\2\u10a0\u10a2\7?\2\2\u10a1\u109e\3\2\2\2\u10a1\u10a2"+
		"\3\2\2\2\u10a2\u10a3\3\2\2\2\u10a3\u10a4\5\u020c\u0107\2\u10a4\u10a5\7"+
		"P\2\2\u10a5\u10a6\5\u022c\u0117\2\u10a6\u10aa\3\2\2\2\u10a7\u10a8\7\u01c1"+
		"\2\2\u10a8\u10aa\5\u020c\u0107\2\u10a9\u109a\3\2\2\2\u10a9\u109c\3\2\2"+
		"\2\u10a9\u10a7\3\2\2\2\u10aa\u016f\3\2\2\2\u10ab\u10ac\7\'\2\2\u10ac\u10ad"+
		"\5\u022c\u0117\2\u10ad\u10b0\5\u0220\u0111\2\u10ae\u10af\7(\2\2\u10af"+
		"\u10b1\5\u023c\u011f\2\u10b0\u10ae\3\2\2\2\u10b0\u10b1\3\2\2\2\u10b1\u0171"+
		"\3\2\2\2\u10b2\u10b3\7\'\2\2\u10b3\u10b4\5\u020c\u0107\2\u10b4\u10b5\7"+
		"\34\2\2\u10b5\u10bc\7<\2\2\u10b6\u10bd\5\u0212\u010a\2\u10b7\u10b9\7\u0093"+
		"\2\2\u10b8\u10ba\7\u0235\2\2\u10b9\u10b8\3\2\2\2\u10b9\u10ba\3\2\2\2\u10ba"+
		"\u10bb\3\2\2\2\u10bb\u10bd\7\u03e7\2\2\u10bc\u10b6\3\2\2\2\u10bc\u10b7"+
		"\3\2\2\2\u10bd\u0173\3\2\2\2\u10be\u10bf\7\'\2\2\u10bf\u10c0\5\u020c\u0107"+
		"\2\u10c0\u10c1\7$\2\2\u10c1\u10c2\7<\2\2\u10c2\u10c3\5\u00b4[\2\u10c3"+
		"\u0175\3\2\2\2\u10c4\u10c5\7\'\2\2\u10c5\u10c6\t;\2\2\u10c6\u10c7\7\u016c"+
		"\2\2\u10c7\u10c8\7<\2\2\u10c8\u10cd\5\u0178\u00bd\2\u10c9\u10ca\7\u03da"+
		"\2\2\u10ca\u10cc\5\u0178\u00bd\2\u10cb\u10c9\3\2\2\2\u10cc\u10cf\3\2\2"+
		"\2\u10cd\u10cb\3\2\2\2\u10cd\u10ce\3\2\2\2\u10ce\u10d0\3\2\2\2\u10cf\u10cd"+
		"\3\2\2\2\u10d0\u10d1\5\u015a\u00ae\2\u10d1\u0177\3\2\2\2\u10d2\u10de\5"+
		"\u0212\u010a\2\u10d3\u10d5\7\u0093\2\2\u10d4\u10d6\7\u0235\2\2\u10d5\u10d4"+
		"\3\2\2\2\u10d5\u10d6\3\2\2\2\u10d6\u10d7\3\2\2\2\u10d7\u10de\7\u03e7\2"+
		"\2\u10d8\u10de\5\u020c\u0107\2\u10d9\u10de\7\u0094\2\2\u10da\u10db\7h"+
		"\2\2\u10db\u10de\7\u0165\2\2\u10dc\u10de\7\u0092\2\2\u10dd\u10d2\3\2\2"+
		"\2\u10dd\u10d3\3\2\2\2\u10dd\u10d8\3\2\2\2\u10dd\u10d9\3\2\2\2\u10dd\u10da"+
		"\3\2\2\2\u10dd\u10dc\3\2\2\2\u10de\u0179\3\2\2\2\u10df\u10e2\5\24\13\2"+
		"\u10e0\u10e2\5\6\4\2\u10e1\u10df\3\2\2\2\u10e1\u10e0\3\2\2\2\u10e2\u10e3"+
		"\3\2\2\2\u10e3\u10e4\7\u03db\2\2\u10e4\u017b\3\2\2\2\u10e5\u10e8\7\u00ad"+
		"\2\2\u10e6\u10e9\5\u021e\u0110\2\u10e7\u10e9\5\u025a\u012e\2\u10e8\u10e6"+
		"\3\2\2\2\u10e8\u10e7\3\2\2\2\u10e9\u10ea\3\2\2\2\u10ea\u10ec\7\u009e\2"+
		"\2\u10eb\u10ed\5\u017a\u00be\2\u10ec\u10eb\3\2\2\2\u10ed\u10ee\3\2\2\2"+
		"\u10ee\u10ec\3\2\2\2\u10ee\u10ef\3\2\2\2\u10ef\u017d\3\2\2\2\u10f0\u10f1"+
		"\7\64\2\2\u10f1\u10f2\5\u025a\u012e\2\u10f2\u10f4\7\u009e\2\2\u10f3\u10f5"+
		"\5\u017a\u00be\2\u10f4\u10f3\3\2\2\2\u10f5\u10f6\3\2\2\2\u10f6\u10f4\3"+
		"\2\2\2\u10f6\u10f7\3\2\2\2\u10f7\u017f\3\2\2\2\u10f8\u10f9\7\t\2\2\u10f9"+
		"\u10fa\7\u0231\2\2\u10fa\u10ff\5\u0192\u00ca\2\u10fb\u10fc\7\u03da\2\2"+
		"\u10fc\u10fe\5\u0192\u00ca\2\u10fd\u10fb\3\2\2\2\u10fe\u1101\3\2\2\2\u10ff"+
		"\u10fd\3\2\2\2\u10ff\u1100\3\2\2\2\u1100\u112f\3\2\2\2\u1101\u10ff\3\2"+
		"\2\2\u1102\u1103\7\t\2\2\u1103\u1105\7\u0231\2\2\u1104\u1106\5\u0242\u0122"+
		"\2\u1105\u1104\3\2\2\2\u1105\u1106\3\2\2\2\u1106\u1107\3\2\2\2\u1107\u110c"+
		"\5\u0194\u00cb\2\u1108\u1109\7\u03da\2\2\u1109\u110b\5\u0194\u00cb\2\u110a"+
		"\u1108\3\2\2\2\u110b\u110e\3\2\2\2\u110c\u110a\3\2\2\2\u110c\u110d\3\2"+
		"\2\2\u110d\u111d\3\2\2\2\u110e\u110c\3\2\2\2\u110f\u111b\7\u0082\2\2\u1110"+
		"\u111c\7\u01b9\2\2\u1111\u1118\5\u0196\u00cc\2\u1112\u1114\7\f\2\2\u1113"+
		"\u1112\3\2\2\2\u1113\u1114\3\2\2\2\u1114\u1115\3\2\2\2\u1115\u1117\5\u0196"+
		"\u00cc\2\u1116\u1113\3\2\2\2\u1117\u111a\3\2\2\2\u1118\u1116\3\2\2\2\u1118"+
		"\u1119\3\2\2\2\u1119\u111c\3\2\2\2\u111a\u1118\3\2\2\2\u111b\u1110\3\2"+
		"\2\2\u111b\u1111\3\2\2\2\u111c\u111e\3\2\2\2\u111d\u110f\3\2\2\2\u111d"+
		"\u111e\3\2\2\2\u111e\u1125\3\2\2\2\u111f\u1121\7\u00b0\2\2\u1120\u1122"+
		"\5\u0198\u00cd\2\u1121\u1120\3\2\2\2\u1122\u1123\3\2\2\2\u1123\u1121\3"+
		"\2\2\2\u1123\u1124\3\2\2\2\u1124\u1126\3\2\2\2\u1125\u111f\3\2\2\2\u1125"+
		"\u1126\3\2\2\2\u1126\u112b\3\2\2\2\u1127\u112a\5\u019a\u00ce\2\u1128\u112a"+
		"\5\u019c\u00cf\2\u1129\u1127\3\2\2\2\u1129\u1128\3\2\2\2\u112a\u112d\3"+
		"\2\2\2\u112b\u1129\3\2\2\2\u112b\u112c\3\2\2\2\u112c\u112f\3\2\2\2\u112d"+
		"\u112b\3\2\2\2\u112e\u10f8\3\2\2\2\u112e\u1102\3\2\2\2\u112f\u0181\3\2"+
		"\2\2\u1130\u1131\7 \2\2\u1131\u1132\7\u0231\2\2\u1132\u1137\5\u0194\u00cb"+
		"\2\u1133\u1134\7\u03da\2\2\u1134\u1136\5\u0194\u00cb\2\u1135\u1133\3\2"+
		"\2\2\u1136\u1139\3\2\2\2\u1137\u1135\3\2\2\2\u1137\u1138\3\2\2\2\u1138"+
		"\u1167\3\2\2\2\u1139\u1137\3\2\2\2\u113a\u113b\7 \2\2\u113b\u113d\7\u0231"+
		"\2\2\u113c\u113e\5\u0244\u0123\2\u113d\u113c\3\2\2\2\u113d\u113e\3\2\2"+
		"\2\u113e\u113f\3\2\2\2\u113f\u1144\5\u0194\u00cb\2\u1140\u1141\7\u03da"+
		"\2\2\u1141\u1143\5\u0194\u00cb\2\u1142\u1140\3\2\2\2\u1143\u1146\3\2\2"+
		"\2\u1144\u1142\3\2\2\2\u1144\u1145\3\2\2\2\u1145\u1155\3\2\2\2\u1146\u1144"+
		"\3\2\2\2\u1147\u1153\7\u0082\2\2\u1148\u1154\7\u01b9\2\2\u1149\u1150\5"+
		"\u0196\u00cc\2\u114a\u114c\7\f\2\2\u114b\u114a\3\2\2\2\u114b\u114c\3\2"+
		"\2\2\u114c\u114d\3\2\2\2\u114d\u114f\5\u0196\u00cc\2\u114e\u114b\3\2\2"+
		"\2\u114f\u1152\3\2\2\2\u1150\u114e\3\2\2\2\u1150\u1151\3\2\2\2\u1151\u1154"+
		"\3\2\2\2\u1152\u1150\3\2\2\2\u1153\u1148\3\2\2\2\u1153\u1149\3\2\2\2\u1154"+
		"\u1156\3\2\2\2\u1155\u1147\3\2\2\2\u1155\u1156\3\2\2\2\u1156\u115d\3\2"+
		"\2\2\u1157\u1159\7\u00b0\2\2\u1158\u115a\5\u0198\u00cd\2\u1159\u1158\3"+
		"\2\2\2\u115a\u115b\3\2\2\2\u115b\u1159\3\2\2\2\u115b\u115c\3\2\2\2\u115c"+
		"\u115e\3\2\2\2\u115d\u1157\3\2\2\2\u115d\u115e\3\2\2\2\u115e\u1163\3\2"+
		"\2\2\u115f\u1162\5\u019a\u00ce\2\u1160\u1162\5\u019c\u00cf\2\u1161\u115f"+
		"\3\2\2\2\u1161\u1160\3\2\2\2\u1162\u1165\3\2\2\2\u1163\u1161\3\2\2\2\u1163"+
		"\u1164\3\2\2\2\u1164\u1167\3\2\2\2\u1165\u1163\3\2\2\2\u1166\u1130\3\2"+
		"\2\2\u1166\u113a\3\2\2\2\u1167\u0183\3\2\2\2\u1168\u1169\7\61\2\2\u1169"+
		"\u116b\7\u0231\2\2\u116a\u116c\5\u0242\u0122\2\u116b\u116a\3\2\2\2\u116b"+
		"\u116c\3\2\2\2\u116c\u116d\3\2\2\2\u116d\u1172\5\u01fa\u00fe\2\u116e\u116f"+
		"\7\u03da\2\2\u116f\u1171\5\u01fa\u00fe\2\u1170\u116e\3\2\2\2\u1171\u1174"+
		"\3\2\2\2\u1172\u1170\3\2\2\2\u1172\u1173\3\2\2\2\u1173\u0185\3\2\2\2\u1174"+
		"\u1172\3\2\2\2\u1175\u1176\7C\2\2\u1176\u117b\5\u019e\u00d0\2\u1177\u1178"+
		"\7\u03da\2\2\u1178\u117a\5\u019e\u00d0\2\u1179\u1177\3\2\2\2\u117a\u117d"+
		"\3\2\2\2\u117b\u1179\3\2\2\2\u117b\u117c\3\2\2\2\u117c\u117e\3\2\2\2\u117d"+
		"\u117b\3\2\2\2\u117e\u1180\7l\2\2\u117f\u1181\t<\2\2\u1180\u117f\3\2\2"+
		"\2\u1180\u1181\3\2\2\2\u1181\u1182\3\2\2\2\u1182\u1183\5\u01a2\u00d2\2"+
		"\u1183\u1184\7\u009f\2\2\u1184\u1189\5\u0194\u00cb\2\u1185\u1186\7\u03da"+
		"\2\2\u1186\u1188\5\u0194\u00cb\2\u1187\u1185\3\2\2\2\u1188\u118b\3\2\2"+
		"\2\u1189\u1187\3\2\2\2\u1189\u118a\3\2\2\2\u118a\u119a\3\2\2\2\u118b\u1189"+
		"\3\2\2\2\u118c\u1198\7\u0082\2\2\u118d\u1199\7\u01b9\2\2\u118e\u1195\5"+
		"\u0196\u00cc\2\u118f\u1191\7\f\2\2\u1190\u118f\3\2\2\2\u1190\u1191\3\2"+
		"\2\2\u1191\u1192\3\2\2\2\u1192\u1194\5\u0196\u00cc\2\u1193\u1190\3\2\2"+
		"\2\u1194\u1197\3\2\2\2\u1195\u1193\3\2\2\2\u1195\u1196\3\2\2\2\u1196\u1199"+
		"\3\2\2\2\u1197\u1195\3\2\2\2\u1198\u118d\3\2\2\2\u1198\u118e\3\2\2\2\u1199"+
		"\u119b\3\2\2\2\u119a\u118c\3\2\2\2\u119a\u119b\3\2\2\2\u119b\u11a5\3\2"+
		"\2\2\u119c\u11a2\7\u00b0\2\2\u119d\u119e\7C\2\2\u119e\u11a1\7n\2\2\u119f"+
		"\u11a1\5\u0198\u00cd\2\u11a0\u119d\3\2\2\2\u11a0\u119f\3\2\2\2\u11a1\u11a4"+
		"\3\2\2\2\u11a2\u11a0\3\2\2\2\u11a2\u11a3\3\2\2\2\u11a3\u11a6\3\2\2\2\u11a4"+
		"\u11a2\3\2\2\2\u11a5\u119c\3\2\2\2\u11a5\u11a6\3\2\2\2\u11a6\u0187\3\2"+
		"\2\2\u11a7\u11a8\7C\2\2\u11a8\u11a9\7\u01d8\2\2\u11a9\u11aa\7l\2\2\u11aa"+
		"\u11ab\5\u01fa\u00fe\2\u11ab\u11ac\7\u009f\2\2\u11ac\u11b1\5\u01fa\u00fe"+
		"\2\u11ad\u11ae\7\u03da\2\2\u11ae\u11b0\5\u01fa\u00fe\2\u11af\u11ad\3\2"+
		"\2\2\u11b0\u11b3\3\2\2\2\u11b1\u11af\3\2\2\2\u11b1\u11b2\3\2\2\2\u11b2"+
		"\u11b7\3\2\2\2\u11b3\u11b1\3\2\2\2\u11b4\u11b5\7\u00b0\2\2\u11b5\u11b6"+
		"\7C\2\2\u11b6\u11b8\7n\2\2\u11b7\u11b4\3\2\2\2\u11b7\u11b8\3\2\2\2\u11b8"+
		"\u0189\3\2\2\2\u11b9\u11ba\7\177\2\2\u11ba\u11bb\7\u0231\2\2\u11bb\u11c0"+
		"\5\u01a4\u00d3\2\u11bc\u11bd\7\u03da\2\2\u11bd\u11bf\5\u01a4\u00d3\2\u11be"+
		"\u11bc\3\2\2\2\u11bf\u11c2\3\2\2\2\u11c0\u11be\3\2\2\2\u11c0\u11c1\3\2"+
		"\2\2\u11c1\u018b\3\2\2\2\u11c2\u11c0\3\2\2\2\u11c3\u11c4\7\u0086\2\2\u11c4"+
		"\u11c9\5\u019e\u00d0\2\u11c5\u11c6\7\u03da\2\2\u11c6\u11c8\5\u019e\u00d0"+
		"\2\u11c7\u11c5\3\2\2\2\u11c8\u11cb\3\2\2\2\u11c9\u11c7\3\2\2\2\u11c9\u11ca"+
		"\3\2\2\2\u11ca\u11cc\3\2\2\2\u11cb\u11c9\3\2\2\2\u11cc\u11ce\7l\2\2\u11cd"+
		"\u11cf\t<\2\2\u11ce\u11cd\3\2\2\2\u11ce\u11cf\3\2\2\2\u11cf\u11d0\3\2"+
		"\2\2\u11d0\u11d1\5\u01a2\u00d2\2\u11d1\u11d2\7?\2\2\u11d2\u11d7\5\u01fa"+
		"\u00fe\2\u11d3\u11d4\7\u03da\2\2\u11d4\u11d6\5\u01fa\u00fe\2\u11d5\u11d3"+
		"\3\2\2\2\u11d6\u11d9\3\2\2\2\u11d7\u11d5\3\2\2\2\u11d7\u11d8\3\2\2\2\u11d8"+
		"\u11ec\3\2\2\2\u11d9\u11d7\3\2\2\2\u11da\u11db\7\u0086\2\2\u11db\u11dd"+
		"\7\b\2\2\u11dc\u11de\7\u0257\2\2\u11dd\u11dc\3\2\2\2\u11dd\u11de\3\2\2"+
		"\2\u11de\u11df\3\2\2\2\u11df\u11e0\7\u03da\2\2\u11e0\u11e1\7C\2\2\u11e1"+
		"\u11e2\7n\2\2\u11e2\u11e3\7?\2\2\u11e3\u11e8\5\u01fa\u00fe\2\u11e4\u11e5"+
		"\7\u03da\2\2\u11e5\u11e7\5\u01fa\u00fe\2\u11e6\u11e4\3\2\2\2\u11e7\u11ea"+
		"\3\2\2\2\u11e8\u11e6\3\2\2\2\u11e8\u11e9\3\2\2\2\u11e9\u11ec\3\2\2\2\u11ea"+
		"\u11e8\3\2\2\2\u11eb\u11c3\3\2\2\2\u11eb\u11da\3\2\2\2\u11ec\u018d\3\2"+
		"\2\2\u11ed\u11ee\7\u0086\2\2\u11ee\u11ef\7\u01d8\2\2\u11ef\u11f0\7l\2"+
		"\2\u11f0\u11f1\5\u01fa\u00fe\2\u11f1\u11f2\7?\2\2\u11f2\u11f7\5\u01fa"+
		"\u00fe\2\u11f3\u11f4\7\u03da\2\2\u11f4\u11f6\5\u01fa\u00fe\2\u11f5\u11f3"+
		"\3\2\2\2\u11f6\u11f9\3\2\2\2\u11f7\u11f5\3\2\2\2\u11f7\u11f8\3\2\2\2\u11f8"+
		"\u018f\3\2\2\2\u11f9\u11f7\3\2\2\2\u11fa\u11fb\7\u008c\2\2\u11fb\u11fe"+
		"\7\u01cb\2\2\u11fc\u11fd\7<\2\2\u11fd\u11ff\5\u01fa\u00fe\2\u11fe\u11fc"+
		"\3\2\2\2\u11fe\u11ff\3\2\2\2\u11ff\u1200\3\2\2\2\u1200\u1203\7\u03cf\2"+
		"\2\u1201\u1204\5\u0254\u012b\2\u1202\u1204\7\u03e7\2\2\u1203\u1201\3\2"+
		"\2\2\u1203\u1202\3\2\2\2\u1204\u0191\3\2\2\2\u1205\u1206\5\u01fa\u00fe"+
		"\2\u1206\u1207\5\u019a\u00ce\2\u1207\u0193\3\2\2\2\u1208\u1209\5\u01fa"+
		"\u00fe\2\u1209\u120a\7\u0171\2\2\u120a\u120b\7\22\2\2\u120b\u120c\7\u01cb"+
		"\2\2\u120c\u120d\7\u03e7\2\2\u120d\u1221\3\2\2\2\u120e\u120f\5\u01fa\u00fe"+
		"\2\u120f\u1212\7\u0171\2\2\u1210\u1211\7\u00b0\2\2\u1211\u1213\5\u020a"+
		"\u0106\2\u1212\u1210\3\2\2\2\u1212\u1213\3\2\2\2\u1213\u1214\3\2\2\2\u1214"+
		"\u1215\7\22\2\2\u1215\u1216\7\u03e7\2\2\u1216\u1221\3\2\2\2\u1217\u1218"+
		"\5\u01fa\u00fe\2\u1218\u1219\7\u0171\2\2\u1219\u121a\7\u00b0\2\2\u121a"+
		"\u121d\5\u020a\u0106\2\u121b\u121c\7\r\2\2\u121c\u121e\7\u03e7\2\2\u121d"+
		"\u121b\3\2\2\2\u121d\u121e\3\2\2\2\u121e\u1221\3\2\2\2\u121f\u1221\5\u01fa"+
		"\u00fe\2\u1220\u1208\3\2\2\2\u1220\u120e\3\2\2\2\u1220\u1217\3\2\2\2\u1220"+
		"\u121f\3\2\2\2\u1221\u0195\3\2\2\2\u1222\u122b\7\u0098\2\2\u1223\u122b"+
		"\7\u023f\2\2\u1224\u1225\7\u011f\2\2\u1225\u122b\7\u03e7\2\2\u1226\u1227"+
		"\7\u0180\2\2\u1227\u122b\7\u03e7\2\2\u1228\u1229\7\u021b\2\2\u1229\u122b"+
		"\7\u03e7\2\2\u122a\u1222\3\2\2\2\u122a\u1223\3\2\2\2\u122a\u1224\3\2\2"+
		"\2\u122a\u1226\3\2\2\2\u122a\u1228\3\2\2\2\u122b\u0197\3\2\2\2\u122c\u122d"+
		"\7\u01a2\2\2\u122d\u1235\5\u0212\u010a\2\u122e\u122f\7\u01a5\2\2\u122f"+
		"\u1235\5\u0212\u010a\2\u1230\u1231\7\u01a1\2\2\u1231\u1235\5\u0212\u010a"+
		"\2\u1232\u1233\7\u01a6\2\2\u1233\u1235\5\u0212\u010a\2\u1234\u122c\3\2"+
		"\2\2\u1234\u122e\3\2\2\2\u1234\u1230\3\2\2\2\u1234\u1232\3\2\2\2\u1235"+
		"\u0199\3\2\2\2\u1236\u1237\7\u01cb\2\2\u1237\u123e\7\u0158\2\2\u1238\u123f"+
		"\7(\2\2\u1239\u123f\7\u01b5\2\2\u123a\u123b\7O\2\2\u123b\u123c\5\u0212"+
		"\u010a\2\u123c\u123d\7\u0249\2\2\u123d\u123f\3\2\2\2\u123e\u1238\3\2\2"+
		"\2\u123e\u1239\3\2\2\2\u123e\u123a\3\2\2\2\u123e\u123f\3\2\2\2\u123f\u019b"+
		"\3\2\2\2\u1240\u1241\7\u0105\2\2\u1241\u1242\t=\2\2\u1242\u019d\3\2\2"+
		"\2\u1243\u1248\5\u01a0\u00d1\2\u1244\u1245\7\u03d8\2\2\u1245\u1246\5\u022c"+
		"\u0117\2\u1246\u1247\7\u03d9\2\2\u1247\u1249\3\2\2\2\u1248\u1244\3\2\2"+
		"\2\u1248\u1249\3\2\2\2\u1249\u019f\3\2\2\2\u124a\u124c\7\b\2\2\u124b\u124d"+
		"\7\u0257\2\2\u124c\u124b\3\2\2\2\u124c\u124d\3\2\2\2\u124d\u1276\3\2\2"+
		"\2\u124e\u1250\7\t\2\2\u124f\u1251\7\u0250\2\2\u1250\u124f\3\2\2\2\u1250"+
		"\u1251\3\2\2\2\u1251\u1276\3\2\2\2\u1252\u1259\7 \2\2\u1253\u1254\7\u0223"+
		"\2\2\u1254\u125a\7\u024f\2\2\u1255\u125a\7\u0250\2\2\u1256\u125a\7\u0237"+
		"\2\2\u1257\u125a\7\u0231\2\2\u1258\u125a\7\u0222\2\2\u1259\u1253\3\2\2"+
		"\2\u1259\u1255\3\2\2\2\u1259\u1256\3\2\2\2\u1259\u1257\3\2\2\2\u1259\u1258"+
		"\3\2\2\2\u1259\u125a\3\2\2\2\u125a\u1276\3\2\2\2\u125b\u1276\7*\2\2\u125c"+
		"\u1276\7\61\2\2\u125d\u1276\7\u0153\2\2\u125e\u1276\7\u0251\2\2\u125f"+
		"\u1276\7\u0252\2\2\u1260\u1261\7C\2\2\u1261\u1276\7n\2\2\u1262\u1276\7"+
		"J\2\2\u1263\u1276\7N\2\2\u1264\u1265\7_\2\2\u1265\u1276\7\u024f\2\2\u1266"+
		"\u1276\7\u0253\2\2\u1267\u1276\7\u01d8\2\2\u1268\u1276\7|\2\2\u1269\u1276"+
		"\7\u0254\2\2\u126a\u126b\7\u01ed\2\2\u126b\u1276\t>\2\2\u126c\u1276\7"+
		"\u008b\2\2\u126d\u126e\7\u008e\2\2\u126e\u1276\t?\2\2\u126f\u1276\7\u0255"+
		"\2\2\u1270\u1276\7\u0256\2\2\u1271\u1276\7\u00a1\2\2\u1272\u1276\7\u00a8"+
		"\2\2\u1273\u1276\7\u00a9\2\2\u1274\u1276\7\u0258\2\2\u1275\u124a\3\2\2"+
		"\2\u1275\u124e\3\2\2\2\u1275\u1252\3\2\2\2\u1275\u125b\3\2\2\2\u1275\u125c"+
		"\3\2\2\2\u1275\u125d\3\2\2\2\u1275\u125e\3\2\2\2\u1275\u125f\3\2\2\2\u1275"+
		"\u1260\3\2\2\2\u1275\u1262\3\2\2\2\u1275\u1263\3\2\2\2\u1275\u1264\3\2"+
		"\2\2\u1275\u1266\3\2\2\2\u1275\u1267\3\2\2\2\u1275\u1268\3\2\2\2\u1275"+
		"\u1269\3\2\2\2\u1275\u126a\3\2\2\2\u1275\u126c\3\2\2\2\u1275\u126d\3\2"+
		"\2\2\u1275\u126f\3\2\2\2\u1275\u1270\3\2\2\2\u1275\u1271\3\2\2\2\u1275"+
		"\u1272\3\2\2\2\u1275\u1273\3\2\2\2\u1275\u1274\3\2\2\2\u1276\u01a1\3\2"+
		"\2\2\u1277\u1288\7\u03c7\2\2\u1278\u1279\7\u03c7\2\2\u1279\u127a\7\u03d7"+
		"\2\2\u127a\u1288\7\u03c7\2\2\u127b\u127c\5\u020c\u0107\2\u127c\u127d\7"+
		"\u03d7\2\2\u127d\u127e\7\u03c7\2\2\u127e\u1288\3\2\2\2\u127f\u1280\5\u020c"+
		"\u0107\2\u1280\u1281\7\u03d7\2\2\u1281\u1282\5\u020c\u0107\2\u1282\u1288"+
		"\3\2\2\2\u1283\u1284\5\u020c\u0107\2\u1284\u1285\5\u0210\u0109\2\u1285"+
		"\u1288\3\2\2\2\u1286\u1288\5\u020c\u0107\2\u1287\u1277\3\2\2\2\u1287\u1278"+
		"\3\2\2\2\u1287\u127b\3\2\2\2\u1287\u127f\3\2\2\2\u1287\u1283\3\2\2\2\u1287"+
		"\u1286\3\2\2\2\u1288\u01a3\3\2\2\2\u1289\u128a\5\u01fa\u00fe\2\u128a\u128b"+
		"\7\u009f\2\2\u128b\u128c\5\u01fa\u00fe\2\u128c\u01a5\3\2\2\2\u128d\u128f"+
		"\7\13\2\2\u128e\u1290\t@\2\2\u128f\u128e\3\2\2\2\u128f\u1290\3\2\2\2\u1290"+
		"\u1291\3\2\2\2\u1291\u1292\7\u009c\2\2\u1292\u1293\5\u022e\u0118\2\u1293"+
		"\u01a7\3\2\2\2\u1294\u1295\7\31\2\2\u1295\u1296\7\u009c\2\2\u1296\u129a"+
		"\5\u022e\u0118\2\u1297\u1299\5\u01b0\u00d9\2\u1298\u1297\3\2\2\2\u1299"+
		"\u129c\3\2\2\2\u129a\u1298\3\2\2\2\u129a\u129b\3\2\2\2\u129b\u01a9\3\2"+
		"\2\2\u129c\u129a\3\2\2\2\u129d\u129e\7\u011d\2\2\u129e\u129f\7\u009c\2"+
		"\2\u129f\u12a1\5\u022e\u0118\2\u12a0\u12a2\tA\2\2\u12a1\u12a0\3\2\2\2"+
		"\u12a1\u12a2\3\2\2\2\u12a2\u01ab\3\2\2\2\u12a3\u12a5\7m\2\2\u12a4\u12a6"+
		"\t@\2\2\u12a5\u12a4\3\2\2\2\u12a5\u12a6\3\2\2\2\u12a6\u12a7\3\2\2\2\u12a7"+
		"\u12a8\7\u009c\2\2\u12a8\u12a9\5\u022e\u0118\2\u12a9\u01ad\3\2\2\2\u12aa"+
		"\u12ac\7\u01e5\2\2\u12ab\u12ad\t@\2\2\u12ac\u12ab\3\2\2\2\u12ac\u12ad"+
		"\3\2\2\2\u12ad\u12ae\3\2\2\2\u12ae\u12af\7\u009c\2\2\u12af\u12b1\5\u022e"+
		"\u0118\2\u12b0\u12b2\7\u01da\2\2\u12b1\u12b0\3\2\2\2\u12b1\u12b2\3\2\2"+
		"\2\u12b2\u12b4\3\2\2\2\u12b3\u12b5\7\u015a\2\2\u12b4\u12b3\3\2\2\2\u12b4"+
		"\u12b5\3\2\2\2\u12b5\u12b7\3\2\2\2\u12b6\u12b8\7\u0232\2\2\u12b7\u12b6"+
		"\3\2\2\2\u12b7\u12b8\3\2\2\2\u12b8\u01af\3\2\2\2\u12b9\u12ba\7<\2\2\u12ba"+
		"\u12c1\7\u0230\2\2\u12bb\u12c1\7\u01da\2\2\u12bc\u12c1\7\u015c\2\2\u12bd"+
		"\u12c1\7\u01a7\2\2\u12be\u12c1\7\u015a\2\2\u12bf\u12c1\7\u011b\2\2\u12c0"+
		"\u12b9\3\2\2\2\u12c0\u12bb\3\2\2\2\u12c0\u12bc\3\2\2\2\u12c0\u12bd\3\2"+
		"\2\2\u12c0\u12be\3\2\2\2\u12c0\u12bf\3\2\2\2\u12c1\u01b1\3\2\2\2\u12c2"+
		"\u12c4\7 \2\2\u12c3\u12c5\7\u0108\2\2\u12c4\u12c3\3\2\2\2\u12c4\u12c5"+
		"\3\2\2\2\u12c5\u12c6\3\2\2\2\u12c6\u12c7\7\u0167\2\2\u12c7\u12c8\5\u020c"+
		"\u0107\2\u12c8\u12c9\7\u01f1\2\2\u12c9\u12ca\tB\2\2\u12ca\u12cb\7\u0206"+
		"\2\2\u12cb\u12cc\7\u03e7\2\2\u12cc\u01b3\3\2\2\2\u12cd\u12ce\7\u0178\2"+
		"\2\u12ce\u12cf\7\u01cd\2\2\u12cf\u12d0\5\u020c\u0107\2\u12d0\u12d1\7\u0206"+
		"\2\2\u12d1\u12d2\7\u03e7\2\2\u12d2\u01b5\3\2\2\2\u12d3\u12d4\7\u022d\2"+
		"\2\u12d4\u12d5\7\u01cd\2\2\u12d5\u12d6\5\u020c\u0107\2\u12d6\u01b7\3\2"+
		"\2\2\u12d7\u12d8\7\u008c\2\2\u12d8\u12d9\5\u01bc\u00df\2\u12d9\u12da\t"+
		"C\2\2\u12da\u12e2\5\u025a\u012e\2\u12db\u12dc\7\u03da\2\2\u12dc\u12dd"+
		"\5\u01bc\u00df\2\u12dd\u12de\tC\2\2\u12de\u12df\5\u025a\u012e\2\u12df"+
		"\u12e1\3\2\2\2\u12e0\u12db\3\2\2\2\u12e1\u12e4\3\2\2\2\u12e2\u12e0\3\2"+
		"\2\2\u12e2\u12e3\3\2\2\2\u12e3\u1302\3\2\2\2\u12e4\u12e2\3\2\2\2\u12e5"+
		"\u12e9\7\u008c\2\2\u12e6\u12e7\7\30\2\2\u12e7\u12ea\7\u008c\2\2\u12e8"+
		"\u12ea\7\u02b7\2\2\u12e9\u12e6\3\2\2\2\u12e9\u12e8\3\2\2\2\u12ea\u12ed"+
		"\3\2\2\2\u12eb\u12ee\5\u01fe\u0100\2\u12ec\u12ee\7(\2\2\u12ed\u12eb\3"+
		"\2\2\2\u12ed\u12ec\3\2\2\2\u12ee\u1302\3\2\2\2\u12ef\u12f0\7\u008c\2\2"+
		"\u12f0\u12f7\7\u01b3\2\2\u12f1\u12f4\5\u01fe\u0100\2\u12f2\u12f3\7\32"+
		"\2\2\u12f3\u12f5\5\u0200\u0101\2\u12f4\u12f2\3\2\2\2\u12f4\u12f5\3\2\2"+
		"\2\u12f5\u12f8\3\2\2\2\u12f6\u12f8\7(\2\2\u12f7\u12f1\3\2\2\2\u12f7\u12f6"+
		"\3\2\2\2\u12f8\u1302\3\2\2\2\u12f9\u1302\5\u0190\u00c9\2\u12fa\u1302\5"+
		"\u0114\u008b\2\u12fb\u1302\5\u0112\u008a\2\u12fc\u12fd\7\u008c\2\2\u12fd"+
		"\u12fe\5\u01f2\u00fa\2\u12fe\u12ff\tC\2\2\u12ff\u1300\5\u025a\u012e\2"+
		"\u1300\u1302\3\2\2\2\u1301\u12d7\3\2\2\2\u1301\u12e5\3\2\2\2\u1301\u12ef"+
		"\3\2\2\2\u1301\u12f9\3\2\2\2\u1301\u12fa\3\2\2\2\u1301\u12fb\3\2\2\2\u1301"+
		"\u12fc\3\2\2\2\u1302\u01b9\3\2\2\2\u1303\u1304\7\u008e\2\2\u1304\u1305"+
		"\t\62\2\2\u1305\u139b\7\u018b\2\2\u1306\u1307\7\u008e\2\2\u1307\u1308"+
		"\tD\2\2\u1308\u130b\7\u0154\2\2\u1309\u130a\7I\2\2\u130a\u130c\7\u03e7"+
		"\2\2\u130b\u1309\3\2\2\2\u130b\u130c\3\2\2\2\u130c\u130f\3\2\2\2\u130d"+
		"\u130e\7?\2\2\u130e\u1310\5\u0212\u010a\2\u130f\u130d\3\2\2\2\u130f\u1310"+
		"\3\2\2\2\u1310\u1318\3\2\2\2\u1311\u1315\7[\2\2\u1312\u1313\5\u0212\u010a"+
		"\2\u1313\u1314\7\u03da\2\2\u1314\u1316\3\2\2\2\u1315\u1312\3\2\2\2\u1315"+
		"\u1316\3\2\2\2\u1316\u1317\3\2\2\2\u1317\u1319\5\u0212\u010a\2\u1318\u1311"+
		"\3\2\2\2\u1318\u1319\3\2\2\2\u1319\u139b\3\2\2\2\u131a\u131b\7\u008e\2"+
		"\2\u131b\u131d\5\u01be\u00e0\2\u131c\u131e\5\u01c0\u00e1\2\u131d\u131c"+
		"\3\2\2\2\u131d\u131e\3\2\2\2\u131e\u139b\3\2\2\2\u131f\u1321\7\u008e\2"+
		"\2\u1320\u1322\7\u0166\2\2\u1321\u1320\3\2\2\2\u1321\u1322\3\2\2\2\u1322"+
		"\u1323\3\2\2\2\u1323\u1324\t$\2\2\u1324\u1325\tE\2\2\u1325\u1328\5\u01f4"+
		"\u00fb\2\u1326\u1327\tE\2\2\u1327\u1329\5\u020c\u0107\2\u1328\u1326\3"+
		"\2\2\2\u1328\u1329\3\2\2\2\u1329\u132b\3\2\2\2\u132a\u132c\5\u01c0\u00e1"+
		"\2\u132b\u132a\3\2\2\2\u132b\u132c\3\2\2\2\u132c\u139b\3\2\2\2\u132d\u132e"+
		"\7\u008e\2\2\u132e\u132f\7 \2\2\u132f\u1331\t\2\2\2\u1330\u1332\5\u0244"+
		"\u0123\2\u1331\u1330\3\2\2\2\u1331\u1332\3\2\2\2\u1332\u1333\3\2\2\2\u1333"+
		"\u139b\5\u020c\u0107\2\u1334\u1335\7\u008e\2\2\u1335\u1336\7 \2\2\u1336"+
		"\u1337\tF\2\2\u1337\u139b\5\u01f2\u00fa\2\u1338\u1339\7\u008e\2\2\u1339"+
		"\u133a\7 \2\2\u133a\u133b\7\u0231\2\2\u133b\u139b\5\u01fa\u00fe\2\u133c"+
		"\u133d\7\u008e\2\2\u133d\u133e\7\u014d\2\2\u133e\u133f\5\u0202\u0102\2"+
		"\u133f\u1340\tG\2\2\u1340\u139b\3\2\2\2\u1341\u1342\7\u008e\2\2\u1342"+
		"\u139b\5\u01c2\u00e2\2\u1343\u1344\7\u008e\2\2\u1344\u1345\tH\2\2\u1345"+
		"\u1349\7[\2\2\u1346\u1347\5\u0212\u010a\2\u1347\u1348\7\u03da\2\2\u1348"+
		"\u134a\3\2\2\2\u1349\u1346\3\2\2\2\u1349\u134a\3\2\2\2\u134a\u134b\3\2"+
		"\2\2\u134b\u139b\5\u0212\u010a\2\u134c\u134d\7\u008e\2\2\u134d\u134e\7"+
		"\u00e6\2\2\u134e\u134f\7\u03d8\2\2\u134f\u1350\7\u03c7\2\2\u1350\u1351"+
		"\7\u03d9\2\2\u1351\u139b\tH\2\2\u1352\u1353\7\u008e\2\2\u1353\u1356\5"+
		"\u01c4\u00e3\2\u1354\u1355\tE\2\2\u1355\u1357\5\u020c\u0107\2\u1356\u1354"+
		"\3\2\2\2\u1356\u1357\3\2\2\2\u1357\u1359\3\2\2\2\u1358\u135a\5\u01c0\u00e1"+
		"\2\u1359\u1358\3\2\2\2\u1359\u135a\3\2\2\2\u135a\u139b\3\2\2\2\u135b\u135c"+
		"\7\u008e\2\2\u135c\u135d\tI\2\2\u135d\u135e\7\u0124\2\2\u135e\u139b\5"+
		"\u01f2\u00fa\2\u135f\u1360\7\u008e\2\2\u1360\u1363\7\u016a\2\2\u1361\u1362"+
		"\7<\2\2\u1362\u1364\5\u01fa\u00fe\2\u1363\u1361\3\2\2\2\u1363\u1364\3"+
		"\2\2\2\u1364\u139b\3\2\2\2\u1365\u1366\7\u008e\2\2\u1366\u1367\tJ\2\2"+
		"\u1367\u1368\tE\2\2\u1368\u136b\5\u01f4\u00fb\2\u1369\u136a\tE\2\2\u136a"+
		"\u136c\5\u020c\u0107\2\u136b\u1369\3\2\2\2\u136b\u136c\3\2\2\2\u136c\u136f"+
		"\3\2\2\2\u136d\u136e\7\u00ae\2\2\u136e\u1370\5\u025a\u012e\2\u136f\u136d"+
		"\3\2\2\2\u136f\u1370\3\2\2\2\u1370\u139b\3\2\2\2\u1371\u1372\7\u008e\2"+
		"\2\u1372\u1373\7\u01c1\2\2\u1373\u1376\7\u024f\2\2\u1374\u1375\tE\2\2"+
		"\u1375\u1377\5\u020c\u0107\2\u1376\u1374\3\2\2\2\u1376\u1377\3\2\2\2\u1377"+
		"\u1379\3\2\2\2\u1378\u137a\5\u01c0\u00e1\2\u1379\u1378\3\2\2\2\u1379\u137a"+
		"\3\2\2\2\u137a\u139b\3\2\2\2\u137b\u137c\7\u008e\2\2\u137c\u137d\7\u01d6"+
		"\2\2\u137d\u1382\5\u01c6\u00e4\2\u137e\u137f\7\u03da\2\2\u137f\u1381\5"+
		"\u01c6\u00e4\2\u1380\u137e\3\2\2\2\u1381\u1384\3\2\2\2\u1382\u1380\3\2"+
		"\2\2\u1382\u1383\3\2\2\2\u1383\u1388\3\2\2\2\u1384\u1382\3\2\2\2\u1385"+
		"\u1386\7<\2\2\u1386\u1387\7\u01d9\2\2\u1387\u1389\5\u0212\u010a\2\u1388"+
		"\u1385\3\2\2\2\u1388\u1389\3\2\2\2\u1389\u138a\3\2\2\2\u138a\u138e\7["+
		"\2\2\u138b\u138c\5\u0212\u010a\2\u138c\u138d\7\u03da\2\2\u138d\u138f\3"+
		"\2\2\2\u138e\u138b\3\2\2\2\u138e\u138f\3\2\2\2\u138f\u1390\3\2\2\2\u1390"+
		"\u1391\5\u0212\u010a\2\u1391\u139b\3\2\2\2\u1392\u1393\7\u008e\2\2\u1393"+
		"\u1394\7\u0201\2\2\u1394\u1398\7\u0215\2\2\u1395\u1396\7<\2\2\u1396\u1397"+
		"\7\u011c\2\2\u1397\u1399\7\u03e7\2\2\u1398\u1395\3\2\2\2\u1398\u1399\3"+
		"\2\2\2\u1399\u139b\3\2\2\2\u139a\u1303\3\2\2\2\u139a\u1306\3\2\2\2\u139a"+
		"\u131a\3\2\2\2\u139a\u131f\3\2\2\2\u139a\u132d\3\2\2\2\u139a\u1334\3\2"+
		"\2\2\u139a\u1338\3\2\2\2\u139a\u133c\3\2\2\2\u139a\u1341\3\2\2\2\u139a"+
		"\u1343\3\2\2\2\u139a\u134c\3\2\2\2\u139a\u1352\3\2\2\2\u139a\u135b\3\2"+
		"\2\2\u139a\u135f\3\2\2\2\u139a\u1365\3\2\2\2\u139a\u1371\3\2\2\2\u139a"+
		"\u137b\3\2\2\2\u139a\u1392\3\2\2\2\u139b\u01bb\3\2\2\2\u139c\u13a7\7\u03f2"+
		"\2\2\u139d\u13a7\7\u03f3\2\2\u139e\u139f\7\u03dc\2\2\u139f\u13a1\7\u03dc"+
		"\2\2\u13a0\u139e\3\2\2\2\u13a0\u13a1\3\2\2\2\u13a1\u13a2\3\2\2\2\u13a2"+
		"\u13a4\tK\2\2\u13a3\u13a0\3\2\2\2\u13a3\u13a4\3\2\2\2\u13a4\u13a5\3\2"+
		"\2\2\u13a5\u13a7\5\u020c\u0107\2\u13a6\u139c\3\2\2\2\u13a6\u139d\3\2\2"+
		"\2\u13a6\u13a3\3\2\2\2\u13a7\u01bd\3\2\2\2\u13a8\u13a9\7\30\2\2\u13a9"+
		"\u13b6\7\u008c\2\2\u13aa\u13b6\7\u02ba\2\2\u13ab\u13b6\7&\2\2\u13ac\u13b6"+
		"\7\u008a\2\2\u13ad\u13ae\7\u0167\2\2\u13ae\u13b6\7\u0215\2\2\u13af\u13b0"+
		"\7w\2\2\u13b0\u13b6\7\u0215\2\2\u13b1\u13b3\t\61\2\2\u13b2\u13b1\3\2\2"+
		"\2\u13b2\u13b3\3\2\2\2\u13b3\u13b4\3\2\2\2\u13b4\u13b6\tL\2\2\u13b5\u13a8"+
		"\3\2\2\2\u13b5\u13aa\3\2\2\2\u13b5\u13ab\3\2\2\2\u13b5\u13ac\3\2\2\2\u13b5"+
		"\u13ad\3\2\2\2\u13b5\u13af\3\2\2\2\u13b5\u13b2\3\2\2\2\u13b6\u01bf\3\2"+
		"\2\2\u13b7\u13b8\7Z\2\2\u13b8\u13bc\7\u03e7\2\2\u13b9\u13ba\7\u00ae\2"+
		"\2\u13ba\u13bc\5\u025a\u012e\2\u13bb\u13b7\3\2\2\2\u13bb\u13b9\3\2\2\2"+
		"\u13bc\u01c1\3\2\2\2\u13bd\u13bf\7\u0217\2\2\u13be\u13bd\3\2\2\2\u13be"+
		"\u13bf\3\2\2\2\u13bf\u13c0\3\2\2\2\u13c0\u13cf\7\u014e\2\2\u13c1\u13c2"+
		"\7\u018c\2\2\u13c2\u13cf\7\u0215\2\2\u13c3\u13cf\7\u01cf\2\2\u13c4\u13cf"+
		"\7\u0257\2\2\u13c5\u13c7\7\u0166\2\2\u13c6\u13c5\3\2\2\2\u13c6\u13c7\3"+
		"\2\2\2\u13c7\u13c8\3\2\2\2\u13c8\u13cf\7\u01d5\2\2\u13c9\u13cf\7\u01d7"+
		"\2\2\u13ca\u13cb\7\u0201\2\2\u13cb\u13cf\7\u0170\2\2\u13cc\u13cf\7\u010c"+
		"\2\2\u13cd\u13cf\7\u0136\2\2\u13ce\u13be\3\2\2\2\u13ce\u13c1\3\2\2\2\u13ce"+
		"\u13c3\3\2\2\2\u13ce\u13c4\3\2\2\2\u13ce\u13c6\3\2\2\2\u13ce\u13c9\3\2"+
		"\2\2\u13ce\u13ca\3\2\2\2\u13ce\u13cc\3\2\2\2\u13ce\u13cd\3\2\2\2\u13cf"+
		"\u01c3\3\2\2\2\u13d0\u13d9\7\u0154\2\2\u13d1\u13d2\7\u009c\2\2\u13d2\u13d9"+
		"\7\u0215\2\2\u13d3\u13d5\7\u0166\2\2\u13d4\u13d3\3\2\2\2\u13d4\u13d5\3"+
		"\2\2\2\u13d5\u13d6\3\2\2\2\u13d6\u13d9\7\u024f\2\2\u13d7\u13d9\7\u0228"+
		"\2\2\u13d8\u13d0\3\2\2\2\u13d8\u13d1\3\2\2\2\u13d8\u13d4\3\2\2\2\u13d8"+
		"\u13d7\3\2\2\2\u13d9\u01c5\3\2\2\2\u13da\u13e7\7\b\2\2\u13db\u13dc\7\u0114"+
		"\2\2\u13dc\u13e7\7\u017c\2\2\u13dd\u13de\7\u0135\2\2\u13de\u13e7\7\u0220"+
		"\2\2\u13df\u13e7\7\u0138\2\2\u13e0\u13e7\7\u017e\2\2\u13e1\u13e7\7\u0286"+
		"\2\2\u13e2\u13e3\7\u01c6\2\2\u13e3\u13e7\7\u015d\2\2\u13e4\u13e7\7\u0208"+
		"\2\2\u13e5\u13e7\7\u021f\2\2\u13e6\u13da\3\2\2\2\u13e6\u13db\3\2\2\2\u13e6"+
		"\u13dd\3\2\2\2\u13e6\u13df\3\2\2\2\u13e6\u13e0\3\2\2\2\u13e6\u13e1\3\2"+
		"\2\2\u13e6\u13e2\3\2\2\2\u13e6\u13e4\3\2\2\2\u13e6\u13e5\3\2\2\2\u13e7"+
		"\u01c7\3\2\2\2\u13e8\u13e9\7\u0112\2\2\u13e9\u13ea\7\u03e7\2\2\u13ea\u01c9"+
		"\3\2\2\2\u13eb\u13ec\7\u0118\2\2\u13ec\u13ed\7J\2\2\u13ed\u13f2\5\u01d6"+
		"\u00ec\2\u13ee\u13ef\7\u03da\2\2\u13ef\u13f1\5\u01d6\u00ec\2\u13f0\u13ee"+
		"\3\2\2\2\u13f1\u13f4\3\2\2\2\u13f2\u13f0\3\2\2\2\u13f2\u13f3\3\2\2\2\u13f3"+
		"\u13fc\3\2\2\2\u13f4\u13f2\3\2\2\2\u13f5\u13f6\7u\2\2\u13f6\u13f9\7\u03d8"+
		"\2\2\u13f7\u13fa\5\u022c\u0117\2\u13f8\u13fa\7\b\2\2\u13f9\u13f7\3\2\2"+
		"\2\u13f9\u13f8\3\2\2\2\u13fa\u13fb\3\2\2\2\u13fb\u13fd\7\u03d9\2\2\u13fc"+
		"\u13f5\3\2\2\2\u13fc\u13fd\3\2\2\2\u13fd\u13fe\3\2\2\2\u13fe\u13ff\7I"+
		"\2\2\u13ff\u1400\5\u020c\u0107\2\u1400\u01cb\3\2\2\2\u1401\u1403\7\u0163"+
		"\2\2\u1402\u1404\t@\2\2\u1403\u1402\3\2\2\2\u1403\u1404\3\2\2\2\u1404"+
		"\u1405\3\2\2\2\u1405\u140a\5\u01d8\u00ed\2\u1406\u1407\7\u03da\2\2\u1407"+
		"\u1409\5\u01d8\u00ed\2\u1408\u1406\3\2\2\2\u1409\u140c\3\2\2\2\u140a\u1408"+
		"\3\2\2\2\u140a\u140b\3\2\2\2\u140b\u01cd\3\2\2\2\u140c\u140a\3\2\2\2\u140d"+
		"\u140f\7V\2\2\u140e\u1410\tM\2\2\u140f\u140e\3\2\2\2\u140f\u1410\3\2\2"+
		"\2\u1410\u1412\3\2\2\2\u1411\u1413\5\u0212\u010a\2\u1412\u1411\3\2\2\2"+
		"\u1413\u1414\3\2\2\2\u1414\u1412\3\2\2\2\u1414\u1415\3\2\2\2\u1415\u01cf"+
		"\3\2\2\2\u1416\u1417\7^\2\2\u1417\u1418\7J\2\2\u1418\u1419\7P\2\2\u1419"+
		"\u141a\7\u0118\2\2\u141a\u141f\5\u01dc\u00ef\2\u141b\u141c\7\u03da\2\2"+
		"\u141c\u141e\5\u01dc\u00ef\2\u141d\u141b\3\2\2\2\u141e\u1421\3\2\2\2\u141f"+
		"\u141d\3\2\2\2\u141f\u1420\3\2\2\2\u1420\u01d1\3\2\2\2\u1421\u141f\3\2"+
		"\2\2\u1422\u1423\7\u01ee\2\2\u1423\u1424\7\u01d9\2\2\u1424\u1425\7\u0118"+
		"\2\2\u1425\u01d3\3\2\2\2\u1426\u1427\7\u0255\2\2\u1427\u01d5\3\2\2\2\u1428"+
		"\u1430\5\u01f4\u00fb\2\u1429\u142b\t\24\2\2\u142a\u1429\3\2\2\2\u142a"+
		"\u142b\3\2\2\2\u142b\u142c\3\2\2\2\u142c\u142d\7\u03d8\2\2\u142d\u142e"+
		"\5\u022c\u0117\2\u142e\u142f\7\u03d9\2\2\u142f\u1431\3\2\2\2\u1430\u142a"+
		"\3\2\2\2\u1430\u1431\3\2\2\2\u1431\u01d7\3\2\2\2\u1432\u1445\7\u0140\2"+
		"\2\u1433\u1445\7\u0170\2\2\u1434\u1436\tN\2\2\u1435\u1434\3\2\2\2\u1435"+
		"\u1436\3\2\2\2\u1436\u1437\3\2\2\2\u1437\u1445\7\u018b\2\2\u1438\u1445"+
		"\7\u01c2\2\2\u1439\u1445\7\u0257\2\2\u143a\u143b\7\u01d9\2\2\u143b\u1445"+
		"\7\u0118\2\2\u143c\u1445\7\u0215\2\2\u143d\u1445\7\u0233\2\2\u143e\u1442"+
		"\7\u024f\2\2\u143f\u1440\7\u00b0\2\2\u1440\u1441\7z\2\2\u1441\u1443\7"+
		"_\2\2\u1442\u143f\3\2\2\2\u1442\u1443\3\2\2\2\u1443\u1445\3\2\2\2\u1444"+
		"\u1432\3\2\2\2\u1444\u1433\3\2\2\2\u1444\u1435\3\2\2\2\u1444\u1438\3\2"+
		"\2\2\u1444\u1439\3\2\2\2\u1444\u143a\3\2\2\2\u1444\u143c\3\2\2\2\u1444"+
		"\u143d\3\2\2\2\u1444\u143e\3\2\2\2\u1445\u1451\3\2\2\2\u1446\u1447\7\u01df"+
		"\2\2\u1447\u1449\7\u018b\2\2\u1448\u144a\5\u013a\u009e\2\u1449\u1448\3"+
		"\2\2\2\u1449\u144a\3\2\2\2\u144a\u1451\3\2\2\2\u144b\u144c\7\u024f\2\2"+
		"\u144c\u144e\5\u022e\u0118\2\u144d\u144f\5\u01da\u00ee\2\u144e\u144d\3"+
		"\2\2\2\u144e\u144f\3\2\2\2\u144f\u1451\3\2\2\2\u1450\u1444\3\2\2\2\u1450"+
		"\u1446\3\2\2\2\u1450\u144b\3\2\2\2\u1451\u01d9\3\2\2\2\u1452\u1453\7\u00b0"+
		"\2\2\u1453\u1454\7z\2\2\u1454\u1458\7_\2\2\u1455\u1456\7<\2\2\u1456\u1458"+
		"\7\u0159\2\2\u1457\u1452\3\2\2\2\u1457\u1455\3\2\2\2\u1458\u01db\3\2\2"+
		"\2\u1459\u1461\5\u01f4\u00fb\2\u145a\u145b\7u\2\2\u145b\u145e\7\u03d8"+
		"\2\2\u145c\u145f\5\u022c\u0117\2\u145d\u145f\7\b\2\2\u145e\u145c\3\2\2"+
		"\2\u145e\u145d\3\2\2\2\u145f\u1460\3\2\2\2\u1460\u1462\7\u03d9\2\2\u1461"+
		"\u145a\3\2\2\2\u1461\u1462\3\2\2\2\u1462\u146a\3\2\2\2\u1463\u1465\t\24"+
		"\2\2\u1464\u1463\3\2\2\2\u1464\u1465\3\2\2\2\u1465\u1466\3\2\2\2\u1466"+
		"\u1467\7\u03d8\2\2\u1467\u1468\5\u022c\u0117\2\u1468\u1469\7\u03d9\2\2"+
		"\u1469\u146b\3\2\2\2\u146a\u1464\3\2\2\2\u146a\u146b\3\2\2\2\u146b\u146e"+
		"\3\2\2\2\u146c\u146d\7H\2\2\u146d\u146f\7\u0185\2\2\u146e\u146c\3\2\2"+
		"\2\u146e\u146f\3\2\2\2\u146f\u01dd\3\2\2\2\u1470\u1471\tO\2\2\u1471\u1474"+
		"\5\u01f4\u00fb\2\u1472\u1475\5\u020c\u0107\2\u1473\u1475\7\u03e7\2\2\u1474"+
		"\u1472\3\2\2\2\u1474\u1473\3\2\2\2\u1474\u1475\3\2\2\2\u1475\u01df\3\2"+
		"\2\2\u1476\u147a\tO\2\2\u1477\u1478\tP\2\2\u1478\u1479\7\u03cf\2\2\u1479"+
		"\u147b\tQ\2\2\u147a\u1477\3\2\2\2\u147a\u147b\3\2\2\2\u147b\u147c\3\2"+
		"\2\2\u147c\u147d\5\u01f0\u00f9\2\u147d\u01e1\3\2\2\2\u147e\u147f\7\u016e"+
		"\2\2\u147f\u1480\7\u03e7\2\2\u1480\u01e3\3\2\2\2\u1481\u1482\7\u00aa\2"+
		"\2\u1482\u1483\5\u020c\u0107\2\u1483\u01e5\3\2\2\2\u1484\u148c\7\u008f"+
		"\2\2\u1485\u1487\7\u0093\2\2\u1486\u1488\7\u0235\2\2\u1487\u1486\3\2\2"+
		"\2\u1487\u1488\3\2\2\2\u1488\u1489\3\2\2\2\u1489\u148d\5\u0216\u010c\2"+
		"\u148a\u148d\7\u03ef\2\2\u148b\u148d\7\u03f0\2\2\u148c\u1485\3\2\2\2\u148c"+
		"\u148a\3\2\2\2\u148c\u148b\3\2\2\2\u148d\u1497\3\2\2\2\u148e\u148f\7\u008c"+
		"\2\2\u148f\u1494\5\u01ea\u00f6\2\u1490\u1491\7\u03da\2\2\u1491\u1493\5"+
		"\u01ea\u00f6\2\u1492\u1490\3\2\2\2\u1493\u1496\3\2\2\2\u1494\u1492\3\2"+
		"\2\2\u1494\u1495\3\2\2\2\u1495\u1498\3\2\2\2\u1496\u1494\3\2\2\2\u1497"+
		"\u148e\3\2\2\2\u1497\u1498\3\2\2\2\u1498\u01e7\3\2\2\2\u1499\u14a1\7\u0083"+
		"\2\2\u149a\u149c\7\u0093\2\2\u149b\u149d\7\u0235\2\2\u149c\u149b\3\2\2"+
		"\2\u149c\u149d\3\2\2\2\u149d\u149e\3\2\2\2\u149e\u14a2\5\u0216\u010c\2"+
		"\u149f\u14a2\7\u03ef\2\2\u14a0\u14a2\7\u03f0\2\2\u14a1\u149a\3\2\2\2\u14a1"+
		"\u149f\3\2\2\2\u14a1\u14a0\3\2\2\2\u14a1\u14a2\3\2\2\2\u14a2\u14ac\3\2"+
		"\2\2\u14a3\u14a4\7\u008c\2\2\u14a4\u14a9\5\u01ea\u00f6\2\u14a5\u14a6\7"+
		"\u03da\2\2\u14a6\u14a8\5\u01ea\u00f6\2\u14a7\u14a5\3\2\2\2\u14a8\u14ab"+
		"\3\2\2\2\u14a9\u14a7\3\2\2\2\u14a9\u14aa\3\2\2\2\u14aa\u14ad\3\2\2\2\u14ab"+
		"\u14a9\3\2\2\2\u14ac\u14a3\3\2\2\2\u14ac\u14ad\3\2\2\2\u14ad\u01e9\3\2"+
		"\2\2\u14ae\u14af\tR\2\2\u14af\u14b2\7\u03cf\2\2\u14b0\u14b3\5\u0216\u010c"+
		"\2\u14b1\u14b3\7\u03e8\2\2\u14b2\u14b0\3\2\2\2\u14b2\u14b1\3\2\2\2\u14b3"+
		"\u01eb\3\2\2\2\u14b4\u14b6\7B\2\2\u14b5\u14b7\tS\2\2\u14b6\u14b5\3\2\2"+
		"\2\u14b6\u14b7\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8\u14d8\7.\2\2\u14b9\u14ba"+
		"\5\u01bc\u00df\2\u14ba\u14bb\7\u03cf\2\2\u14bb\u14c3\tT\2\2\u14bc\u14bd"+
		"\7\u03da\2\2\u14bd\u14be\5\u01bc\u00df\2\u14be\u14bf\7\u03cf\2\2\u14bf"+
		"\u14c0\tT\2\2\u14c0\u14c2\3\2\2\2\u14c1\u14bc\3\2\2\2\u14c2\u14c5\3\2"+
		"\2\2\u14c3\u14c1\3\2\2\2\u14c3\u14c4\3\2\2\2\u14c4\u14d9\3\2\2\2\u14c5"+
		"\u14c3\3\2\2\2\u14c6\u14c9\7\34\2\2\u14c7\u14ca\5\u0212\u010a\2\u14c8"+
		"\u14ca\5\u01bc\u00df\2\u14c9\u14c7\3\2\2\2\u14c9\u14c8\3\2\2\2\u14ca\u14cb"+
		"\3\2\2\2\u14cb\u14cc\5\u01bc\u00df\2\u14cc\u14cd\7\u03cf\2\2\u14cd\u14d5"+
		"\5\u01ee\u00f8\2\u14ce\u14cf\7\u03da\2\2\u14cf\u14d0\5\u01bc\u00df\2\u14d0"+
		"\u14d1\7\u03cf\2\2\u14d1\u14d2\5\u01ee\u00f8\2\u14d2\u14d4\3\2\2\2\u14d3"+
		"\u14ce\3\2\2\2\u14d4\u14d7\3\2\2\2\u14d5\u14d3\3\2\2\2\u14d5\u14d6\3\2"+
		"\2\2\u14d6\u14d9\3\2\2\2\u14d7\u14d5\3\2\2\2\u14d8\u14b9\3\2\2\2\u14d8"+
		"\u14c6\3\2\2\2\u14d9\u01ed\3\2\2\2\u14da\u14db\tU\2\2\u14db\u01ef\3\2"+
		"\2\2\u14dc\u14e2\5\u00b4[\2\u14dd\u14e2\5\u00a6T\2\u14de\u14e2\5\u00ac"+
		"W\2\u14df\u14e2\5\u00b2Z\2\u14e0\u14e2\5\u00b6\\\2\u14e1\u14dc\3\2\2\2"+
		"\u14e1\u14dd\3\2\2\2\u14e1\u14de\3\2\2\2\u14e1\u14df\3\2\2\2\u14e1\u14e0"+
		"\3\2\2\2\u14e2\u14e7\3\2\2\2\u14e3\u14e4\7<\2\2\u14e4\u14e5\7\u012f\2"+
		"\2\u14e5\u14e7\5\u020c\u0107\2\u14e6\u14e1\3\2\2\2\u14e6\u14e3\3\2\2\2"+
		"\u14e7\u01f1\3\2\2\2\u14e8\u14ec\5\u020c\u0107\2\u14e9\u14ed\7\u03ee\2"+
		"\2\u14ea\u14eb\7\u03d7\2\2\u14eb\u14ed\5\u020c\u0107\2\u14ec\u14e9\3\2"+
		"\2\2\u14ec\u14ea\3\2\2\2\u14ec\u14ed\3\2\2\2\u14ed\u01f3\3\2\2\2\u14ee"+
		"\u14ef\5\u01f2\u00fa\2\u14ef\u01f5\3\2\2\2\u14f0\u14f5\5\u020c\u0107\2"+
		"\u14f1\u14f3\5\u0210\u0109\2\u14f2\u14f4\5\u0210\u0109\2\u14f3\u14f2\3"+
		"\2\2\2\u14f3\u14f4\3\2\2\2\u14f4\u14f6\3\2\2\2\u14f5\u14f1\3\2\2\2\u14f5"+
		"\u14f6\3\2\2\2\u14f6\u01f7\3\2\2\2\u14f7\u14fa\5\u020c\u0107\2\u14f8\u14fa"+
		"\7\u03e7\2\2\u14f9\u14f7\3\2\2\2\u14f9\u14f8\3\2\2\2\u14fa\u14ff\3\2\2"+
		"\2\u14fb\u14fc\7\u03d8\2\2\u14fc\u14fd\5\u0212\u010a\2\u14fd\u14fe\7\u03d9"+
		"\2\2\u14fe\u1500\3\2\2\2\u14ff\u14fb\3\2\2\2\u14ff\u1500\3\2\2\2\u1500"+
		"\u1502\3\2\2\2\u1501\u1503\t+\2\2\u1502\u1501\3\2\2\2\u1502\u1503\3\2"+
		"\2\2\u1503\u01f9\3\2\2\2\u1504\u1505\tV\2\2\u1505\u01fb\3\2\2\2\u1506"+
		"\u1507\tW\2\2\u1507\u01fd\3\2\2\2\u1508\u150d\7\u00ca\2\2\u1509\u150d"+
		"\5\u026a\u0136\2\u150a\u150d\7\u03e7\2\2\u150b\u150d\7\u03e4\2\2\u150c"+
		"\u1508\3\2\2\2\u150c\u1509\3\2\2\2\u150c\u150a\3\2\2\2\u150c\u150b\3\2"+
		"\2\2\u150d\u01ff\3\2\2\2\u150e\u1511\5\u020c\u0107\2\u150f\u1511\7\u03e7"+
		"\2\2\u1510\u150e\3\2\2\2\u1510\u150f\3\2\2\2\u1511\u0201\3\2\2\2\u1512"+
		"\u1513\tX\2\2\u1513\u0203\3\2\2\2\u1514\u1515\5\u0212\u010a\2\u1515\u1516"+
		"\7\u03cc\2\2\u1516\u1517\5\u0212\u010a\2\u1517\u1518\7\u03cc\2\2\u1518"+
		"\u1519\5\u0212\u010a\2\u1519\u151a\7\u03cc\2\2\u151a\u151b\5\u0212\u010a"+
		"\2\u151b\u151c\7\u03cc\2\2\u151c\u1522\5\u0212\u010a\2\u151d\u151e\7\u03e3"+
		"\2\2\u151e\u151f\5\u0212\u010a\2\u151f\u1520\7\u03cc\2\2\u1520\u1521\5"+
		"\u0212\u010a\2\u1521\u1523\3\2\2\2\u1522\u151d\3\2\2\2\u1523\u1524\3\2"+
		"\2\2\u1524\u1522\3\2\2\2\u1524\u1525\3\2\2\2\u1525\u0205\3\2\2\2\u1526"+
		"\u152d\5\u0208\u0105\2\u1527\u1528\7\u03da\2\2\u1528\u152b\5\u0208\u0105"+
		"\2\u1529\u152a\7\u03da\2\2\u152a\u152c\5\u0212\u010a\2\u152b\u1529\3\2"+
		"\2\2\u152b\u152c\3\2\2\2\u152c\u152e\3\2\2\2\u152d\u1527\3\2\2\2\u152d"+
		"\u152e\3\2\2\2\u152e\u0207\3\2\2\2\u152f\u1537\7\u03e7\2\2\u1530\u1537"+
		"\7\u03ec\2\2\u1531\u1533\7\u03e9\2\2\u1532\u1531\3\2\2\2\u1533\u1534\3"+
		"\2\2\2\u1534\u1532\3\2\2\2\u1534\u1535\3\2\2\2\u1535\u1537\3\2\2\2\u1536"+
		"\u152f\3\2\2\2\u1536\u1530\3\2\2\2\u1536\u1532\3\2\2\2\u1537\u0209\3\2"+
		"\2\2\u1538\u153b\5\u020c\u0107\2\u1539\u153b\7\u03e7\2\2\u153a\u1538\3"+
		"\2\2\2\u153a\u1539\3\2\2\2\u153b\u020b\3\2\2\2\u153c\u1540\5\u020e\u0108"+
		"\2\u153d\u1540\7\u03f0\2\2\u153e\u1540\7\u03e4\2\2\u153f\u153c\3\2\2\2"+
		"\u153f\u153d\3\2\2\2\u153f\u153e\3\2\2\2\u1540\u020d\3\2\2\2\u1541\u154b"+
		"\7\u03ef\2\2\u1542\u154b\5\u026a\u0136\2\u1543\u154b\5\u026c\u0137\2\u1544"+
		"\u154b\5\u0202\u0102\2\u1545\u154b\5\u026e\u0138\2\u1546\u154b\5\u0270"+
		"\u0139\2\u1547\u154b\5\u0272\u013a\2\u1548\u154b\5\u0274\u013b\2\u1549"+
		"\u154b\5\u0276\u013c\2\u154a\u1541\3\2\2\2\u154a\u1542\3\2\2\2\u154a\u1543"+
		"\3\2\2\2\u154a\u1544\3\2\2\2\u154a\u1545\3\2\2\2\u154a\u1546\3\2\2\2\u154a"+
		"\u1547\3\2\2\2\u154a\u1548\3\2\2\2\u154a\u1549\3\2\2\2\u154b\u020f\3\2"+
		"\2\2\u154c\u1550\7\u03ee\2\2\u154d\u154e\7\u03d7\2\2\u154e\u1550\5\u020c"+
		"\u0107\2\u154f\u154c\3\2\2\2\u154f\u154d\3\2\2\2\u1550\u0211\3\2\2\2\u1551"+
		"\u1552\tY\2\2\u1552\u0213\3\2\2\2\u1553\u1556\7\u03e5\2\2\u1554\u1556"+
		"\5\u0212\u010a\2\u1555\u1553\3\2\2\2\u1555\u1554\3\2\2\2\u1556\u0215\3"+
		"\2\2\2\u1557\u1559\7\u03ed\2\2\u1558\u1557\3\2\2\2\u1558\u1559\3\2\2\2"+
		"\u1559\u155a\3\2\2\2\u155a\u155d\7\u03e7\2\2\u155b\u155d\7\u03e6\2\2\u155c"+
		"\u1558\3\2\2\2\u155c\u155b\3\2\2\2\u155d\u155f\3\2\2\2\u155e\u1560\7\u03e7"+
		"\2\2\u155f\u155e\3\2\2\2\u1560\u1561\3\2\2\2\u1561\u155f\3\2\2\2\u1561"+
		"\u1562\3\2\2\2\u1562\u156f\3\2\2\2\u1563\u1565\7\u03ed\2\2\u1564\u1563"+
		"\3\2\2\2\u1564\u1565\3\2\2\2\u1565\u1566\3\2\2\2\u1566\u1569\7\u03e7\2"+
		"\2\u1567\u1569\7\u03e6\2\2\u1568\u1564\3\2\2\2\u1568\u1567\3\2\2\2\u1569"+
		"\u156c\3\2\2\2\u156a\u156b\7\32\2\2\u156b\u156d\5\u0200\u0101\2\u156c"+
		"\u156a\3\2\2\2\u156c\u156d\3\2\2\2\u156d\u156f\3\2\2\2\u156e\u155c\3\2"+
		"\2\2\u156e\u1568\3\2\2\2\u156f\u0217\3\2\2\2\u1570\u1571\tZ\2\2\u1571"+
		"\u0219\3\2\2\2\u1572\u1574\7\u03ed\2\2\u1573\u1572\3\2\2\2\u1573\u1574"+
		"\3\2\2\2\u1574\u1575\3\2\2\2\u1575\u1576\7\u03e9\2\2\u1576\u021b\3\2\2"+
		"\2\u1577\u1579\7h\2\2\u1578\u1577\3\2\2\2\u1578\u1579\3\2\2\2\u1579\u157a"+
		"\3\2\2\2\u157a\u157b\t[\2\2\u157b\u021d\3\2\2\2\u157c\u1589\5\u0216\u010c"+
		"\2\u157d\u1589\5\u0212\u010a\2\u157e\u157f\7\u03cc\2\2\u157f\u1589\5\u0212"+
		"\u010a\2\u1580\u1589\5\u021a\u010e\2\u1581\u1589\5\u0218\u010d\2\u1582"+
		"\u1589\7\u03ea\2\2\u1583\u1589\7\u03ec\2\2\u1584\u1586\7h\2\2\u1585\u1584"+
		"\3\2\2\2\u1585\u1586\3\2\2\2\u1586\u1587\3\2\2\2\u1587\u1589\t[\2\2\u1588"+
		"\u157c\3\2\2\2\u1588\u157d\3\2\2\2\u1588\u157e\3\2\2\2\u1588\u1580\3\2"+
		"\2\2\u1588\u1581\3\2\2\2\u1588\u1582\3\2\2\2\u1588\u1583\3\2\2\2\u1588"+
		"\u1585\3\2\2\2\u1589\u021f\3\2\2\2\u158a\u158c\t\\\2\2\u158b\u158d\5\u0226"+
		"\u0114\2\u158c\u158b\3\2\2\2\u158c\u158d\3\2\2\2\u158d\u158f\3\2\2\2\u158e"+
		"\u1590\7\u00ca\2\2\u158f\u158e\3\2\2\2\u158f\u1590\3\2\2\2\u1590\u1597"+
		"\3\2\2\2\u1591\u1592\7\30\2\2\u1592\u1595\7\u008c\2\2\u1593\u1595\7\u02b7"+
		"\2\2\u1594\u1591\3\2\2\2\u1594\u1593\3\2\2\2\u1595\u1596\3\2\2\2\u1596"+
		"\u1598\5\u01fe\u0100\2\u1597\u1594\3\2\2\2\u1597\u1598\3\2\2\2\u1598\u159b"+
		"\3\2\2\2\u1599\u159a\7\32\2\2\u159a\u159c\5\u0200\u0101\2\u159b\u1599"+
		"\3\2\2\2\u159b\u159c\3\2\2\2\u159c\u15f5\3\2\2\2\u159d\u159e\7\u00c9\2"+
		"\2\u159e\u15a0\t]\2\2\u159f\u15a1\5\u0226\u0114\2\u15a0\u159f\3\2\2\2"+
		"\u15a0\u15a1\3\2\2\2\u15a1\u15a3\3\2\2\2\u15a2\u15a4\7\u00ca\2\2\u15a3"+
		"\u15a2\3\2\2\2\u15a3\u15a4\3\2\2\2\u15a4\u15f5\3\2\2\2\u15a5\u15a6\7\u01b4"+
		"\2\2\u15a6\u15a8\7\u00c7\2\2\u15a7\u15a9\5\u0226\u0114\2\u15a8\u15a7\3"+
		"\2\2\2\u15a8\u15a9\3\2\2\2\u15a9\u15ab\3\2\2\2\u15aa\u15ac\7\u00ca\2\2"+
		"\u15ab\u15aa\3\2\2\2\u15ab\u15ac\3\2\2\2\u15ac\u15f5\3\2\2\2\u15ad\u15ae"+
		"\7\u00c9\2\2\u15ae\u15af\t^\2\2\u15af\u15b1\7\u00d5\2\2\u15b0\u15b2\5"+
		"\u0226\u0114\2\u15b1\u15b0\3\2\2\2\u15b1\u15b2\3\2\2\2\u15b2\u15b4\3\2"+
		"\2\2\u15b3\u15b5\7\u00ca\2\2\u15b4\u15b3\3\2\2\2\u15b4\u15b5\3\2\2\2\u15b5"+
		"\u15f5\3\2\2\2\u15b6\u15b8\t_\2\2\u15b7\u15b9\5\u0226\u0114\2\u15b8\u15b7"+
		"\3\2\2\2\u15b8\u15b9\3\2\2\2\u15b9\u15bb\3\2\2\2\u15ba\u15bc\t`\2\2\u15bb"+
		"\u15ba\3\2\2\2\u15bb\u15bc\3\2\2\2\u15bc\u15be\3\2\2\2\u15bd\u15bf\7\u00b3"+
		"\2\2\u15be\u15bd\3\2\2\2\u15be\u15bf\3\2\2\2\u15bf\u15f5\3\2\2\2\u15c0"+
		"\u15c2\7\u00ba\2\2\u15c1\u15c3\5\u0228\u0115\2\u15c2\u15c1\3\2\2\2\u15c2"+
		"\u15c3\3\2\2\2\u15c3\u15c5\3\2\2\2\u15c4\u15c6\t`\2\2\u15c5\u15c4\3\2"+
		"\2\2\u15c5\u15c6\3\2\2\2\u15c6\u15c8\3\2\2\2\u15c7\u15c9\7\u00b3\2\2\u15c8"+
		"\u15c7\3\2\2\2\u15c8\u15c9\3\2\2\2\u15c9\u15f5\3\2\2\2\u15ca\u15cc\7\u00bb"+
		"\2\2\u15cb\u15cd\7\u00bc\2\2\u15cc\u15cb\3\2\2\2\u15cc\u15cd\3\2\2\2\u15cd"+
		"\u15cf\3\2\2\2\u15ce\u15d0\5\u0228\u0115\2\u15cf\u15ce\3\2\2\2\u15cf\u15d0"+
		"\3\2\2\2\u15d0\u15d2\3\2\2\2\u15d1\u15d3\t`\2\2\u15d2\u15d1\3\2\2\2\u15d2"+
		"\u15d3\3\2\2\2\u15d3\u15d5\3\2\2\2\u15d4\u15d6\7\u00b3\2\2\u15d5\u15d4"+
		"\3\2\2\2\u15d5\u15d6\3\2\2\2\u15d6\u15f5\3\2\2\2\u15d7\u15d9\ta\2\2\u15d8"+
		"\u15da\5\u022a\u0116\2\u15d9\u15d8\3\2\2\2\u15d9\u15da\3\2\2\2\u15da\u15dc"+
		"\3\2\2\2\u15db\u15dd\t`\2\2\u15dc\u15db\3\2\2\2\u15dc\u15dd\3\2\2\2\u15dd"+
		"\u15df\3\2\2\2\u15de\u15e0\7\u00b3\2\2\u15df\u15de\3\2\2\2\u15df\u15e0"+
		"\3\2\2\2\u15e0\u15f5\3\2\2\2\u15e1\u15f5\tb\2\2\u15e2\u15e4\tc\2\2\u15e3"+
		"\u15e5\5\u0226\u0114\2\u15e4\u15e3\3\2\2\2\u15e4\u15e5\3\2\2\2\u15e5\u15f5"+
		"\3\2\2\2\u15e6\u15e7\td\2\2\u15e7\u15e9\5\u0222\u0112\2\u15e8\u15ea\7"+
		"\u00ca\2\2\u15e9\u15e8\3\2\2\2\u15e9\u15ea\3\2\2\2\u15ea\u15f1\3\2\2\2"+
		"\u15eb\u15ec\7\30\2\2\u15ec\u15ef\7\u008c\2\2\u15ed\u15ef\7\u02b7\2\2"+
		"\u15ee\u15eb\3\2\2\2\u15ee\u15ed\3\2\2\2\u15ef\u15f0\3\2\2\2\u15f0\u15f2"+
		"\5\u01fe\u0100\2\u15f1\u15ee\3\2\2\2\u15f1\u15f2\3\2\2\2\u15f2\u15f5\3"+
		"\2\2\2\u15f3\u15f5\te\2\2\u15f4\u158a\3\2\2\2\u15f4\u159d\3\2\2\2\u15f4"+
		"\u15a5\3\2\2\2\u15f4\u15ad\3\2\2\2\u15f4\u15b6\3\2\2\2\u15f4\u15c0\3\2"+
		"\2\2\u15f4\u15ca\3\2\2\2\u15f4\u15d7\3\2\2\2\u15f4\u15e1\3\2\2\2\u15f4"+
		"\u15e2\3\2\2\2\u15f4\u15e6\3\2\2\2\u15f4\u15f3\3\2\2\2\u15f5\u0221\3\2"+
		"\2\2\u15f6\u15f7\7\u03d8\2\2\u15f7\u15fc\7\u03e7\2\2\u15f8\u15f9\7\u03da"+
		"\2\2\u15f9\u15fb\7\u03e7\2\2\u15fa\u15f8\3\2\2\2\u15fb\u15fe\3\2\2\2\u15fc"+
		"\u15fa\3\2\2\2\u15fc\u15fd\3\2\2\2\u15fd\u15ff\3\2\2\2\u15fe\u15fc\3\2"+
		"\2\2\u15ff\u1600\7\u03d9\2\2\u1600\u0223\3\2\2\2\u1601\u1603\tf\2\2\u1602"+
		"\u1604\5\u0226\u0114\2\u1603\u1602\3\2\2\2\u1603\u1604\3\2\2\2\u1604\u161b"+
		"\3\2\2\2\u1605\u1607\7\u00c6\2\2\u1606\u1608\5\u0226\u0114\2\u1607\u1606"+
		"\3\2\2\2\u1607\u1608\3\2\2\2\u1608\u160f\3\2\2\2\u1609\u160a\7\30\2\2"+
		"\u160a\u160d\7\u008c\2\2\u160b\u160d\7\u02b7\2\2\u160c\u1609\3\2\2\2\u160c"+
		"\u160b\3\2\2\2\u160d\u160e\3\2\2\2\u160e\u1610\5\u01fe\u0100\2\u160f\u160c"+
		"\3\2\2\2\u160f\u1610\3\2\2\2\u1610\u161b\3\2\2\2\u1611\u161b\tg\2\2\u1612"+
		"\u1614\7\u00be\2\2\u1613\u1615\5\u0228\u0115\2\u1614\u1613\3\2\2\2\u1614"+
		"\u1615\3\2\2\2\u1615\u161b\3\2\2\2\u1616\u1618\t`\2\2\u1617\u1619\7\u00b8"+
		"\2\2\u1618\u1617\3\2\2\2\u1618\u1619\3\2\2\2\u1619\u161b\3\2\2\2\u161a"+
		"\u1601\3\2\2\2\u161a\u1605\3\2\2\2\u161a\u1611\3\2\2\2\u161a\u1612\3\2"+
		"\2\2\u161a\u1616\3\2\2\2\u161b\u0225\3\2\2\2\u161c\u161d\7\u03d8\2\2\u161d"+
		"\u161e\5\u0212\u010a\2\u161e\u161f\7\u03d9\2\2\u161f\u0227\3\2\2\2\u1620"+
		"\u1621\7\u03d8\2\2\u1621\u1622\5\u0212\u010a\2\u1622\u1623\7\u03da\2\2"+
		"\u1623\u1624\5\u0212\u010a\2\u1624\u1625\7\u03d9\2\2\u1625\u0229\3\2\2"+
		"\2\u1626\u1627\7\u03d8\2\2\u1627\u162a\5\u0212\u010a\2\u1628\u1629\7\u03da"+
		"\2\2\u1629\u162b\5\u0212\u010a\2\u162a\u1628\3\2\2\2\u162a\u162b\3\2\2"+
		"\2\u162b\u162c\3\2\2\2\u162c\u162d\7\u03d9\2\2\u162d\u022b\3\2\2\2\u162e"+
		"\u1633\5\u020c\u0107\2\u162f\u1630\7\u03da\2\2\u1630\u1632\5\u020c\u0107"+
		"\2\u1631\u162f\3\2\2\2\u1632\u1635\3\2\2\2\u1633\u1631\3\2\2\2\u1633\u1634"+
		"\3\2\2\2\u1634\u022d\3\2\2\2\u1635\u1633\3\2\2\2\u1636\u163b\5\u01f4\u00fb"+
		"\2\u1637\u1638\7\u03da\2\2\u1638\u163a\5\u01f4\u00fb\2\u1639\u1637\3\2"+
		"\2\2\u163a\u163d\3\2\2\2\u163b\u1639\3\2\2\2\u163b\u163c\3\2\2\2\u163c"+
		"\u022f\3\2\2\2\u163d\u163b\3\2\2\2\u163e\u163f\7\u03d8\2\2\u163f\u1644"+
		"\5\u01f8\u00fd\2\u1640\u1641\7\u03da\2\2\u1641\u1643\5\u01f8\u00fd\2\u1642"+
		"\u1640\3\2\2\2\u1643\u1646\3\2\2\2\u1644\u1642\3\2\2\2\u1644\u1645\3\2"+
		"\2\2\u1645\u1647\3\2\2\2\u1646\u1644\3\2\2\2\u1647\u1648\7\u03d9\2\2\u1648"+
		"\u0231\3\2\2\2\u1649\u164e\5\u025a\u012e\2\u164a\u164b\7\u03da\2\2\u164b"+
		"\u164d\5\u025a\u012e\2\u164c\u164a\3\2\2\2\u164d\u1650\3\2\2\2\u164e\u164c"+
		"\3\2\2\2\u164e\u164f\3\2\2\2\u164f\u0233\3\2\2\2\u1650\u164e\3\2\2\2\u1651"+
		"\u1656\5\u0240\u0121\2\u1652\u1653\7\u03da\2\2\u1653\u1655\5\u0240\u0121"+
		"\2\u1654\u1652\3\2\2\2\u1655\u1658\3\2\2\2\u1656\u1654\3\2\2\2\u1656\u1657"+
		"\3\2\2\2\u1657\u0235\3\2\2\2\u1658\u1656\3\2\2\2\u1659\u165e\5\u021e\u0110"+
		"\2\u165a\u165b\7\u03da\2\2\u165b\u165d\5\u021e\u0110\2\u165c\u165a\3\2"+
		"\2\2\u165d\u1660\3\2\2\2\u165e\u165c\3\2\2\2\u165e\u165f\3\2\2\2\u165f"+
		"\u0237\3\2\2\2\u1660\u165e\3\2\2\2\u1661\u1666\7\u03e7\2\2\u1662\u1663"+
		"\7\u03da\2\2\u1663\u1665\7\u03e7\2\2\u1664\u1662\3\2\2\2\u1665\u1668\3"+
		"\2\2\2\u1666\u1664\3\2\2\2\u1666\u1667\3\2\2\2\u1667\u0239\3\2\2\2\u1668"+
		"\u1666\3\2\2\2\u1669\u166e\7\u03f2\2\2\u166a\u166b\7\u03da\2\2\u166b\u166d"+
		"\7\u03f2\2\2\u166c\u166a\3\2\2\2\u166d\u1670\3\2\2\2\u166e\u166c\3\2\2"+
		"\2\u166e\u166f\3\2\2\2\u166f\u023b\3\2\2\2\u1670\u166e\3\2\2\2\u1671\u167d"+
		"\7j\2\2\u1672\u1674\5\u0260\u0131\2\u1673\u1672\3\2\2\2\u1673\u1674\3"+
		"\2\2\2\u1674\u1675\3\2\2\2\u1675\u167d\5\u021e\u0110\2\u1676\u167a\5\u023e"+
		"\u0120\2\u1677\u1678\7l\2\2\u1678\u1679\7\u00a8\2\2\u1679\u167b\5\u023e"+
		"\u0120\2\u167a\u1677\3\2\2\2\u167a\u167b\3\2\2\2\u167b\u167d\3\2\2\2\u167c"+
		"\u1671\3\2\2\2\u167c\u1673\3\2\2\2\u167c\u1676\3\2\2\2\u167d\u023d\3\2"+
		"\2\2\u167e\u1684\th\2\2\u167f\u1681\7\u03d8\2\2\u1680\u1682\5\u0212\u010a"+
		"\2\u1681\u1680\3\2\2\2\u1681\u1682\3\2\2\2\u1682\u1683\3\2\2\2\u1683\u1685"+
		"\7\u03d9\2\2\u1684\u167f\3\2\2\2\u1684\u1685\3\2\2\2\u1685\u168d\3\2\2"+
		"\2\u1686\u1687\7\u00fc\2\2\u1687\u1689\7\u03d8\2\2\u1688\u168a\5\u0212"+
		"\u010a\2\u1689\u1688\3\2\2\2\u1689\u168a\3\2\2\2\u168a\u168b\3\2\2\2\u168b"+
		"\u168d\7\u03d9\2\2\u168c\u167e\3\2\2\2\u168c\u1686\3\2\2\2\u168d\u023f"+
		"\3\2\2\2\u168e\u1691\5\u025a\u012e\2\u168f\u1691\7(\2\2\u1690\u168e\3"+
		"\2\2\2\u1690\u168f\3\2\2\2\u1691\u0241\3\2\2\2\u1692\u1693\7G\2\2\u1693"+
		"\u1694\7\67\2\2\u1694\u0243\3\2\2\2\u1695\u1696\7G\2\2\u1696\u1697\7h"+
		"\2\2\u1697\u1698\7\67\2\2\u1698\u0245\3\2\2\2\u1699\u16ab\5\u0248\u0125"+
		"\2\u169a\u16ab\5\u0250\u0129\2\u169b\u169c\5\u0252\u012a\2\u169c\u169e"+
		"\7\u03d8\2\2\u169d\u169f\5\u0256\u012c\2\u169e\u169d\3\2\2\2\u169e\u169f"+
		"\3\2\2\2\u169f\u16a0\3\2\2\2\u16a0\u16a1\7\u03d9\2\2\u16a1\u16ab\3\2\2"+
		"\2\u16a2\u16a3\5\u01f2\u00fa\2\u16a3\u16a5\7\u03d8\2\2\u16a4\u16a6\5\u0256"+
		"\u012c\2\u16a5\u16a4\3\2\2\2\u16a5\u16a6\3\2\2\2\u16a6\u16a7\3\2\2\2\u16a7"+
		"\u16a8\7\u03d9\2\2\u16a8\u16ab\3\2\2\2\u16a9\u16ab\5\u0254\u012b\2\u16aa"+
		"\u1699\3\2\2\2\u16aa\u169a\3\2\2\2\u16aa\u169b\3\2\2\2\u16aa\u16a2\3\2"+
		"\2\2\u16aa\u16a9\3\2\2\2\u16ab\u0247\3\2\2\2\u16ac\u174a\ti\2\2\u16ad"+
		"\u16ae\7\37\2\2\u16ae\u16af\7\u03d8\2\2\u16af\u16b0\5\u025a\u012e\2\u16b0"+
		"\u16b1\7\u03da\2\2\u16b1\u16b2\5\u0224\u0113\2\u16b2\u16b3\7\u03d9\2\2"+
		"\u16b3\u174a\3\2\2\2\u16b4\u16b5\7\37\2\2\u16b5\u16b6\7\u03d8\2\2\u16b6"+
		"\u16b7\5\u025a\u012e\2\u16b7\u16b8\7\u00ab\2\2\u16b8\u16b9\5\u01fe\u0100"+
		"\2\u16b9\u16ba\7\u03d9\2\2\u16ba\u174a\3\2\2\2\u16bb\u16bc\7\26\2\2\u16bc"+
		"\u16bd\7\u03d8\2\2\u16bd\u16be\5\u025a\u012e\2\u16be\u16bf\7\r\2\2\u16bf"+
		"\u16c0\5\u0224\u0113\2\u16c0\u16c1\7\u03d9\2\2\u16c1\u174a\3\2\2\2\u16c2"+
		"\u16c3\7\u00ac\2\2\u16c3\u16c4\7\u03d8\2\2\u16c4\u16c5\5\u01f6\u00fc\2"+
		"\u16c5\u16c6\7\u03d9\2\2\u16c6\u174a\3\2\2\2\u16c7\u16c8\7\25\2\2\u16c8"+
		"\u16ca\5\u025a\u012e\2\u16c9\u16cb\5\u024a\u0126\2\u16ca\u16c9\3\2\2\2"+
		"\u16cb\u16cc\3\2\2\2\u16cc\u16ca\3\2\2\2\u16cc\u16cd\3\2\2\2\u16cd\u16d0"+
		"\3\2\2\2\u16ce\u16cf\7\63\2\2\u16cf\u16d1\5\u0258\u012d\2\u16d0\u16ce"+
		"\3\2\2\2\u16d0\u16d1\3\2\2\2\u16d1\u16d2\3\2\2\2\u16d2\u16d3\7\u014b\2"+
		"\2\u16d3\u174a\3\2\2\2\u16d4\u16d6\7\25\2\2\u16d5\u16d7\5\u024a\u0126"+
		"\2\u16d6\u16d5\3\2\2\2\u16d7\u16d8\3\2\2\2\u16d8\u16d6\3\2\2\2\u16d8\u16d9"+
		"\3\2\2\2\u16d9\u16dc\3\2\2\2\u16da\u16db\7\63\2\2\u16db\u16dd\5\u0258"+
		"\u012d\2\u16dc\u16da\3\2\2\2\u16dc\u16dd\3\2\2\2\u16dd\u16de\3\2\2\2\u16de"+
		"\u16df\7\u014b\2\2\u16df\u174a\3\2\2\2\u16e0\u16e1\7\u00c6\2\2\u16e1\u16e2"+
		"\7\u03d8\2\2\u16e2\u16e5\5\u0256\u012c\2\u16e3\u16e4\7\u00ab\2\2\u16e4"+
		"\u16e6\5\u01fe\u0100\2\u16e5\u16e3\3\2\2\2\u16e5\u16e6\3\2\2\2\u16e6\u16e7"+
		"\3\2\2\2\u16e7\u16e8\7\u03d9\2\2\u16e8\u174a\3\2\2\2\u16e9\u16ea\7\u00fd"+
		"\2\2\u16ea\u16ed\7\u03d8\2\2\u16eb\u16ee\5\u0216\u010c\2\u16ec\u16ee\5"+
		"\u025a\u012e\2\u16ed\u16eb\3\2\2\2\u16ed\u16ec\3\2\2\2\u16ee\u16ef\3\2"+
		"\2\2\u16ef\u16f2\7I\2\2\u16f0\u16f3\5\u0216\u010c\2\u16f1\u16f3\5\u025a"+
		"\u012e\2\u16f2\u16f0\3\2\2\2\u16f2\u16f1\3\2\2\2\u16f3\u16f4\3\2\2\2\u16f4"+
		"\u16f5\7\u03d9\2\2\u16f5\u174a\3\2\2\2\u16f6\u16f7\tj\2\2\u16f7\u16fa"+
		"\7\u03d8\2\2\u16f8\u16fb\5\u0216\u010c\2\u16f9\u16fb\5\u025a\u012e\2\u16fa"+
		"\u16f8\3\2\2\2\u16fa\u16f9\3\2\2\2\u16fb\u16fc\3\2\2\2\u16fc\u16ff\7?"+
		"\2\2\u16fd\u1700\5\u0212\u010a\2\u16fe\u1700\5\u025a\u012e\2\u16ff\u16fd"+
		"\3\2\2\2\u16ff\u16fe\3\2\2\2\u1700\u1706\3\2\2\2\u1701\u1704\7<\2\2\u1702"+
		"\u1705\5\u0212\u010a\2\u1703\u1705\5\u025a\u012e\2\u1704\u1702\3\2\2\2"+
		"\u1704\u1703\3\2\2\2\u1705\u1707\3\2\2\2\u1706\u1701\3\2\2\2\u1706\u1707"+
		"\3\2\2\2\u1707\u1708\3\2\2\2\u1708\u1709\7\u03d9\2\2\u1709\u174a\3\2\2"+
		"\2\u170a\u170b\7\u0101\2\2\u170b\u170c\7\u03d8\2\2\u170c\u170f\tk\2\2"+
		"\u170d\u1710\5\u0216\u010c\2\u170e\u1710\5\u025a\u012e\2\u170f\u170d\3"+
		"\2\2\2\u170f\u170e\3\2\2\2\u170f\u1710\3\2\2\2\u1710\u1711\3\2\2\2\u1711"+
		"\u1714\7?\2\2\u1712\u1715\5\u0216\u010c\2\u1713\u1715\5\u025a\u012e\2"+
		"\u1714\u1712\3\2\2\2\u1714\u1713\3\2\2\2\u1715\u1716\3\2\2\2\u1716\u1717"+
		"\7\u03d9\2\2\u1717\u174a\3\2\2\2\u1718\u1719\7\u0101\2\2\u1719\u171c\7"+
		"\u03d8\2\2\u171a\u171d\5\u0216\u010c\2\u171b\u171d\5\u025a\u012e\2\u171c"+
		"\u171a\3\2\2\2\u171c\u171b\3\2\2\2\u171d\u171e\3\2\2\2\u171e\u1721\7?"+
		"\2\2\u171f\u1722\5\u0216\u010c\2\u1720\u1722\5\u025a\u012e\2\u1721\u171f"+
		"\3\2\2\2\u1721\u1720\3\2\2\2\u1722\u1723\3\2\2\2\u1723\u1724\7\u03d9\2"+
		"\2\u1724\u174a\3\2\2\2\u1725\u1726\7\u03b9\2\2\u1726\u1729\7\u03d8\2\2"+
		"\u1727\u172a\5\u0216\u010c\2\u1728\u172a\5\u025a\u012e\2\u1729\u1727\3"+
		"\2\2\2\u1729\u1728\3\2\2\2\u172a\u1731\3\2\2\2\u172b\u172c\7\r\2\2\u172c"+
		"\u172d\tl\2\2\u172d\u172e\7\u03d8\2\2\u172e\u172f\5\u0212\u010a\2\u172f"+
		"\u1730\7\u03d9\2\2\u1730\u1732\3\2\2\2\u1731\u172b\3\2\2\2\u1731\u1732"+
		"\3\2\2\2\u1732\u1734\3\2\2\2\u1733\u1735\5\u024c\u0127\2\u1734\u1733\3"+
		"\2\2\2\u1734\u1735\3\2\2\2\u1735\u1736\3\2\2\2\u1736\u1737\7\u03d9\2\2"+
		"\u1737\u174a\3\2\2\2\u1738\u1739\7\u00fa\2\2\u1739\u173a\7\u03d8\2\2\u173a"+
		"\u173b\5<\37\2\u173b\u173e\7?\2\2\u173c\u173f\5\u0216\u010c\2\u173d\u173f"+
		"\5\u025a\u012e\2\u173e\u173c\3\2\2\2\u173e\u173d\3\2\2\2\u173f\u1740\3"+
		"\2\2\2\u1740\u1741\7\u03d9\2\2\u1741\u174a\3\2\2\2\u1742\u1743\7\u02f1"+
		"\2\2\u1743\u1744\7\u03d8\2\2\u1744\u1745\tm\2\2\u1745\u1746\7\u03da\2"+
		"\2\u1746\u1747\5\u0216\u010c\2\u1747\u1748\7\u03d9\2\2\u1748\u174a\3\2"+
		"\2\2\u1749\u16ac\3\2\2\2\u1749\u16ad\3\2\2\2\u1749\u16b4\3\2\2\2\u1749"+
		"\u16bb\3\2\2\2\u1749\u16c2\3\2\2\2\u1749\u16c7\3\2\2\2\u1749\u16d4\3\2"+
		"\2\2\u1749\u16e0\3\2\2\2\u1749\u16e9\3\2\2\2\u1749\u16f6\3\2\2\2\u1749"+
		"\u170a\3\2\2\2\u1749\u1718\3\2\2\2\u1749\u1725\3\2\2\2\u1749\u1738\3\2"+
		"\2\2\u1749\u1742\3\2\2\2\u174a\u0249\3\2\2\2\u174b\u174c\7\u00ad\2\2\u174c"+
		"\u174d\5\u0258\u012d\2\u174d\u174e\7\u009e\2\2\u174e\u174f\5\u0258\u012d"+
		"\2\u174f\u024b\3\2\2\2\u1750\u1751\7\u0187\2\2\u1751\u1756\5\u024e\u0128"+
		"\2\u1752\u1753\7\u03da\2\2\u1753\u1755\5\u024e\u0128\2\u1754\u1752\3\2"+
		"\2\2\u1755\u1758\3\2\2\2\u1756\u1754\3\2\2\2\u1756\u1757\3\2\2\2\u1757"+
		"\u175f\3\2\2\2\u1758\u1756\3\2\2\2\u1759\u175a\7\u0187\2\2\u175a\u175b"+
		"\5\u0212\u010a\2\u175b\u175c\7\u03cc\2\2\u175c\u175d\5\u0212\u010a\2\u175d"+
		"\u175f\3\2\2\2\u175e\u1750\3\2\2\2\u175e\u1759\3\2\2\2\u175f\u024d\3\2"+
		"\2\2\u1760\u1762\5\u0212\u010a\2\u1761\u1763\tn\2\2\u1762\u1761\3\2\2"+
		"\2\u1762\u1763\3\2\2\2\u1763\u024f\3\2\2\2\u1764\u1765\to\2\2\u1765\u1767"+
		"\7\u03d8\2\2\u1766\u1768\t\'\2\2\u1767\u1766\3\2\2\2\u1767\u1768\3\2\2"+
		"\2\u1768\u1769\3\2\2\2\u1769\u176a\5\u0258\u012d\2\u176a\u176b\7\u03d9"+
		"\2\2\u176b\u179d\3\2\2\2\u176c\u176d\7\u00e6\2\2\u176d\u1773\7\u03d8\2"+
		"\2\u176e\u1774\7\u03c7\2\2\u176f\u1771\7\b\2\2\u1770\u176f\3\2\2\2\u1770"+
		"\u1771\3\2\2\2\u1771\u1772\3\2\2\2\u1772\u1774\5\u0258\u012d\2\u1773\u176e"+
		"\3\2\2\2\u1773\u1770\3\2\2\2\u1774\u1775\3\2\2\2\u1775\u179d\7\u03d9\2"+
		"\2\u1776\u1777\7\u00e6\2\2\u1777\u1778\7\u03d8\2\2\u1778\u1779\7/\2\2"+
		"\u1779\u177a\5\u0256\u012c\2\u177a\u177b\7\u03d9\2\2\u177b\u179d\3\2\2"+
		"\2\u177c\u177d\tp\2\2\u177d\u177f\7\u03d8\2\2\u177e\u1780\7\b\2\2\u177f"+
		"\u177e\3\2\2\2\u177f\u1780\3\2\2\2\u1780\u1781\3\2\2\2\u1781\u1782\5\u0258"+
		"\u012d\2\u1782\u1783\7\u03d9\2\2\u1783\u179d\3\2\2\2\u1784\u1785\7\u00e7"+
		"\2\2\u1785\u1787\7\u03d8\2\2\u1786\u1788\7/\2\2\u1787\u1786\3\2\2\2\u1787"+
		"\u1788\3\2\2\2\u1788\u1789\3\2\2\2\u1789\u1794\5\u0256\u012c\2\u178a\u178b"+
		"\7q\2\2\u178b\u178c\7\22\2\2\u178c\u1791\5\u00d2j\2\u178d\u178e\7\u03da"+
		"\2\2\u178e\u1790\5\u00d2j\2\u178f\u178d\3\2\2\2\u1790\u1793\3\2\2\2\u1791"+
		"\u178f\3\2\2\2\u1791\u1792\3\2\2\2\u1792\u1795\3\2\2\2\u1793\u1791\3\2"+
		"\2\2\u1794\u178a\3\2\2\2\u1794\u1795\3\2\2\2\u1795\u1798\3\2\2\2\u1796"+
		"\u1797\7\u008d\2\2\u1797\u1799\7\u03e7\2\2\u1798\u1796\3\2\2\2\u1798\u1799"+
		"\3\2\2\2\u1799\u179a\3\2\2\2\u179a\u179b\7\u03d9\2\2\u179b\u179d\3\2\2"+
		"\2\u179c\u1764\3\2\2\2\u179c\u176c\3\2\2\2\u179c\u1776\3\2\2\2\u179c\u177c"+
		"\3\2\2\2\u179c\u1784\3\2\2\2\u179d\u0251\3\2\2\2\u179e\u17b6\5\u0276\u013c"+
		"\2\u179f\u17b6\7\u025a\2\2\u17a0\u17b6\7\u00f6\2\2\u17a1\u17b6\7\u00f2"+
		"\2\2\u17a2\u17b6\7\u00f3\2\2\u17a3\u17b6\7\u00f4\2\2\u17a4\u17b6\7\u00f7"+
		"\2\2\u17a5\u17b6\7\u00f8\2\2\u17a6\u17b6\7\u00f9\2\2\u17a7\u17b6\7G\2"+
		"\2\u17a8\u17b6\7N\2\2\u17a9\u17b6\7\u00f5\2\2\u17aa\u17b6\7\u00fb\2\2"+
		"\u17ab\u17b6\7\u01aa\2\2\u17ac\u17b6\7\u00fc\2\2\u17ad\u17b6\7\u0081\2"+
		"\2\u17ae\u17b6\7\u00fe\2\2\u17af\u17b6\7\u00ff\2\2\u17b0\u17b6\7\u0100"+
		"\2\2\u17b1\u17b6\7\u0101\2\2\u17b2\u17b6\7\u0102\2\2\u17b3\u17b6\7\u0103"+
		"\2\2\u17b4\u17b6\7\u0104\2\2\u17b5\u179e\3\2\2\2\u17b5\u179f\3\2\2\2\u17b5"+
		"\u17a0\3\2\2\2\u17b5\u17a1\3\2\2\2\u17b5\u17a2\3\2\2\2\u17b5\u17a3\3\2"+
		"\2\2\u17b5\u17a4\3\2\2\2\u17b5\u17a5\3\2\2\2\u17b5\u17a6\3\2\2\2\u17b5"+
		"\u17a7\3\2\2\2\u17b5\u17a8\3\2\2\2\u17b5\u17a9\3\2\2\2\u17b5\u17aa\3\2"+
		"\2\2\u17b5\u17ab\3\2\2\2\u17b5\u17ac\3\2\2\2\u17b5\u17ad\3\2\2\2\u17b5"+
		"\u17ae\3\2\2\2\u17b5\u17af\3\2\2\2\u17b5\u17b0\3\2\2\2\u17b5\u17b1\3\2"+
		"\2\2\u17b5\u17b2\3\2\2\2\u17b5\u17b3\3\2\2\2\u17b5\u17b4\3\2\2\2\u17b6"+
		"\u0253\3\2\2\2\u17b7\u17b8\tq\2\2\u17b8\u17b9\7\u03d8\2\2\u17b9\u17ba"+
		"\5\u0258\u012d\2\u17ba\u17bb\7\u03d9\2\2\u17bb\u0255\3\2\2\2\u17bc\u17c1"+
		"\5\u021e\u0110\2\u17bd\u17c1\5\u01f6\u00fc\2\u17be\u17c1\5\u0246\u0124"+
		"\2\u17bf\u17c1\5\u025a\u012e\2\u17c0\u17bc\3\2\2\2\u17c0\u17bd\3\2\2\2"+
		"\u17c0\u17be\3\2\2\2\u17c0\u17bf\3\2\2\2\u17c1\u17cb\3\2\2\2\u17c2\u17c7"+
		"\7\u03da\2\2\u17c3\u17c8\5\u021e\u0110\2\u17c4\u17c8\5\u01f6\u00fc\2\u17c5"+
		"\u17c8\5\u0246\u0124\2\u17c6\u17c8\5\u025a\u012e\2\u17c7\u17c3\3\2\2\2"+
		"\u17c7\u17c4\3\2\2\2\u17c7\u17c5\3\2\2\2\u17c7\u17c6\3\2\2\2\u17c8\u17ca"+
		"\3\2\2\2\u17c9\u17c2\3\2\2\2\u17ca\u17cd\3\2\2\2\u17cb\u17c9\3\2\2\2\u17cb"+
		"\u17cc\3\2\2\2\u17cc\u0257\3\2\2\2\u17cd\u17cb\3\2\2\2\u17ce\u17d3\5\u021e"+
		"\u0110\2\u17cf\u17d3\5\u01f6\u00fc\2\u17d0\u17d3\5\u0246\u0124\2\u17d1"+
		"\u17d3\5\u025a\u012e\2\u17d2\u17ce\3\2\2\2\u17d2\u17cf\3\2\2\2\u17d2\u17d0"+
		"\3\2\2\2\u17d2\u17d1\3\2\2\2\u17d3\u0259\3\2\2\2\u17d4\u17d5\b\u012e\1"+
		"\2\u17d5\u17d6\tr\2\2\u17d6\u17e0\5\u025a\u012e\6\u17d7\u17d8\5\u025c"+
		"\u012f\2\u17d8\u17da\7Q\2\2\u17d9\u17db\7h\2\2\u17da\u17d9\3\2\2\2\u17da"+
		"\u17db\3\2\2\2\u17db\u17dc\3\2\2\2\u17dc\u17dd\ts\2\2\u17dd\u17e0\3\2"+
		"\2\2\u17de\u17e0\5\u025c\u012f\2\u17df\u17d4\3\2\2\2\u17df\u17d7\3\2\2"+
		"\2\u17df\u17de\3\2\2\2\u17e0\u17e7\3\2\2\2\u17e1\u17e2\f\5\2\2\u17e2\u17e3"+
		"\5\u0264\u0133\2\u17e3\u17e4\5\u025a\u012e\6\u17e4\u17e6\3\2\2\2\u17e5"+
		"\u17e1\3\2\2\2\u17e6\u17e9\3\2\2\2\u17e7\u17e5\3\2\2\2\u17e7\u17e8\3\2"+
		"\2\2\u17e8\u025b\3\2\2\2\u17e9\u17e7\3\2\2\2\u17ea\u17ed\b\u012f\1\2\u17eb"+
		"\u17ec\7\u03f2\2\2\u17ec\u17ee\7\u03be\2\2\u17ed\u17eb\3\2\2\2\u17ed\u17ee"+
		"\3\2\2\2\u17ee\u17ef\3\2\2\2\u17ef\u17f0\5\u025e\u0130\2\u17f0\u182a\3"+
		"\2\2\2\u17f1\u17f2\f\t\2\2\u17f2\u17f3\5\u0262\u0132\2\u17f3\u17f4\5\u025c"+
		"\u012f\n\u17f4\u1829\3\2\2\2\u17f5\u17f7\f\7\2\2\u17f6\u17f8\7h\2\2\u17f7"+
		"\u17f6\3\2\2\2\u17f7\u17f8\3\2\2\2\u17f8\u17f9\3\2\2\2\u17f9\u17fa\7\20"+
		"\2\2\u17fa\u17fb\5\u025c\u012f\2\u17fb\u17fc\7\f\2\2\u17fc\u17fd\5\u025c"+
		"\u012f\b\u17fd\u1829\3\2\2\2\u17fe\u17ff\f\6\2\2\u17ff\u1800\7\u0207\2"+
		"\2\u1800\u1801\7Z\2\2\u1801\u1829\5\u025c\u012f\7\u1802\u1804\f\4\2\2"+
		"\u1803\u1805\7h\2\2\u1804\u1803\3\2\2\2\u1804\u1805\3\2\2\2\u1805\u1806"+
		"\3\2\2\2\u1806\u1807\tt\2\2\u1807\u1829\5\u025c\u012f\5\u1808\u180a\f"+
		"\13\2\2\u1809\u180b\7h\2\2\u180a\u1809\3\2\2\2\u180a\u180b\3\2\2\2\u180b"+
		"\u180c\3\2\2\2\u180c\u180d\7I\2\2\u180d\u1810\7\u03d8\2\2\u180e\u1811"+
		"\5\u00b4[\2\u180f\u1811\5\u0232\u011a\2\u1810\u180e\3\2\2\2\u1810\u180f"+
		"\3\2\2\2\u1811\u1812\3\2\2\2\u1812\u1813\7\u03d9\2\2\u1813\u1829\3\2\2"+
		"\2\u1814\u1815\f\n\2\2\u1815\u1816\7Q\2\2\u1816\u1829\5\u021c\u010f\2"+
		"\u1817\u1818\f\b\2\2\u1818\u1819\5\u0262\u0132\2\u1819\u181a\tu\2\2\u181a"+
		"\u181b\7\u03d8\2\2\u181b\u181c\5\u00b4[\2\u181c\u181d\7\u03d9\2\2\u181d"+
		"\u1829\3\2\2\2\u181e\u1820\f\5\2\2\u181f\u1821\7h\2\2\u1820\u181f\3\2"+
		"\2\2\u1820\u1821\3\2\2\2\u1821\u1822\3\2\2\2\u1822\u1823\7Z\2\2\u1823"+
		"\u1826\5\u025c\u012f\2\u1824\u1825\7\u0151\2\2\u1825\u1827\7\u03e7\2\2"+
		"\u1826\u1824\3\2\2\2\u1826\u1827\3\2\2\2\u1827\u1829\3\2\2\2\u1828\u17f1"+
		"\3\2\2\2\u1828\u17f5\3\2\2\2\u1828\u17fe\3\2\2\2\u1828\u1802\3\2\2\2\u1828"+
		"\u1808\3\2\2\2\u1828\u1814\3\2\2\2\u1828\u1817\3\2\2\2\u1828\u181e\3\2"+
		"\2\2\u1829\u182c\3\2\2\2\u182a\u1828\3\2\2\2\u182a\u182b\3\2\2\2\u182b"+
		"\u025d\3\2\2\2\u182c\u182a\3\2\2\2\u182d\u182e\b\u0130\1\2\u182e\u185b"+
		"\5\u021e\u0110\2\u182f\u185b\5\u01f6\u00fc\2\u1830\u185b\5\u0246\u0124"+
		"\2\u1831\u185b\5\u01fc\u00ff\2\u1832\u1833\5\u0260\u0131\2\u1833\u1834"+
		"\5\u025e\u0130\13\u1834\u185b\3\2\2\2\u1835\u1836\7\u00ca\2\2\u1836\u185b"+
		"\5\u025e\u0130\n\u1837\u1838\7\u03d8\2\2\u1838\u183d\5\u025a\u012e\2\u1839"+
		"\u183a\7\u03da\2\2\u183a\u183c\5\u025a\u012e\2\u183b\u1839\3\2\2\2\u183c"+
		"\u183f\3\2\2\2\u183d\u183b\3\2\2\2\u183d\u183e\3\2\2\2\u183e\u1840\3\2"+
		"\2\2\u183f\u183d\3\2\2\2\u1840\u1841\7\u03d9\2\2\u1841\u185b\3\2\2\2\u1842"+
		"\u1843\7\u01f5\2\2\u1843\u1844\7\u03d8\2\2\u1844\u1847\5\u025a\u012e\2"+
		"\u1845\u1846\7\u03da\2\2\u1846\u1848\5\u025a\u012e\2\u1847\u1845\3\2\2"+
		"\2\u1848\u1849\3\2\2\2\u1849\u1847\3\2\2\2\u1849\u184a\3\2\2\2\u184a\u184b"+
		"\3\2\2\2\u184b\u184c\7\u03d9\2\2\u184c\u185b\3\2\2\2\u184d\u184e\7\67"+
		"\2\2\u184e\u184f\7\u03d8\2\2\u184f\u1850\5\u00b4[\2\u1850\u1851\7\u03d9"+
		"\2\2\u1851\u185b\3\2\2\2\u1852\u1853\7\u03d8\2\2\u1853\u1854\5\u00b4["+
		"\2\u1854\u1855\7\u03d9\2\2\u1855\u185b\3\2\2\2\u1856\u1857\7O\2\2\u1857"+
		"\u1858\5\u025a\u012e\2\u1858\u1859\5<\37\2\u1859\u185b\3\2\2\2\u185a\u182d"+
		"\3\2\2\2\u185a\u182f\3\2\2\2\u185a\u1830\3\2\2\2\u185a\u1831\3\2\2\2\u185a"+
		"\u1832\3\2\2\2\u185a\u1835\3\2\2\2\u185a\u1837\3\2\2\2\u185a\u1842\3\2"+
		"\2\2\u185a\u184d\3\2\2\2\u185a\u1852\3\2\2\2\u185a\u1856\3\2\2\2\u185b"+
		"\u1869\3\2\2\2\u185c\u185d\f\4\2\2\u185d\u185e\5\u0266\u0134\2\u185e\u185f"+
		"\5\u025e\u0130\5\u185f\u1868\3\2\2\2\u1860\u1861\f\3\2\2\u1861\u1862\5"+
		"\u0268\u0135\2\u1862\u1863\5\u025e\u0130\4\u1863\u1868\3\2\2\2\u1864\u1865"+
		"\f\r\2\2\u1865\u1866\7\32\2\2\u1866\u1868\5\u0200\u0101\2\u1867\u185c"+
		"\3\2\2\2\u1867\u1860\3\2\2\2\u1867\u1864\3\2\2\2\u1868\u186b\3\2\2\2\u1869"+
		"\u1867\3\2\2\2\u1869\u186a\3\2\2\2\u186a\u025f\3\2\2\2\u186b\u1869\3\2"+
		"\2\2\u186c\u186d\tv\2\2\u186d\u0261\3\2\2\2\u186e\u187d\7\u03cf\2\2\u186f"+
		"\u187d\7\u03d0\2\2\u1870\u187d\7\u03d1\2\2\u1871\u1872\7\u03d1\2\2\u1872"+
		"\u187d\7\u03cf\2\2\u1873\u1874\7\u03d0\2\2\u1874\u187d\7\u03cf\2\2\u1875"+
		"\u1876\7\u03d1\2\2\u1876\u187d\7\u03d0\2\2\u1877\u1878\7\u03d2\2\2\u1878"+
		"\u187d\7\u03cf\2\2\u1879\u187a\7\u03d1\2\2\u187a\u187b\7\u03cf\2\2\u187b"+
		"\u187d\7\u03d0\2\2\u187c\u186e\3\2\2\2\u187c\u186f\3\2\2\2\u187c\u1870"+
		"\3\2\2\2\u187c\u1871\3\2\2\2\u187c\u1873\3\2\2\2\u187c\u1875\3\2\2\2\u187c"+
		"\u1877\3\2\2\2\u187c\u1879\3\2\2\2\u187d\u0263\3\2\2\2\u187e\u1886\7\f"+
		"\2\2\u187f\u1880\7\u03d5\2\2\u1880\u1886\7\u03d5\2\2\u1881\u1886\7\u00b2"+
		"\2\2\u1882\u1886\7p\2\2\u1883\u1884\7\u03d4\2\2\u1884\u1886\7\u03d4\2"+
		"\2\u1885\u187e\3\2\2\2\u1885\u187f\3\2\2\2\u1885\u1881\3\2\2\2\u1885\u1882"+
		"\3\2\2\2\u1885\u1883\3\2\2\2\u1886\u0265\3\2\2\2\u1887\u1888\7\u03d1\2"+
		"\2\u1888\u188f\7\u03d1\2\2\u1889\u188a\7\u03d0\2\2\u188a\u188f\7\u03d0"+
		"\2\2\u188b\u188f\7\u03d5\2\2\u188c\u188f\7\u03d6\2\2\u188d\u188f\7\u03d4"+
		"\2\2\u188e\u1887\3\2\2\2\u188e\u1889\3\2\2\2\u188e\u188b\3\2\2\2\u188e"+
		"\u188c\3\2\2\2\u188e\u188d\3\2\2\2\u188f\u0267\3\2\2\2\u1890\u1891\tw"+
		"\2\2\u1891\u0269\3\2\2\2\u1892\u1893\tx\2\2\u1893\u026b\3\2\2\2\u1894"+
		"\u1895\ty\2\2\u1895\u026d\3\2\2\2\u1896\u1897\tz\2\2\u1897\u026f\3\2\2"+
		"\2\u1898\u1899\t{\2\2\u1899\u0271\3\2\2\2\u189a\u189b\t|\2\2\u189b\u0273"+
		"\3\2\2\2\u189c\u189d\t}\2\2\u189d\u0275\3\2\2\2\u189e\u189f\t~\2\2\u189f"+
		"\u0277\3\2\2\2\u0399\u0279\u027c\u0282\u0285\u0288\u028a\u028f\u0292\u0295"+
		"\u029e\u02c5\u02d1\u02dc\u02ed\u02f2\u02fe\u0319\u0322\u0327\u032d\u0332"+
		"\u0336\u033f\u0342\u0345\u0349\u0350\u0353\u0358\u0360\u0365\u036a\u036d"+
		"\u036f\u037b\u037e\u0382\u0385\u0389\u038c\u0390\u0393\u0396\u039a\u039d"+
		"\u03a1\u03a7\u03ad\u03b3\u03ba\u03c1\u03c7\u03cd\u03d6\u03db\u03eb\u03f2"+
		"\u03f6\u0400\u0404\u0408\u040c\u0410\u0415\u0418\u041b\u041e\u0421\u0427"+
		"\u042b\u0431\u0436\u0439\u043c\u043e\u0449\u044d\u0450\u045e\u0461\u0465"+
		"\u0468\u046c\u046f\u0473\u0476\u047a\u047d\u0480\u0484\u0487\u048b\u0491"+
		"\u049e\u04a5\u04aa\u04ad\u04b2\u04ba\u04c0\u04c4\u04c7\u04cc\u04cf\u04d3"+
		"\u04d6\u04da\u04dd\u04e5\u04e7\u04ee\u04f4\u04fc\u04ff\u0506\u0509\u050b"+
		"\u0511\u0517\u0528\u052f\u0536\u0541\u0544\u0551\u055e\u0563\u0573\u057b"+
		"\u0585\u058b\u0595\u0598\u059d\u05aa\u05b1\u05b6\u05ba\u05bc\u05c1\u05c4"+
		"\u05ca\u05cf\u05d1\u05d5\u05d8\u05db\u05e1\u05e6\u05e8\u05ed\u05f4\u05f6"+
		"\u05fd\u0602\u0606\u0609\u0611\u0619\u061b\u0623\u0627\u062a\u0630\u0635"+
		"\u0638\u063e\u0641\u0645\u064a\u064f\u0653\u0658\u065b\u065f\u0663\u0667"+
		"\u066b\u0670\u0675\u067a\u0680\u0685\u068a\u0690\u0695\u069a\u069f\u06a4"+
		"\u06a9\u06ae\u06b3\u06b8\u06bd\u06c2\u06c8\u06cd\u06d3\u06dd\u06e4\u06e6"+
		"\u06ee\u06f3\u06f6\u06fe\u0704\u0714\u0720\u0722\u0725\u072d\u0733\u0739"+
		"\u0746\u074d\u0755\u0758\u0763\u076b\u076e\u077a\u0781\u0789\u078c\u0798"+
		"\u079f\u07a7\u07aa\u07b1\u07b9\u07bc\u07be\u07c3\u07cb\u07d4\u07d8\u07dc"+
		"\u07e1\u07e7\u07ed\u07f2\u07f7\u07fc\u0801\u0804\u0809\u080e\u0818\u081c"+
		"\u0823\u0828\u082b\u0830\u0833\u0837\u083b\u0843\u0856\u0859\u085c\u0860"+
		"\u086a\u0877\u087e\u0881\u088a\u088d\u0890\u089b\u089e\u08a2\u08aa\u08ad"+
		"\u08b2\u08ba\u08c0\u08c4\u08c8\u08cd\u08d2\u08d9\u08dd\u08e8\u08f0\u08f3"+
		"\u08f9\u08ff\u0901\u0906\u0909\u090f\u0915\u0917\u091b\u091e\u0921\u0927"+
		"\u092d\u0930\u0936\u093c\u093e\u0943\u094b\u094d\u0956\u095b\u0963\u0967"+
		"\u096f\u0979\u097e\u0985\u0989\u098d\u09a5\u09a9\u09b5\u09b8\u09c1\u09d2"+
		"\u09de\u09e5\u09ec\u09fb\u0a08\u0a0e\u0a14\u0a1a\u0a20\u0a26\u0a2c\u0a31"+
		"\u0a38\u0a3f\u0a46\u0a4b\u0a4e\u0a50\u0a5e\u0a65\u0a6c\u0a72\u0a76\u0a7a"+
		"\u0a81\u0a84\u0a89\u0a90\u0a97\u0a9b\u0aa4\u0aad\u0ab6\u0ab9\u0abd\u0ac6"+
		"\u0aca\u0acd\u0ad0\u0ad6\u0ad9\u0adf\u0ae8\u0aeb\u0af6\u0af9\u0afe\u0b01"+
		"\u0b06\u0b10\u0b15\u0b1b\u0b1d\u0b23\u0b25\u0b2b\u0b33\u0b38\u0b40\u0b43"+
		"\u0b48\u0b4b\u0b50\u0b58\u0b60\u0b66\u0b6e\u0b73\u0b7b\u0b7e\u0b82\u0b85"+
		"\u0b8d\u0b93\u0b9c\u0b9f\u0ba3\u0ba7\u0bad\u0bb1\u0bb5\u0bb7\u0bba\u0bbd"+
		"\u0bc0\u0bc6\u0bca\u0bcd\u0bd0\u0bd3\u0bd6\u0bd8\u0bdc\u0be2\u0be8\u0bed"+
		"\u0bf0\u0bf6\u0bfa\u0c02\u0c06\u0c09\u0c0c\u0c15\u0c19\u0c1c\u0c20\u0c24"+
		"\u0c27\u0c2a\u0c2f\u0c35\u0c39\u0c43\u0c49\u0c4d\u0c53\u0c57\u0c5d\u0c60"+
		"\u0c6c\u0c70\u0c74\u0c7c\u0c80\u0c88\u0c8b\u0c8f\u0c92\u0c9a\u0c9f\u0ca2"+
		"\u0ca5\u0ca9\u0cac\u0cb5\u0cba\u0cc3\u0cc8\u0ccf\u0cd6\u0cde\u0ce3\u0ceb"+
		"\u0cee\u0cf1\u0cf8\u0cfb\u0d02\u0d05\u0d0d\u0d13\u0d1e\u0d21\u0d2c\u0d32"+
		"\u0d36\u0d41\u0d46\u0d48\u0d4c\u0d56\u0d60\u0d66\u0d6b\u0d6e\u0d71\u0d74"+
		"\u0d7a\u0d7f\u0d82\u0d85\u0d88\u0d8a\u0d90\u0d95\u0d98\u0d9b\u0d9f\u0da5"+
		"\u0da9\u0db3\u0db7\u0dbd\u0dc6\u0dc9\u0dcd\u0dd0\u0dd4\u0dd8\u0ddb\u0ddd"+
		"\u0de5\u0df1\u0df7\u0df9\u0dff\u0e01\u0e03\u0e09\u0e11\u0e19\u0e1f\u0e28"+
		"\u0e2d\u0e2f\u0e33\u0e37\u0e3d\u0e44\u0e48\u0e51\u0e54\u0e58\u0e5c\u0e60"+
		"\u0e63\u0e66\u0e69\u0e6d\u0e71\u0e74\u0e77\u0e7a\u0e81\u0e85\u0e94\u0ea1"+
		"\u0ea9\u0eb3\u0eb7\u0eba\u0ec0\u0ec3\u0ec6\u0ecf\u0ed8\u0ee2\u0ee6\u0ef0"+
		"\u0efa\u0f02\u0f05\u0f0e\u0f11\u0f15\u0f1a\u0f1e\u0f27\u0f2a\u0f49\u0f4c"+
		"\u0f4f\u0f87\u0f8c\u0fa8\u0fb6\u0fbd\u0fc1\u0fc7\u0fcf\u0fd1\u0fdc\u0fe6"+
		"\u0fed\u0ff3\u0ffb\u1000\u1008\u1010\u1018\u1020\u1026\u1029\u102d\u1032"+
		"\u1037\u103d\u103f\u104a\u104f\u1056\u1058\u1066\u106c\u1071\u1076\u107c"+
		"\u1083\u108b\u1093\u1098\u109e\u10a1\u10a9\u10b0\u10b9\u10bc\u10cd\u10d5"+
		"\u10dd\u10e1\u10e8\u10ee\u10f6\u10ff\u1105\u110c\u1113\u1118\u111b\u111d"+
		"\u1123\u1125\u1129\u112b\u112e\u1137\u113d\u1144\u114b\u1150\u1153\u1155"+
		"\u115b\u115d\u1161\u1163\u1166\u116b\u1172\u117b\u1180\u1189\u1190\u1195"+
		"\u1198\u119a\u11a0\u11a2\u11a5\u11b1\u11b7\u11c0\u11c9\u11ce\u11d7\u11dd"+
		"\u11e8\u11eb\u11f7\u11fe\u1203\u1212\u121d\u1220\u122a\u1234\u123e\u1248"+
		"\u124c\u1250\u1259\u1275\u1287\u128f\u129a\u12a1\u12a5\u12ac\u12b1\u12b4"+
		"\u12b7\u12c0\u12c4\u12e2\u12e9\u12ed\u12f4\u12f7\u1301\u130b\u130f\u1315"+
		"\u1318\u131d\u1321\u1328\u132b\u1331\u1349\u1356\u1359\u1363\u136b\u136f"+
		"\u1376\u1379\u1382\u1388\u138e\u1398\u139a\u13a0\u13a3\u13a6\u13b2\u13b5"+
		"\u13bb\u13be\u13c6\u13ce\u13d4\u13d8\u13e6\u13f2\u13f9\u13fc\u1403\u140a"+
		"\u140f\u1414\u141f\u142a\u1430\u1435\u1442\u1444\u1449\u144e\u1450\u1457"+
		"\u145e\u1461\u1464\u146a\u146e\u1474\u147a\u1487\u148c\u1494\u1497\u149c"+
		"\u14a1\u14a9\u14ac\u14b2\u14b6\u14c3\u14c9\u14d5\u14d8\u14e1\u14e6\u14ec"+
		"\u14f3\u14f5\u14f9\u14ff\u1502\u150c\u1510\u1524\u152b\u152d\u1534\u1536"+
		"\u153a\u153f\u154a\u154f\u1555\u1558\u155c\u1561\u1564\u1568\u156c\u156e"+
		"\u1573\u1578\u1585\u1588\u158c\u158f\u1594\u1597\u159b\u15a0\u15a3\u15a8"+
		"\u15ab\u15b1\u15b4\u15b8\u15bb\u15be\u15c2\u15c5\u15c8\u15cc\u15cf\u15d2"+
		"\u15d5\u15d9\u15dc\u15df\u15e4\u15e9\u15ee\u15f1\u15f4\u15fc\u1603\u1607"+
		"\u160c\u160f\u1614\u1618\u161a\u162a\u1633\u163b\u1644\u164e\u1656\u165e"+
		"\u1666\u166e\u1673\u167a\u167c\u1681\u1684\u1689\u168c\u1690\u169e\u16a5"+
		"\u16aa\u16cc\u16d0\u16d8\u16dc\u16e5\u16ed\u16f2\u16fa\u16ff\u1704\u1706"+
		"\u170f\u1714\u171c\u1721\u1729\u1731\u1734\u173e\u1749\u1756\u175e\u1762"+
		"\u1767\u1770\u1773\u177f\u1787\u1791\u1794\u1798\u179c\u17b5\u17c0\u17c7"+
		"\u17cb\u17d2\u17da\u17df\u17e7\u17ed\u17f7\u1804\u180a\u1810\u1820\u1826"+
		"\u1828\u182a\u183d\u1849\u185a\u1867\u1869\u187c\u1885\u188e";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}